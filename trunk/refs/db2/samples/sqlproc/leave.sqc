/****************************************************************************
** Licensed Materials - Property of IBM
** 
** Governed under the terms of the International
** License Agreement for Non-Warranted Sample Code.
**
** (C) COPYRIGHT International Business Machines Corp. 1995 - 2002        
** All Rights Reserved.
**
** US Government Users Restricted Rights - Use, duplication or
** disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
*****************************************************************************
**
** SOURCE FILE NAME: leave.sqc 
**    
** SAMPLE: To call the LEAVE_LOOP SQL procedure
**           
**         There are two parts to this program:
**            1. the leave executable (placed on the client)
**            2. the LEAVE_LOOP SQL procedure (created on the
**               server with the leave.db2 CLP script)
**
**         leave calls the LEAVE_LOOP SQL procedure by preparing
**         and executing a dynamic CALL statement:
**            
**         sprintf(stmt, "CALL %s (?)", procname);
**         EXEC SQL prepare st from :stmt;
**         EXEC SQL execute st INTO :count:countind;
**
**         When the CALL with Host Variable is used,
**         the precompiler allocates and initializes an internal one
**         variable SQLDA for both input and output.
**
**         The LEAVE_LOOP procedure counts the number of FETCH
**         operations performed in a LOOP statement before the 
**         "not_found" condition handler invokes a LEAVE statement. 
**         The LEAVE statement causes the flow of control to exit 
**         the loop and complete the stored procedure.
**
**         The counter value is assigned to the counter OUT parameter
**         that is returned to the leave client. The leave client  
**         then prints the counter value.
**
** SQL STATEMENTS USED:
**         CONNECT 
**         CALL
**
** OUTPUT FILE: leave.out (available in the online documentation)
*****************************************************************************
**
** For more information on the sample programs, see the README file.
**
** For information on creating SQL procedures and developing C applications,
** see the Application Development Guide.
**
** For information on using SQL statements, see the SQL Reference.
**
** For the latest information on programming, building, and running DB2 
** applications, visit the DB2 application development website: 
**     http://www.software.ibm.com/data/db2/udb/ad
****************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <sql.h> 
#include <sqlda.h>
#include <sqlca.h>
#include <string.h>
#include "utilemb.h"


int main(int argc, char *argv[]) {

   EXEC SQL BEGIN DECLARE SECTION;
     char database[9];
     char userid[9];
     char passwd[19];

     /* Declare a Local Variable for Holding the Procedure's Name */
     char procname[254] = "LEAVE_LOOP";

    /* Declare a statement strings to call the procedure dynamically */
    char stmt[1200];

     /* Declare Local Variables for Passing Data to SQL Procedure */
     sqlint32 count     = 0;
     sqlint16 countind = 0;
   EXEC SQL END DECLARE SECTION;

   /* Declare the output SQLDA */
   struct sqlda *inout_sqlda = (struct sqlda *)
   malloc(SQLDASIZE(1)); 

   /* Declare the SQLCA */
   struct sqlca sqlca;

   char eBuffer[1024]; /* error message buffer */

   if (argc != 4) {
      printf ("\nUSAGE: leave remote_database userid passwd\n\n");
      return 1;
   }
   strcpy (database, argv[1]);
   strcpy (userid, argv[2]);
   strcpy (passwd, argv[3]);
   /* Connect to Remote Database */
   printf("CONNECT TO Remote Database.\n");
   EXEC SQL CONNECT TO :database USER :userid USING :passwd; 
   EMB_SQL_CHECK("CONNECT TO RSAMPLE");

   /********************************************************\
   * Call the Remote Procedure via CALL with Host Variables *
   \********************************************************/
   printf("Use CALL with Host Variables to invoke the Server Procedure "
      "named %s\n", procname);
   countind = -1;                  /* count has no input, so set to null */
   sprintf(stmt, "CALL %s (?)", procname);

   EXEC SQL prepare st from :stmt;
   EMB_SQL_CHECK("PREPARE CALL STATEMENT");

   EXEC SQL execute st INTO :count:countind;  
   EMB_SQL_CHECK("EXECUTE CALL STATEMENT");

   /********************************************************\
   * Display the # of times the LOOP statement iterated     *
   \********************************************************/

   printf("\nLOOP statement iterated %d times before invoking LEAVE\n", count);

   /* COMMIT or ROLLBACK the transaction */
   if (SQLCODE == 0)
   { /* Rollback the changes to the database */
     EXEC SQL ROLLBACK;
     printf("Server Procedure Complete.\n");
   }
   else
   { /* print the error message, roll back the transaction and return */
     sqlaintp (eBuffer, 1024, 80, &sqlca);
     printf("\n%s\n", eBuffer);
  
     EXEC SQL ROLLBACK;
     printf("Server Procedure Transaction Rolled Back.\n\n");
     return 1;
   }

   /* Free allocated memory */
   free( inout_sqlda ); 

   /* Disconnect from Remote Database */
   EXEC SQL CONNECT RESET; 
   EMB_SQL_CHECK("CONNECT RESET");
   return 0;
}
/* end of program : leave.sqc */

