 
 -- 1 --  of 202
1.0  Interactive CLI (Applet) Documentation
 
 
 
 
 
 
 
 
 
 
 
 
          +----------------------------------------------
          |        Interactive CLI Documentation        |
          |   (Documentation for samples/cli/db2cli)    |
          |                                             |
          +----------------------------------------------
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 2 --  of 202
  1.1  Table of Contents
 
  o   Related Documentation   (page 8)
  o   "Starting" Interactive CLI   (page 8)
  o   Overview   (page 8)
  o   Handles and Memory Buffers   (page 9)
  o   Command Coding Conventions   (page 12)
  o   Use of Files   (page 14)
  o   Commands:
 
      +----------------------+-----------+-----------------------+----------+
      |   SQLAllocConnect    | 15        |   ---GetMemArray      | 90       |
      +----------------------+-----------+-----------------------+----------+
      |   SQLAllocEnv        | 16        |   ---GetMemMatrix     | 92       |
      +----------------------+-----------+-----------------------+----------+
      |   SQLAllocStmt       | 17        |   ---GetParamIndex    | 93       |
      +----------------------+-----------+-----------------------+----------+
      |   SQLBindCol         | 18        |   SQLGetPosition      | 94       |
      +----------------------+-----------+-----------------------+----------+
      |   SQLBindFileToCol   | 20        |   SQLGetSQLCA         | 96       |
      +----------------------+-----------+-----------------------+----------+
      |   SQLBindFileToParam | 21        |   SQLGetStmtOption    | 98       |
      +----------------------+-----------+-----------------------+----------+
      |   SQLBindParameter   | 22        |   SQLGetSubString     | 99       |
      +----------------------+-----------+-----------------------+----------+
      |   SQLCancel          | 25        |   SQLGetTypeInfo      | 102      |
      +----------------------+-----------+-----------------------+----------+
      |   ---ChangeMemArray  | 26        |   ---KillEnv          | 104      |
      +----------------------+-----------+-----------------------+----------+
      |   ---ChangeParam     | 27        |   ---List             | 105      |
      +----------------------+-----------+-----------------------+----------+
      |   ---Check           | 28        |   SQLMoreResults      | 108      |
      +----------------------+-----------+-----------------------+----------+
      |   SQLColAttributes   | 31        |   SQLNativeSql        | 112      |
      +----------------------+-----------+-----------------------+----------+
      |                      | 33        |   SQLNumParams        | 113      |
      | SQLColumnPrivileges  |           |                       |          |
      +----------------------+-----------+-----------------------+----------+
      |   SQLColumns         | 35        |   SQLNumResultCols    | 114      |
      +----------------------+-----------+-----------------------+----------+
      |   SQLConnect         | 37        |   ---Option           | 115      |
      +----------------------+-----------+-----------------------+----------+
      |   SQLDataSources     | 38        |   SQLParamData        | 121      |
      +----------------------+-----------+-----------------------+----------+
      |   ---DescribeAll     | 40        |   SQLParamOptions     | 122      |
      +----------------------+-----------+-----------------------+----------+
      |   SQLDescribeCol     | 41        |   ---Pause            | 123      |
      +----------------------+-----------+-----------------------+----------+
      |   SQLDisconnect      | 43        |   SQLPrepare          | 124      |
      +----------------------+-----------+-----------------------+----------+
      |   ---Diff            | 42        |                       |          |
      +----------------------+-----------+-----------------------+----------+
      |   ---DisplayFormat   | 44        |   SQLPrimaryKeys      | 126      |
      +----------------------+-----------+-----------------------+----------+
      |   SQLDriverConnect   | 45        |   SQLProcedureColumns | 128      |
      +----------------------+-----------+-----------------------+----------+
      |   SQLError           | 47        |   SQLProcedures       | 130      |
      +----------------------+-----------+-----------------------+----------+
      |   SQLExecDirect.     | 49        |   SQLPutData          | 132      |
      +----------------------+-----------+-----------------------+----------+
      |   SQLExecute         | 50        |   ---QuickConnect     | 137      |
      +----------------------+-----------+-----------------------+----------+
 
 
 
 -- 3 --  of 202
      +----------------------+-----------+-----------------------+----------+
      |   ---ExtendedBindCol | 51        |   ---Quit             | 138      |
      +----------------------+-----------+-----------------------+----------+
      |   SQLExtendedFetch   | 52        |   ---Read             | 139      |
      +----------------------+-----------+-----------------------+----------+
      |   SQLFetch           | 57        |   ---ReadNLog         | 140      |
      +----------------------+-----------+-----------------------+----------+
      |   ---FetchAll        | 58        |   SQLRowCount         | 141      |
      +----------------------+-----------+-----------------------+----------+
      |   ---FetchNext       | 59        |   ---SaveFile         | 142      |
      +----------------------+-----------+-----------------------+----------+
      |   SQLForeignKeys     | 61        |   SQLSetColAttributes | 143      |
      +----------------------+-----------+-----------------------+----------+
      |   ---FormatMatrix    | 64        |   SQLSetConnection    | 145      |
      +----------------------+-----------+-----------------------+----------+
      |   SQLFreeConnect     | 66        |   SQLSetConnectOption | 146      |
      +----------------------+-----------+-----------------------+----------+
      |   SQLFreeEnv         | 67        |   SQLSetCursorName    | 149      |
      +----------------------+-----------+-----------------------+----------+
      |   ---FreeFileRef     | 68        |   SQLSetEnvAttr       | 150      |
      +----------------------+-----------+-----------------------+----------+
      |   ---FreeMem         | 69        |   SQLSetParam         | 152      |
      +----------------------+-----------+-----------------------+----------+
      |   ---FreeMemArray    | 70        |   SQLSetStmtOption    | 154      |
      +----------------------+-----------+-----------------------+----------+
      |   ---FreeMemMatrix   | 71        |   SQLSpecialColumns   | 156      |
      +----------------------+-----------+-----------------------+----------+
      |   SQLFreeStmt        | 72        |   SQLStatistics       | 159      |
      +----------------------+-----------+-----------------------+----------+
      |                      | 74        |   SQLTablePrivileges  | 161      |
      | SQLGetConnectOption  |           |                       |          |
      +----------------------+-----------+-----------------------+----------+
      |   SQLGetCursorName   | 75        |   SQLTables           | 163      |
      +----------------------+-----------+-----------------------+----------+
      |   SQLGetData         | 76        |   SQLTransact         | 166      |
      +----------------------+-----------+-----------------------+----------+
      |   SQLGetEnvAttr      | 79        |   ---UnformatMatrix.  | 167      |
      +----------------------+-----------+-----------------------+----------+
      |   ---GetFileRef      | 80        |   ---UpdateElem       | 168      |
      +----------------------+-----------+-----------------------+----------+
      |   SQLGetFunctions    | 81        |   ---UpdateFileRef    | 171      |
      +----------------------+-----------+-----------------------+----------+
      |   SQLGetInfo         | 84        |   ---UpdateMem        | 173      |
      +----------------------+-----------+-----------------------+----------+
      |   ---GetInfoAll      | 87        |                       |          |
      +----------------------+-----------+-----------------------+----------+
      |   SQLGetLength       | 88        |                       |          |
      +----------------------+-----------+-----------------------+----------+
      |   ---GetMem          | 89        |                       |          |
      +----------------------+-----------+-----------------------+----------+
 
  o   Example Tables and Scripts   (page 176)
      -   SQL to Create Tables, Views and Indexes   (page 176)
      -   Tables with Sample Data   (page 177)
      -   Registry of Sample Scripts   (page 179)
      -   Cross Reference of Scripts and Commands Used   (page 179)
  o   Command Syntax Summary   (page 183)
  o   Feedback   (page 201)
  o   List of Potential Future Enhancements   (page 202)
 
 
 
 
 
 
 -- 4 --  of 202
  1.2  Related Documentation
 
  This documentation presents IBM's Interactive CLI.  It assumes that the
  reader is familiar with both the functions supported by IBM CLI and with
  the SQL statements that are utilized by those functions.  A list of
  relevant books follows:
 
       IBM CLI functions       IBM  SC20H-4644-00 DB2 Call Level Interface Guide and Reference
                                                  for common server Version
 
                               Microsoft's Programmer's Reference for ODBC Version 2.0
 
 
       SQL for DB2(cs)         IBM  SC09-1574-00  IBM DATABASE 2 SQL Reference for common server
                                                  Version 2
 
 
       SQL for DB2 for MVS     IBM  SC26-3270-00  IBM DATABASE 2 for MVS/ESA SQL Reference
 
 
       SQL for SQL/DS          IBM  SH09-8087-03  SQL/DS SQL Reference for IBM VM Systems and VSE
 
 
       SQL for SQL/400         IBM  SC41-9608-00  DB2 for OS/400 SQL Reference Version 3
 
 
       SQL across IBM          IBM  SC26-8416-00  IBM SQL Reference Version 2
       Relational DBMSs
 
 
 
 
 
  1.3  "Starting" Interactive CLI
 
  The executable of Interactive CLI is named db2cli and this can be found in
  the sqllib/samples/cli/ sub-directory. For both AIX and OS/2 users, this
  sub-directory in located in the home directory of the database instance
  owner. Copy this executable to a directory of your own choosing.  Change to
  that directory and then type db2cli at the operating system command prompt
  to enter into the Interactive CLI environment.
 
  Before an attempt to connect to a database is made, ensure that the
  database has been created and properly catalogued if necessary. Use the
  Command Line Processor facility to do this.
 
 
 
 
 
  1.4  Overview
 
  IBM Interactive CLI consists of a set of commands that may used to design
  and prototype CLI function calls.  The main use is intended to be to test
  those calls prior to placing them into a C program.  However the commands
  may be of use without ever placing them into a program.  Interactive CLI is
  a programmer's testing tool provided for the convenience of those that want
  to use it, and IBM makes no guarantees about its performance.  Interactive
  CLI is not intended for end users and so does not have extensive error
  checking built into it.  For instance, Interactive CLI will likely "crash"
  if the closing delimiter at the end of a string parameter is not coded.
 
  Two types of commands are supported:
 
 
 -- 5 --  of 202
    CLI commands           There is a command that corresponds to (and has
                           the same name as) each of the function calls that
                           is supported by IBM CLI.
 
    Support Commands       There are also several supporting commands that do
                           not have an equivalent CLI function.
 
  The commands can either be submitted interactively or via a file.
  Similarly the results of executing the commands can either be displayed on
  the terminal or written to a file.  A useful feature of the CLI Command
  Driver is the ability to capture all the commands that are entered during a
  session and write them to a file; thus creating a "command script" that can
  be rerun at a latter time.
 
 
 
 
 
  1.5  Handles and Memory Buffers
 
  In addition to the named objects in the SQL database, the users of the
  Interactive CLI create and work with the following types of "named"
  objects.  These are:
 
  o   a handle to the environment   (henv)
 
  o   one or more handles to database connections   (hdbc)
 
  o   one or more handles to SQL statements   (hstmt)
 
  o   one or more handles to LOB file references   (hfileref)
 
  o   one or more handles to scalar memory buffers   (hmembuf)
 
  o   one or more handles to memory arrays   (memarray_id)
 
  o   one or more handles to memory matrix objects   (memmatrix_id)
 
  o   one or more handles to matrix formats   (matrixformat_id)
 
  The vales in parenthesis beside each of the items in the above list is the
  value that is used for these items in the syntax diagrams for the commands.
 
  The "identifiers" that are assigned to these objects are integers.  The
  permitted values vary by handle and memory type as follows:
 
       henv              1 to 30               hmembuf           1 to 36767
 
       hdbc              1 to 30               memarray_id       1 to 36767
 
       hstmt             1 to 650              memmatrix_id      1 to 36767
 
       hfileref          1 to 36767            matrixformat_id   1 to 36767
 
  There can be duplication across types of objects but not within the same
  type of object.  For example, the identifier assigned to the hdbc can be 8
  and the identifier assigned to one hmembuf may be 8; but there can not be
  two hmembufs with the identifier 8, even when they are in the scope of
  different hdbcs or hstmts.
 
  In order to make the Interactive CLI usable it is necessary to provide a
  basic facility for creating, modifying, displaying and freeing variable
  areas of memory.  This is because the CLI functions are designed for use
 
 
 -- 6 --  of 202
  with programming languages which, of course, have such facilities.  We call
  each of these areas of memory "memory buffers".  Each such buffer is
  identified by a unique integer value.  These values serve as "identifiers"
  of the buffers.  All buffers of a given type have a unique identifier.
 
  Four types of memory objects are supported.  These are known as:
 
    hmembuf           such objects hold a scalar value.
 
    memarray_id       such objects hold an array of values with a specific
                      data type.  These arrays are used both to support
                      "column-wise binding" for the retrieval of blocks of
                      rows and to support the binding of sets of input values
                      when executing certain statements.
 
    memmatrix_id      such objects hold an matrix of values where each column
                      has a specific data type.  These matrixes are used to
                      support "row-wise binding" for the retrieval of blocks
                      of rows.
 
    hfileref          such objects hold a specific LOB file reference buffer
                      (either a scalar or an array).
 
  In addition, "named" items called "matrixformat"s are defined in order to
  assign data types to the columns in a block of matrix memory.
 
  The following table shows the special commands that are used to allocate,
  manipulate, inquire into, and free memory buffers:
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 7 --  of 202
  +--------------+--------------+--------------+--------------+-------------+
  | Item         | Create       | Update       | Display      | Free        |
  |              +--------------+--------------+--------------+-------------+
  |              |        Also see                                          |
  +--------------+--------------+--------------+--------------+-------------+
  | Scalar       | GetMem       | UpdateMem    | List BUFFS   | FreeMem (1) |
  | memory       +--------------+--------------+--------------+-------------+
  | (hmembuf)    |                                                          |
  |              |                                                          |
  |              |        SQLBindParameter:    Bind to a parameter marker   |
  |              |                                                          |
  |              |        SQLSetParam:         (Also) bind to a parameter ma|ker
  |              |                                                          |
  |              |        SQLBindCol:          Bind to a column of a result |et
  |              |                                                          |
  |              |        ChangeParam:         Set SQL_DATA_AT_EXEC on and o|f
  +--------------+--------------+--------------+--------------+-------------+
  | Array memory | GetMemArray  | UpdateElem   | List         | FreeMemArray|
  | (memarray_id)|              |              | MEMARRAY     | (1)         |
  |              +--------------+--------------+--------------+-------------+
  |              |                                                          |
  |              |                                                          |
  |              |        SQLBindParameter:    Bind to a parameter marker   |
  |              |                                                          |
  |              |        SQLBindCol:          Bind to a column of a result |et
  |              |                                                          |
  |              |        ChangeMemArray:      Set SQL_DATA_AT_EXEC on and o|f
  +--------------+--------------+--------------+--------------+-------------+
  | Matrix       | GetMemMatrix | -            | List         | FreeMemMatri|
  | memory       |              |              | MEMMATRIX    | (1)         |
  | (memmatrix_id+--------------+--------------+--------------+-------------+
  |              |                                                          |
  |              |                                                          |
  |              |        SQLExtendedBindCol:  Bind to a statement          |
  +--------------+--------------+--------------+--------------+-------------+
  | Matrix       | FormatMatrix | -            | DisplayFormat| UnformatMatr|x
  | column       +--------------+--------------+--------------+-------------+
  | format       |                                                          |
  | (matrixformat|id)                                                       |
  |              |        GetMemMatrix:        Assign format to a matrix    |
  |              |                                                          |
  |              |        SetStmtOption:       Assign format as part of the |peration that indicates
  |              |                             that the statement is to be u|ed for row-wise binding.
  +--------------+--------------+--------------+--------------+-------------+
  | LOB File     | GetFileRef   | UpdateFileRef| List         | FreeFileRef |
  | Reference    |              |              | FILEREFS     | (1)         |
  | (hfileref)   +--------------+--------------+--------------+-------------+
  |              |                                                          |
  |              |                                                          |
  |              |        SQLBindFileToParam:  Bind to a parameter marker   |
  |              |                                                          |
  |              |        SQLBindFileToCol:    Bind to a column of a result |et
  +--------------+----------------------------------------------------------+
 
 
 
 
 
 
 
---------------
 
(1) All the identified types of memory buffers for a statement are also freed by a SQLFreeStmt command that specifies the SQL_DROP stmt_option.
 
 
 -- 8 --  of 202
  1.6  Command Coding Conventions
 
  o   If a # is the first non-blank character on a line, then that line is
      considered to be a comment and the contents of the line are ignored.
 
  o   Command names and keywords appear either all in upper case or in a
      mixture of upper and lower case in the syntax diagrams for the
      commands.  Note that this is a departure from the normal IBM "railway
      track" conventions where keywords appear entirely in upper case.  The
      reason for this departure from the IBM norm, is intended to emphasize
      that the CLI command names, when coded in a C program must be keyed in
      mixed case exactly as shown.
 
      On the other hand, in Interactive CLI, command names and keywords can
      be coded in upper case, in lower case, or in a mixture of the two.  For
      example, in
 
           >>--SQLAllocConnect---henv---------------><
                                       +-myhdbc-+
 
      the command name may be coded in many ways, including:
 
             SQLALLOCCONNECT   sqlallocconnect   SQLAllocConnect  sqlALLOCconnect
 
  o   If just the command name of a command that requires additional
      parameters is keyed, Interactive SQL responds with a message showing a
      "prompt" with the entire command syntax.
 
 
  o   Parameters that appear entirely in lower case in the syntax diagrams
      represent variable values.  When coding commands the values of these
      arguments are coded as numbers or strings, as appropriate.  For
      example, henv in the above diagram represents the number that
      identifies the environment handle, so the command could be coded as:
 
             SQLAllocConnect  3
 
  o   Parameters that appear below an empty main line are optional.  For
      example, myhdbc in the above diagram represents the number that will
      identify the connection handle that is about to be allocated.  If no
      value is coded, Interactive CLI will provide a default.
 
 
  o   Multiple parameters shown in a "stack" denote alternatives.  For
      example, in:
 
              >>--SQLTransact---henv---hdbc----SQL_COMMIT------><
                                             |              |
                                             +-SQL_ROLLBACK-+
 
      either SQL_COMMIT or SQL_ROLLBACK can be coded.
 
 
  o   A value that appears as an alternative above an optional parameter
      denotes a default at will be used if no parameter is coded.  For
      example, in:
 
                                               +-1024----------+
           >>--SQLError---henv---hdbc---hstmt--+---------------+--><
                                               +-msg_maxlength-+
 
      if the command is coded without a maximum message length, the default
      of 512 is used.
 
 
 -- 9 --  of 202
 
 
  o   Elements of syntax that are supported only for internal purposes appear
      with a line through them.  A example is the element 'testmask' below.
 
        >>--SQLBindFileToCol---hstmt---column---hfileref---------------------------------------------------------><
                                                           +-/testmask/-+
 
  o   A character string value coded as an argument does not have to be
      enclosed in delimiters unless it contains one or more space characters.
      With the exception of of the pattern and name arguments for the catalog
      commands, such character strings are folded to upper case.  See the
      section entitled "Input Arguments on Catalog Functions" starting on
      page 44 of the V2.1 DB2 CLI Guide and Reference for information about
      the catalog command/function arguments.  A string value may, of course,
      be enclosed in delimiters whether or not it contains a space but, in
      this case, values are not folded to upper case.  The default delimiter
      character is a double quote; this may be changed by means of the Option
      Delimit command.  Interactive CLI always strips off the delimiter
      characters before passing the string to the CLI implementation. See the
      DELIMIT option with the OPTION command (page 116) for more information.
 
 
  o   Many string parameters are accompanied by a length parameter (which
      always have a name of the form xxx_length).  It is possible to either
      count the length of the argument and code that value or to specify
      SQL_NTS and let Interactive CLI do the counting.
 
      For example, the following commands are equivalent:
 
                SQLExecDirect 5 "alter table TBLZ add COLA int" 29
 
                SQLExecDirect 5 "alter table TBLZ add COLA int" SQL_NTS
 
  o   CODING SHORTCUTS:
 
      -   It is possible to code only enough a keyword to make it unique.
          For example:
 
                    SQLNUMP 15
 
          will be interpreted as the SQLNumResults function operating on
          statement number 15.
 
          This facility should be used with care because, as new commands are
          added and options expanded in the future, the values that one gets
          used to using as shorthand may no longer be unique.
 
          Certain keywords supported by some commands correspond to values
          that are defined in the .h header files for IBM CLI function call
          interface.  The #defines in the .h files define an integer value
          for each of these keyword values.  People who are familiar with
          these integer values may use them as shorthand (if they are not
          overly concerned about other people trying to read their commands
          in the future).
 
          For example: -3 is the value for SQL_NTS in the .h files.  Thus the
          following commands are equivalent:
 
                    SQLExecDirect 5 "alter table TBLZ add COLA int" SQL_NTS
 
                    SQLExecDirect 5 "alter table TBLZ add COLA int" -3
 
 
 
 -- 10 --  of 202
 
 
 
 
  1.7  Use of Files
 
  First of all, Interactive CLI, just like "regular CLI" supports files used
  by the LOB File Reference facility.  These are supported via the commands
  summarized on page 11.
 
  Also, Interactive CLI supports files for many additional purposes not
  applicable to regular CLI.
 
      Input:
 
      o   as the source of a statement string in an SQLPrepare or
          SQLExecDirect command,
 
      o   as the source of a value in the UpdateMem command,
 
      o   as the source of a command script in the Read and ReadNLog
          commands.
 
      Several of the commands support a file_name parameter.  This parameter
      may be used to specify the name of a file that is to be used either for
      input or for output, as appropriate.  The file_name should either be a
      complete name with path or the name of a file in the current directory.
 
      When an input file is either a data value or a statement string, then,
      if the file contains more than one line, Interactive CLI removes the
      end-of-line characters and concatenates the values in the lines.
 
      When the input file is a command script, then each command occupies a
      single line.  In this version there is no provision for splitting a
      long command over several lines (see 1.12, "List of Potential Future
      Enhancements" on page 202).
 
 
 
      Output:
 
      o   as the spot that the data will be placed (instead of displaying it)
          as a result of executing a SQLGetData command,
 
      o   as the place to which results will be written as specified in the
          Option LOG command (note that if ECHO is ON the commands are also
          written to the file),
 
      o   as the place to which a command script will be written as specified
          in the Option SCRIPT command,
 
      o   as the place to which error messages will be written as specified
          in the Option STDERR command.
 
      When writing to a non-empty output file, the material is appended as
      one or more new lines.
 
      If the named output file does not exist, a file by that name is
      created.
 
      A # line is written into the output SCRIPT file after every command.
 
 
 
 
 -- 11 --  of 202
  1.8  Commands:
 
  This section contains all the IBM Interactive CLI commands, both the CLI
  commands and the support commands.  They are listed in alphabetic order
  (excepting that the letters SQL that appear in front of the CLI commands
  are ignored when determining this sequence).
 
 
 
 
 
  1.8.1  SQLAllocConnect
 
  Allocate memory for a connection.
 
  Syntax:
 
    >>--SQLAllocConnect---henv-------------------------------------------------------------------------------><
                                +-myhdbc-+
 
  Parameters:
 
    henv
       The integer that identifies the current environment handle.
 
    myhdbc
       An integer to which the connection handle is to be allocated.  If not
       specified, Interactive CLI assigns an integer itself (and displays
       it).
 
  Successful Result:
 
      The connection handle is allocated and the integer for the handle
      that identifies that connection is displayed.  Also, Interactive CLI
      displays a return code of 0 indicating that the command was successful.
 
  Example:
 
      Given that the value of henv is 3, then the command:
 
        >sqlallocconnect 3 2
 
      could result in the response:
 
        SQLAllocConnect: rc = 0 (SQL_SUCCESS)
                     CLI hdbc = 1, Test Driver hdbc = 2
 
      Note that it is the "Test Driver" value that should be used to
      identify the connection on subsequent calls.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 12 --  of 202
  1.8.2  SQLAllocEnv
 
  Allocate memory for an environment.
 
  Syntax:
 
    >>--SQLAllocEnv------------------------------------------------------------------------------------------><
                     +-myhenv-+
 
  Parameters:
 
    myhdbc
       An integer to which the environment handle is to be allocated.  If not
       specified, Interactive CLI assigns an integer itself (and displays
       it).
 
  Successful Result:
 
      The environment handle is allocated and the integer for the handle that
      identifies that environment is displayed.  Also, Interactive CLI
      displays a return code of 0 indicating that the command was successful.
 
  Example:
 
      The command:
 
        >sqlallocenv
 
      could result in the response:
 
        SQLAllocEnv: rc = 0 (SQL_SUCCESS)
                     CLI henv = 1, Test Driver henv = 1
 
      Note that it is the "Test Driver" value that should be used to
      identify the environment on subsequent calls.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 13 --  of 202
  1.8.3  SQLAllocStmt
 
  Allocate memory for a statement.
 
  Syntax:
 
    >>--SQLAllocStmt---hdbc----------------------------------------------------------------------------------><
                             +-myhstmt-+
 
  Parameters:
 
    hdbc
       The integer that identifies the connection handle of the connection to
       which the statement is being assigned.
 
    myhstmt
       An integer to which the statement handle is to be allocated.  If not
       specified, Interactive CLI assigns an integer itself (and display it).
 
  Successful Result:
 
      The statement handle is allocated and the integer for the handle that
      identifies that statement is displayed.  Also, Interactive CLI displays
      a return code of 0 indicating that the command was successful.
 
  Example:
 
      Given that the value of hdbc is 1, then the command:
 
        >sqlallocstmt 1
 
      could result in the response:
 
        SQLAllocStmt: rc = 0 (SQL_SUCCESS)
                      CLI hstmt = 15, Test Driver hstmt = 13
 
      Note that it is the "Test Driver" value that should be used to
      identify the statement on subsequent calls.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 14 --  of 202
  1.8.4  SQLBindCol
 
  Assign the data type and the memory (either a scalar or an array) buffer
  for a column in a result set before fetching rows of that result set.
 
  or
 
  Unbind a previously bound column (whether it was bound with this command or
  with the SQLBindFileToCol command).
 
  Syntax:
 
    >>--SQLBindCol---hstmt---column----SQL_C_CHAR-----------------hmembuf------------------------------------><
                                     |-SQL_C_DBCHAR---------|   |-MEMARRAY---memarray_id-|
                                     |-SQL_C_SHORT----------|   +-SQL_UNBIND-------------+
                                     |-SQL_C_USHORT---------|
                                     |-SQL_C_SSHORT---------|             memory
                                     |-SQL_C_LONG-----------|
                                     |-SQL_C_ULONG----------|
                                     |-SQL_C_SLONG----------|
                                     |-SQL_C_DOUBLE---------|
                                     |-SQL_C_FLOAT----------|
                                     |-SQL_C_DATE-----------|
                                     |-SQL_C_TIME-----------|
                                     |-SQL_C_TIMESTAMP------|
                                     |-SQL_C_BINARY---------|
                                     |-SQL_C_BIT------------|
                                     |-SQL_C_TINYINT--------|
                                     |-SQL_C_UTINYINT-------|
                                     |-SQL_C_STINYINT-------|
                                     |-SQL_C_BLOB_LOCATOR---|
                                     |-SQL_C_CLOB_LOCATOR---|
                                     |-SQL_C_DBCLOB_LOCATOR-|
                                     |                      |
                                     +-SQL_C_DEFAULT--------+
 
                                              c_type
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle of the statement for
       which the column is to be bound.
 
    column
       Column number within the result set, ordered sequentially left to
       right, starting at 1.
 
    c_type
       The C data type of the result data.  It must be one of the values
       listed in the syntax diagram.
 
    memory
       One of:
 
         hmembuf
            The integer that identifies the scalar memory buffer which is to
            be bound to the column.
 
         MEMARRAY memarray_id
            The integer that identifies the memory array buffer which is to
            be bound to the column.
 
 
 
 -- 15 --  of 202
         SQL_UNBIND
            Indicates that the column is to be unbound
 
  Successful Result:
 
      The column is bound to the memory buffer or is unbound (as
      appropriate).  Interactive CLI displays a return code of either 0
      indicating success or 1 indicating success with a warning.
 
  Example 1:
 
      Given that - there is a statement handle 80 in the "executed" state with the statement:
                       select count(*) from PUB_CRAWL_LOG where TOWN='Pivabiska'
      then a typical sequence of commands and responses would be:
 
        # bind memory buffer to the result set
        >getmem 80 801 sql_c_short
        Memory buffer 801 for statement handle 80 allocated
        >sqlbindcol 80 1  sql_c_char  801
        SQLBindCol: rc = 0 (SQL_SUCCESS)
        #
        # fetch a row
        >sqlfetch 80
        SQLFetch: rc = 0 (SQL_SUCCESS)
        #
        # list the contents of the memory buffer
        >list buffs 80
        Buffs: mHandle hstmt  bufSize  usedSize   Mask       CType
                 {801}     80        2         2      0       SQL_C_SHORT
        Contents: 2
        #
        # unbind the memory buffer
        sqlbindcol 80 1  sql_c_char  sql_unbind
        SQLBindCol: rc = 0 (SQL_SUCCESS)
 
  Example 2:
 
      See the example with the SQLPrepare command on page 124.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 16 --  of 202
  1.8.5  SQLBindFileToCol
 
  Bind a LOB file reference buffer to a LOB column in a result set before
  fetching rows of that result set.
 
 
  Note:   The SQLBindCol command may be used to unbind columns that are bound
          to a file reference buffer.
 
  Syntax:
 
    >>--SQLBindFileToCol---hstmt---column---hfileref---------------------------------------------------------><
                                                       +-/testmask/-+
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle of the statement for
       which the column is to be bound.
 
    column
       Column number within the result set, ordered sequentially left to
       right, starting at 1.
 
    hfileref
       The integer that identifies the file reference buffer that is to be
       bound to this parameter.
 
  Successful Result:
 
      The column is bound to the file reference variable.  Interactive CLI
      displays a return code of either 0 indicating success or 1 indicating
      success with a warning.
 
  Example:
 
      See Example 2 with the SQLExtendedFetch command on page 56.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 17 --  of 202
  1.8.6  SQLBindFileToParam
 
  Assign both an SQL LOB data type and a LOB file reference buffer to a
  parameter marker in a statement before before executing that statement.
 
  Syntax:
 
    >>--SQLBindFileToParam---hstmt---param-----SQL_BLOB-------hfileref---------------------------------------><
                                             |-SQL_CLOB---|              +-/testmask/-+
                                             +-SQL_DBCLOB-+
 
                                              sql_lob_type
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle of the statement for
       which the parameter is to be bound.
 
    param
       Parameter number within the prepared statement, ordered sequentially
       left to right, starting at 1.
 
    sql_lob_type
       The SQL data type of the data in the file.
 
    hfileref
       The integer that identifies the file reference buffer that is to be
       bound to this parameter.
 
  Successful Result:
 
      The parameter marker is bound to the file reference variable.  Also,
      Interactive CLI displays a return code of either 0 (SQL_SUCCESS) or 1
      (SUCCESS_WITH_INFO).
 
  Example:
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 18 --  of 202
  1.8.7  SQLBindParameter
 
  Assign:
 
  o   a memory buffer (either a scalar or an array) with a C data type
 
  as well as
 
  o   an SQL data type
 
  to a parameter marker in a statement before executing that statement.
 
 
  Note:   If the basic data type of the memory buffer is different than the
          SQL data type, then the data will be converted before it is passed
          to the server.  For example, a value in an SQL_C_CHAR buffer might
          be converted to SQL_DECIMAL.
 
          The SQLBindParameter command can be used to do everything that
          SQLSetParam can do and, in addition, SQLBindParameter can be used
          to set parameters before executing a CALL statement and to bind a
          memory array to a parameter.
 
  Syntax:
 
    >>--SQLBindParameter---hstmt---param-----SQL_PARAM_INPUT------------------------------------------------->
                                           |-SQL_PARAM_INPT_OUTPUT-|
                                           +-SQL_PARAM_OUTPUT------+
 
                                                  param_type
 
 
                   >----SQL_C_CHAR-----------------SQL_CHAR-------------------------------------------------->
                      |-SQL_C_DBCHAR---------|   |-SQL_VARCHAR--------|
                      |-SQL_C_SHORT----------|   |-SQL_LONGVARCHAR----|
                      |-SQL_C_USHORT---------|   |-SQL_GRAPHIC--------|
                      |-SQL_C_SSHORT---------|   |-SQL_VARGRAPHIC-----|
                      |-SQL_C_LONG-----------|   |-SQL_LONGVARGRAPHIC-|
                      |-SQL_C_ULONG----------|   |-SQL_SMALLINT-------|
                      |-SQL_C_SLONG----------|   |-SQL_INTEGER--------|
                      |-SQL_C_DOUBLE---------|   |-SQL_DECIMAL--------|
                      |-SQL_C_FLOAT----------|   |-SQL_NUMERIC--------|
                      |-SQL_C_DATE-----------|   |-SQL_DOUBLE---------|
                      |-SQL_C_TIME-----------|   |-SQL_FLOAT----------|
                      |-SQL_C_TIMESTAMP------|   |-SQL_REAL-----------|
                      |-SQL_C_BINARY---------|   |-SQL_DATE-----------|
                      |-SQL_C_BIT------------|   |-SQL_TIME-----------|
                      |-SQL_C_TINYINT--------|   |-SQL_TIMESTAMP------|
                      |-SQL_C_UTINYINT-------|   |-SQL_BINARY---------|
                      |-SQL_C_STINYINT-------|   |-SQL_VARBINARY------|
                      |-SQL_C_BLOB_LOCATOR---|   |-SQL_LONGVARBINARY--|
                      |-SQL_C_CLOB_LOCATOR---|   |-SQL_BLOB-----------|
                      +-SQL_C_DBCLOB_LOCATOR-+   |-SQL_CLOB-----------|
                                                 +-SQL_DBCLOB---------+
                             c_type
                                                        sql_type
 
 
                                                                           +-ADDRESS--+
                   >--param_length_precision---param_scale-----hmembuf-----+----------+----------------------><
                                                             |             +-HANDLE---+ |
                                                             |                          |
                                                             +-memarray_id---MEMARRAY---+
 
 
 -- 19 --  of 202
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle of the statement for
       which the parameter is to be bound.
 
    param
       Parameter number within the prepared statement, ordered sequentially
       left to right, starting at 1.
 
    param_type
       One of:
 
         SQL_PARAM_INPUT
            Should always be specified when the statement is other than a
            CALL statement.
 
            For a CALL statement, this indicates the parameter is an input
            parameter.
 
         SQL_PARAM_INPUT_OUTPUT
            For a CALL statement, this indicates the parameter is an
            input/output parameter.
 
            Should never be specifified for a non-CALL statement.
 
         SQL_PARAM_OUTPUT
            For a CALL statement, this indicates the parameter is an
            parameter.
 
            Should never be specified for a non-CALL statement.
 
    c_type
       The C data type of the memory buffer.  It must be one of the values
       listed in the syntax diagram.
 
    sql_type
       The SQL data type of the data within the memory buffer.  It must be
       one of the values listed in the syntax diagram.
 
    param_length_precision
       See page 135 of the V2.1 DB2 CLI Guide and Reference. The parameter is
       called cbParamDef there.
 
    param_scale
       See page 136 of the V2.1 DB2 CLI Guide and Reference. The parameter is
       called ibScale there.
 
    hmembuf
       The integer that identifies the handle of the memory buffer which is
       to be bound to the parameter.
 
         ADDRESS | HANDLE One of:
 
         ADDRESS
            The address of the scalar memory buffer is returned.
 
         HANDLE
            The integer that identifies a specific scalar memory buffer is
            returned.
 
 
 
 
 -- 20 --  of 202
    hmembuf MEMARRAY
       This indicates the value that is retrieved by SQLParamData when this
       parameter is identified when using the SQL_DATA_AT_EXEC facility.  The
       address of the memory array buffer is returned.  Note that there is no
       mechanism for returning the memory array's identifying integer.
 
  Successful Result:
 
      The parameter marker is bound to the memory buffer.  Interactive CLI
      displays a return code of either 0 indicating success or 1 indicating
      success with a warning.
 
  Example:
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 21 --  of 202
  1.8.8  SQLCancel
 
  SQLCancel may be used to:
 
  o   Close an open cursor between Fetch commands.
 
  o   Stop an SQLParamData/SQLPutData cycle.
 
 
  Syntax:
 
    >>--SQLCancel---hstmt------------------------------------------------------------------------------------><
 
  Parameters:
 
    hstmt
       An integer that identifies a statement handle.
 
  Successful Result:
 
      CLI displays a return code of 0 indicating success.  Note that this is
      returned to acknowledge that the Cancel command has been processed,
      whether or not the SQLCancel command has an effect.
 
  Example:
 
      Given that the existence of a statement handle identified by 44, the command:
 
        >sqlcancel 4
 
      would result in the response:
 
        SQLCancel: rc= 0 (SQL_SUCCESS)
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 22 --  of 202
  1.8.9  ChangeMemArray
 
  Indicate that a memory array is going to be used to provide data for
  parameters at statement execution time (or that they are not).
 
 
  Note:   This is one of a set of commands that is used to assign large
          character strings to parameters iteratively in small chunks.  See
          the note with SQLPutData on page 132 for details.
 
  Syntax:
 
    >>--ChangeMemArray---memarray_id----SQL_DATA_AT_EXEC-----------------------------------------------------><
                                      +-SQL_NTS----------+   | +--------+ |
                                                             | V        | |
                                                             +---elem_m---+
 
  Parameters:
 
    memarray_id
       The integer that identifies the memory array buffer that is being set.
 
    SQL_DATA_AT_EXEC
       The memory array buffer is to be used for to supply values via
       SQLPutData for data at execution time.
 
    SQL_NTS
       The memory array buffer is no longer going to be used for to supply
       values via SQLPutData for data at execution time.
 
    elem_m
       The position (zero based) of an element within the array which is
       being set.
 
       If no elem_m values are specified, all elements within the array are
       set.
 
  Successful Result:
 
      The memory array elements (or specified elements within that array) are
      set to indicate DATA_AT_EXEC, or not (with acknowledgement).
 
  Example:
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 23 --  of 202
  1.8.10  ChangeParam
 
  Indicate that a scalar memory buffer is going to be used by the SQLPutData
  command to provide data for parameters at statement execution time
 
  or
 
  Indicate that the memory buffer is no longer to be used for this purpose
 
 
  Notes:  This is one of a set of commands that is used to assign large
          character strings to parameters iteratively in small chunks.  See
          the note with SQLPutData on page 132 for details.
 
          The default is that a new scalar memory buffer is not to be for
          data at execution time.
 
  Syntax:
 
    >>--ChangeParam---hmembuf-----SQL_DATA_AT_EXEC------------------------------------------------------------><
                                +-SQL_NTS----------+
 
  Parameters:
 
    hmembuf
       The integer that identifies the scalar memory buffer that is being
       set.
 
    SQL_DATA_AT_EXEC
       The scalar memory buffer is to be used for to supply values via
       SQLPutData for data at execution time.
 
    SQL_NTS
       The scalar memory buffer is no longer going to be used for to supply
       values via SQLPutData for data at execution time.
 
  Successful Result:
 
      The scalar memory buffer is set to indicate DATA_AT_EXEC, or not (with
      acknowledgement).
 
  Example:
 
      See the example with the SQLPutData command on page 133.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 24 --  of 202
  1.8.11  Check
 
  Request that Interactive CLI flag subsequent commands if they do not return
  a specified function return code and/or SQLSTATE.  and/or SQLCODE.
 
  or
 
  Turn off this flagging.
 
 
  Note:   The main purpose of this is when creating test scripts whose
          results are to be written to a log.  Then log can then be browsed
          quickly to see whether or not the test ran as planned.
 
  Syntax:
 
    >>--Check----FUNC_RC----SQL_SUCCESS----------------------------------------------------------------------><
               |          |-SQL_SUCCESS_WITH_INFO-| |
               |          |-SQL_NO_DATA_FOUND-----| |
               |          |-SQL_ERROR-------------| |
               |          |-SQL_INVALID_HANDLE----| |
               |          +-SQL_NEED_DATA---------+ |
               |                                    |
               |-SQLSTATE---value-------------------|
               |                                    |
               |-NATIVE_ERROR---native_error_value--|
               |                                    |
               +-RESET----FUNC_RC-------------------+
                        |              |
                        |-SQLSTATE-----|
                        |              |
                        +-NATIVE_ERROR-+
 
  Parameters:
 
    FUNC_RC
       The expected value of the CLI Return Code.  It must be one of the
       values shown in the syntax diagram.
 
    SQLSTATE
       The expected value of the SQLSTATE.  Refer to one or more of
 
       o   the DB2 CLI Guide and Reference
       o   the Microsoft ODBC Programmer's Guide
       o   the Messages and Codes manual of the DBMS(s) to which the hdbc is
           connected.
 
       to determine the SQLSTATE that should have been returned for any given
       situation
 
    NATIVE_ERROR
       The expected value of the native SQLCODE.  Refer to the Messages and
       Codes manual of the DBMS(s) to which the hdbc is connected.
 
    RESET
       This turns off checking of one of function return code, SQLSTATE, or
       native error code for subsequent commands.
 
  Successful Result:
 
      If the value is as expected, nothing is displayed (i.e there is no
      feedback
 
 
 
 -- 25 --  of 202
      If the value is other than expected, a line of the form:
 
           ***** Unexpected --------, Expecting
 
      is displayed.
 
      Nothing is displayed when checking is tunrned off via RESET.  Also,
      Interactive CLI displays a return code of either 0 (SQL_SUCCESS) or 1
      (SUCCESS_WITH_INFO).
 
  Example:
 
      Given that - there is a connection identified by 2 to the PUB database
                 - the user on that connection is CLITEST1
                 - there is allocated statement, 10, on connection 2
                 - the CALLERROR option is ON causing SQLError to be
                   automatically called when the result of a CLI command
                   is either ERROR or SUCCESS WITH INFO.
      then a possible sequence of commands and responses would be:
 
        # Set up checks for return code and for SQLSTATE
        #
        >check func_rc sql_success
        >check sqlstate 00000
        #
        # Execute a select against a table that does not exist
        #
        >sqlexecdirect 10 "select count(*) from MISSING_TABLE" sql_nts
        SQLExecDirect: rc = -1 (SQL_ERROR)
        ***** Unexpected Function Return Value, Expecting: rc = 0 (SQL_SUCCESS)
        SQLError: rc = 0 (SQL_SUCCESS)
        SQLError: SQLState     : S0002
        ***** Unexpected SQLSTATE, Expecting: 00000
                  fNativeError : -204
                  szErrorMsg   : {IBM}{CLI Driver}{DB2/6000} SQL0204N  "CLITEST1.MISSING_TABLE"
                                                                                  is an undefined name.
                  SQLSTATE=42704
 
                  cbErrorMsg   : 101
        SQLError: rc = 100 (SQL_NO_DATA_FOUND)
        #
        # Observe the SQLError will not return the error info since it has already been displayed
        # with the automatic invocation of SQLError due to the error raised by the SQLExecDirect command.
        #
        >sqlerror 0 0 10
        SQLError: rc = 100 (SQL_NO_DATA_FOUND)
        SQLError: SQLState     : 00000
        #
        # Now get the SQLCA
        #
        >sqlgetsqlca 0 0 10
        SQLGetSQLCA: rc = 0 (SQL_SUCCESS)
        SQLGetSQLCA: sqlca contents:
                  sqlcaid: "SQLCA   "
                  sqlcabc:  136
                  sqlcode:  -204
                  sqlerrml: 22
                  sqlerrmc:
 
        434C4954  45535431  2E4D4953  53494E47  |CLITEST1.MISSING|
        5F544142  4C45                          |_TABLE          |
 
                  sqlerrp:  SQLNQ1FB
 
 
 -- 26 --  of 202
                  sqlerrd: {0} -30850  {1} 0  {2} 0  {3} 0  {4} 0  {5} 10
                  sqlwarn: {0}    {1}    {2}    {3}    {4}    {5}
                  sqlwarn: {6}    {7}    {8}    {9}    {10}
                  sqlstate: "42704"
        #
        pause
        #
        >check reset func_rc
        >check reset sqlstate
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 27 --  of 202
  1.8.12  SQLColAttributes
 
  Return a single item of information from the descriptor of a specific
  column in a result set.
 
  or
 
  Return a count of the number of columns in a result set.
 
 
  Notes:  SQLDescribeCol may be used to obtain all the common descriptor
          information for a specific column in one call.
 
          SQLNumResultCols may also be used to obtain a count of the number
          of columns in a result set.
 
  Syntax:
 
                                                                          +-50-------------+
    >>--SQLColAttributes---hstmt---column----SQL_COLUMN_AUTO_INCREMENT----+----------------+-----------------><
                                           |-SQL_COLUMN_CASE_SENSITIVE-|  +-desc_maxlength-+
                                           |-SQL_COLUMN_CATALOG_NAME---|
                                           |-SQL_COLUMN_COUNT----------|
                                           |-SQL_COLUMN_DISPLAY_SIZE---|
                                           |-SQL_COLUMN_DISTINCT_TYPE--|
                                           |-SQL_COLUMN_LABEL----------|
                                           |-SQL_COLUMN_LENGTH---------|
                                           |-SQL_COLUMN_MONEY----------|
                                           |-SQL_COLUMN_NAME-----------|
                                           |-SQL_COLUMN_NULLABLE-------|
                                           |-SQL_COLUMN_PRECISON-------|
                                           |-SQL_COLUMN_SCALE----------|
                                           |-SQL_COLUMN_SCHEMA_NAME----|
                                           |-SQL_COLUMN_SEARCHABLE-----|
                                           |-SQL_COLUMN_TYPE-----------|
                                           |-SQL_COLUMN_TYPE_NAME------|
                                           |-SQL_COLUMN_UNSIGNED-------|
                                           +-SQL_COLUMN_UPDATABLE------+
 
                                                 field_identifier
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle to which the result
       set is linked.
 
    column
       Column number within the result set, ordered sequentially left to
       right, starting at 1.
 
    field_identifier
       See Table 29 on page 148 of the V2.1 DB2 CLI Guide and Reference The
       parameter is called fDescType in that book.
 
    desc_maxlength
       An integer indicating how many characters of information are to be
       displayed.
 
  Successful Result:
 
      The requested information is displayed.  Also, Interactive CLI displays
      a return code of either 0 (SQL_SUCCESS) or 1 (SUCCESS_WITH_INFO).
 
 
 -- 28 --  of 202
 
  Example:
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 29 --  of 202
  1.8.13  SQLColumnPrivileges
 
  Return a result set that contains a list of columns and associated
  privileges for a specific table.  The columns may be filtered by specifying
  a pattern name.
 
 
  Note:   The effect of this command is the same as an SQLExecDirect command
          with the appropriate select-statement against the catalog.  Thus,
          the SQLColumnPrivileges command may be followed commands such as
          SQLFetch to display the result set.
 
  Syntax:
 
    >>--SQLColumnPrivileges---hstmt-------------------------------------------------------------------------->
 
                  >-- -1--------------------0---------------------------------------------------------------->
 
                  >---table_schema----------table_schema_length---------------------------------------------->
 
                  >---table_name------------table_name_length------------------------------------------------><
 
                  >---column_name_pattern---column_name_pattern_length---------------------------------------><
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle that is to be used
       for the result set returned by the command.
 
    -1
       This is the table_catalog argument which must always be a nul value in
       this release.
 
    0
 
    table_schema
       The table's schema name (case sensitive).
 
       The SET SCHEMA variation of the Option command (see page 118) can be
       used to set a default schema name.  In cases where such a default has
       been set, -1 is specified here to opt for that default.
 
    table_schema_length
       Either the length of the schema name or SQL_NTS.
 
    table_name
       The table's name (case sensetive).
 
    table_name_length
       Either the length of the table name or SQL_NTS.
 
    column_name_pattern
       Either a (case sensitive) pattern (as per the LIKE predicate) used to
       select columns or -1 used to indicate that all columns are to be
       selected.
 
    column_name_pattern_length
       Either the length of the column name pattern or SQL_NTS.
 
 
 
 
 
 
 -- 30 --  of 202
  Successful Result:
 
      A result set is returned and a cursor is opened on the statement
      handle.  The data in the result set is made available for retrieval via
      the SQLFetch command.  Also, Interactive CLI displays a return code of
      either 0 (SQL_SUCCESS) or 1 (SUCCESS_WITH_INFO).  If no rows are found
      that match the search criteria, an empty result set is returned and the
      return code from SQLFetch will be SQL_NO_DATA_FOUND.
 
  Example:
 
      Given that - there is a connection identified by 2 the the PUB database
                 - the user on that connection is CLITEST1
                 - there is allocated statement, 12, on connection 2
      then a possible sequence of commands and responses would be:
 
        # List the privileges on the columns in the PUB_SIGN_PHOTOS table whose names include PHOTO
        #
        >sqlcolumnprivileges  12   -1 0   CLITEST1 sql_nts   PUB_SIGN_PHOTS sql_nts   %PHOTO% sql_nts
        SQLColumnPrivilegess: rc = 0 (SQL_SUCCESS)
        #
        # Fetch the rows, then close the cursor
        #
        >fetchall 12
        FetchAll:  Columns: 8
          TABLE_CAT TABLE_SCHEM TABLE_NAME COLUMN_NAME GRANTOR GRANTEE PRIVILEGE IS_GRANTABLE
          -, CLITEST1, PUB_SIGN_PHOTOS, PHOTO_DESCRIPTION, SYSIBM, CLITEST1, ALTER, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, PHOTO_DESCRIPTION, SYSIBM, CLITEST1, CONTROL, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, PHOTO_DESCRIPTION, SYSIBM, CLITEST1, DELETE, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, PHOTO_DESCRIPTION, SYSIBM, CLITEST1, INDEX, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, PHOTO_DESCRIPTION, SYSIBM, CLITEST1, INSERT, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, PHOTO_DESCRIPTION, SYSIBM, CLITEST1, REFERENCES, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, PHOTO_DESCRIPTION, SYSIBM, CLITEST1, SELECT, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, PHOTO_DESCRIPTION, SYSIBM, CLITEST1, UPDATE, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, PHOTO_DESCRIPTION, CLITEST1, PUBLIC, SELECT, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, PHOTO_DESCRIPTION, CLITEST1, PELLOW, ALTER, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, PHOTO_DESCRIPTION, CLITEST1, PELLOW, DELETE, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, PHOTO_DESCRIPTION, CLITEST1, PELLOW, INDEX, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, PHOTO_DESCRIPTION, CLITEST1, PELLOW, INSERT, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, PHOTO_DESCRIPTION, CLITEST1, PELLOW, REFERENCES, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, PHOTO_DESCRIPTION, CLITEST1, PELLOW, SELECT, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, PHOTO_DESCRIPTION, CLITEST1, PELLOW, UPDATE, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, PHOTO_DESCRIPTION, CLITEST1, MLI, INSERT, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, PHOTO_DESCRIPTION, CLITEST1, MLI, UPDATE, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, SIGN_PHOTO, SYSIBM, CLITEST1, ALTER, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, SIGN_PHOTO, SYSIBM, CLITEST1, CONTROL, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, SIGN_PHOTO, SYSIBM, CLITEST1, DELETE, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, SIGN_PHOTO, SYSIBM, CLITEST1, INDEX, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, SIGN_PHOTO, SYSIBM, CLITEST1, INSERT, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, SIGN_PHOTO, SYSIBM, CLITEST1, REFERENCES, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, SIGN_PHOTO, SYSIBM, CLITEST1, SELECT, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, SIGN_PHOTO, SYSIBM, CLITEST1, UPDATE, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, SIGN_PHOTO, CLITEST1, PUBLIC, SELECT, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, SIGN_PHOTO, CLITEST1, PELLOW, ALTER, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, SIGN_PHOTO, CLITEST1, PELLOW, DELETE, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, SIGN_PHOTO, CLITEST1, PELLOW, INDEX, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, SIGN_PHOTO, CLITEST1, PELLOW, INSERT, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, SIGN_PHOTO, CLITEST1, PELLOW, REFERENCES, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, SIGN_PHOTO, CLITEST1, PELLOW, SELECT, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, SIGN_PHOTO, CLITEST1, PELLOW, UPDATE, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, SIGN_PHOTO, CLITEST1, MLI, INSERT, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, SIGN_PHOTO, CLITEST1, MLI, UPDATE, YES
          FetchAll: 36 rows fetched.
 
 
 -- 31 --  of 202
  1.8.14  SQLColumns
 
  Return a result set that contains information about columns in one or more
  tables.  Both the tables and columns therein may be filtered by specifying
  name patterns.
 
 
  Note:   The effect of this command is the same as an SQLExecDirect command
          with the appropriate select-statement against the catalog.  Thus,
          the SQLColumns command may be followed commands such as SQLFetch to
          display the result set.
 
  Syntax:
 
    >>--SQLColumns---hstmt----------------------------------------------------------------------------------->
 
                  >-- -1---------------------0--------------------------------------------------------------->
 
                  >---table_schema_pattern---table_schema_pattern_length------------------------------------->
 
                  >---table_name_pattern-----table_name_pattern_length--------------------------------------->
 
                  >---column_name_pattern----column_name_pattern_length--------------------------------------><
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle that is to be used
       for the result set returned by the command.
 
    -1
       This is the table_catalog argument which must always be a nul value in
       this release.
 
    0
 
    table_schema_pattern
       Either a (case sensitive) pattern (as per the LIKE predicate) used to
       select schemas or -1 used to indicate that all schemas are to be
       selected.
 
       The SET SCHEMA variation of the Option command (see page 118) can be
       used to set a default schema pattern.  In cases where such a default
       has been set, -1 is specified here to opt for that default.
 
    table_schema_pattern_length
       Either the length of the schema name pattern or SQL_NTS.
 
    table_name_pattern
       Either a (case sensitive) pattern used to select tables or -1 used to
       indicate that all tables are to be selected.
 
    table_name_pattern_length
       Either the length of the table name pattern or SQL_NTS.
 
    column_name_pattern
       Either a (case sensitive) pattern used to select columns or -1 used to
       indicate that all columns are to be selected.
 
    column_name_pattern_length
       Either the length of the column name pattern or SQL_NTS.
 
 
 
 
 -- 32 --  of 202
  Successful Result:
 
      A result set is returned and a cursor is opened on the statement
      handle.  The data in the result set is made available for retrieval via
      the SQLFetch command.  Also, Interactive CLI displays a return code of
      either 0 (SQL_SUCCESS) or 1 (SUCCESS_WITH_INFO).  If no rows are found
      that match the search criteria, an empty result set is returned and the
      return code from SQLFetch will be SQL_NO_DATA_FOUND.
 
  Example:
 
      Given that - there is a connection identified by 2 the the PUB database
                 - the user on that connection is CLITEST1
                 - there is allocated statement, 12, on connection 2
      then a possible sequence of commands and responses would be:
 
        # Obtain columns of the base tables and views that contain PUB in their name
        #
        >sqlcolumns 12   -1 0   -1 0   %PUB% sql_nts
        SQLColumns: rc = 0 (SQL_SUCCESS)
        #
        # Fetch the rows, then close the cursor
        #
        >fetchall 12
        FetchAll:  Columns: 5
          TABLE_CAT TABLE_SCHEM TABLE_NAME COLUMN_NAME DATA_TYPE TYPE_NAME COLUMN_SIZE BUFFER_LENGTH
          DECIMAL_DIGITS NUM_PREC_RADIX NULLABLE REMARKS COLUMN_DEF DATETIME_CODE CHAR_OCTET_LENGTH
          ORDINAL_POSITION IS_NULLABLE
          -, CLITEST1, FRIENQDS_AT_PUB, PUB_NAME, 12, VARCHAR, 50, 50, -, -, 0, -, -, -, 50, 0, NO
          -, CLITEST1, FRIENDS_AT_PUB, VISITED_ON, 9, DATE, 10, 6, -, -, 0, -, -, -, -, 1, NO
          -, CLITEST1, FRIENDS_AT_PUB, FRIEND, 12, VARCHAR, 20, 20, -, -, 0, -, -, -, 20, 2, NO
          -, CLITEST1, FRIENDS_AT_PUB, FRIEND_NUMBER, 5, SMALLINT, 5, 2, -, 10, 0, -, -, -, -, 3, NO
          -, CLITEST1, FRIENDS_AT_PUB, REF, 4, INTeger, 10, 4, -, 10, 0, -, -, -, -, 4, NO
          -, CLITEST1, LIMEY_PUB_CRAWL, PUB_NAME, 12, VARCHAR, 50, 50, -, -, 0, -, -, -, 50, 0, NO
          -, CLITEST1, LIMEY_PUB_CRAWL, TOWN, 12, VARCHAR, 25, 25, -, -, 0, -, -, -, 25, 1, NO
          -, CLITEST1, LIMEY_PUB_CRAWL, POLITICAL_UNIT, 12, VARCHAR, 25, 25, -, -, 1, -, -, -, 25, 2, YES
          -, CLITEST1, LIMEY_PUB_CRAWL, BEER_TRIED, 12, VARCHAR, 30, 30, -, -, 0, -, -, -, 30, 3, NO
          -, CLITEST1, LIMEY_PUB_CRAWL, VISITED_ON, 9, DATE, 10, 6, -, -, 0, -, -, -, -, 4, NO
          -, CLITEST1, PUB_CRAWL_LOG, PUB_NAME, 12, VARCHAR, 50, 50, -, -, 0, -, -, -, 50, 0, NO
          -, CLITEST1, PUB_CRAWL_LOG, TOWN, 12, VARCHAR, 25, 25, -, -, 0, -, -, -, 25, 1, NO
          -, CLITEST1, PUB_CRAWL_LOG, POLITICAL_UNIT, 12, VARCHAR, 25, 25, -, -, 1, -, -, -, 25, 2, YES
          -, CLITEST1, PUB_CRAWL_LOG, COUNTRY, 12, VARCHAR, 25, 25, -, -, 0, -, -, -, 25, 3, NO
          -, CLITEST1, PUB_CRAWL_LOG, VISITED_ON, 9, DATE, 10, 6, -, -, 0, -, -, -, -, 4, NO
          -, CLITEST1, PUB_CRAWL_LOG, BEER_TRIED, 12, VARCHAR, 30, 30, -, -, 0, -, -, -, 30, 5, NO
          -, CLITEST1, PUB_CRAWL_LOG, PRICE, 3, DECimal, 4, 6, 2, 10, 0, -, -, -, -, 6, NO
          -, CLITEST1, PUB_CRAWL_LOG, ALC_CONTENT, 8, FLOAT, 15, 8, -, 10, 1, -, -, -, -, 7, YES
          -, CLITEST1, PUB_CRAWL_LOG, RATING, 1, CHARacter, 1, 1, -, -, 0, -, -, -, 1, 8, NO
          -, CLITEST1, PUB_CRAWL_LOG, PICTURE_TAKEN, 5, SMALLINT, 5, 2, -, 10, 0, -, -, -, -, 9, NO
          -, CLITEST1, PUB_CRAWL_LOG, DESCRIPTION, 12, VARCHAR, 2000, 2000, -, -, 1, -, -, -, 2000, 10, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, PUB_NAME, 12, VARCHAR, 50, 50, -, -, 0, -, -, -, 50, 0, NO
          -, CLITEST1, PUB_SIGN_PHOTOS, TOWN, 12, VARCHAR, 25, 25, -, -, 0, -, -, -, 25, 1, NO
          -, CLITEST1, PUB_SIGN_PHOTOS, PICTURE_QUALITY, 1, CHARacter, 1, 1, -, -, 1, -, -, -, 1, 2, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, PICTURE_NUMBER, 5, SMALLINT, 5, 2, -, 10, 0, -, -, -, -, 3, NO
          -, CLITEST1, PUB_SIGN_PHOTOS, SIGN_PHOTO, 30, BLOB, 51200, 51200, -, -, 1, -, -, -, 51200, 4, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, PHOTO_DESCRIPTION, 40, CLOB, 20480, 20480, -, -, 1, -, -, -, 20480, 5, YES
          FetchAll: 27 rows fetched.
 
 
 
 
 
 
 
 
 
 -- 33 --  of 202
  1.8.15  SQLConnect
 
  Establish a connection to a database.
 
  Syntax:
 
    >>--SQLConnect---hdbc------------------------------------------------------------------------------------><
                           +-db_alias----db_alias_length-------------------------------+
                                                          +-|user_name_and_password|-+
 
 
            user_name_and_password = |-user_name---user_name_length---authentication---authentication_length-|
 
  Parameters:
 
    hdbc
       The integer that identifies the connection handle that will be used
       for the connection.
 
    db_alias
        A string containing the alias for the database to which the
       connection is to be established.
 
       If this is not coded, then the OPTION SET command must previously been
       have used to set a "current" db_alias.
 
    db_alias_length
       Either the length of the alias string or SQL_NTS.
 
    user_name
       A string containing the userid that is attempting the connection.
 
    user_name_length
       Either the length of the user string or SQL_NTS.
 
    authentication
       A string containing the password of the userid that is attempting the
       connection.
 
    authentication_length
       Either the length of the authentication string or SQL_NTS.
 
  Successful Result:
 
      The connection is established.  Also, Interactive CLI displays a return
      code of either 0 (SQL_SUCCESS) or 1 (SUCCESS_WITH_INFO).
 
  Example:
 
      Given that - the identifier of an allocated connection handle is 1,
                 - user LIMOGES is authorized to the database PUB_CRL via the password GUINESS,
      then the command:
 
        >sqlconnect  1  pub_crl sql_nts  limoges sql_nts  guiness sql_nts
 
      would likely result in the response:
 
        SQLConnect: rc = 0 (SQL_SUCCESS)
 
 
 
 
 
 
 
 -- 34 --  of 202
  1.8.16  SQLDataSources
 
  Display the database alias name and a description of an available database.
 
  Only one database is obtained per call and there are parameters provided to
  start at the first available database on one call and then to scroll
  forward one at a time in a sequential manner through the available
  databases.
 
 
  Note:   This will obtain all databases that have been created locally with
          the CREATE DATABASE command as well asthose remote databases that
          have been registered with the CATALOG DATABASE command.
 
  Syntax:
 
                                                    +-9--------------------31-------------+
    >>--SQLDataSources---henv----SQL_FETCH_FIRST----+-------------------------------------+------------------><
                               |                 |  +-db_alias_maxlength---desc_maxlength-+
                               +-SQL_FETCH_NEXT--+
 
                                search_direction
 
  Parameters:
 
    henv
       The integer that identifies the current environment handle.
 
    search_direction
       One of:
 
         SQL_FETCH_FIRST
            Return information about the first database name in the list.
 
         SQL_FETCH_NEXT
            Return information about the next database name in the list.
            This means the next one since the last time SQLDataSources was
            called.  If SQLDataSources has not been called before in the
            program, then this is the same as specifying SQL_FETCH_FIRST.
 
    db_alias_maxlength
       An integer indicating the maximum number of bytes of information are
       to be displayed.
 
       aside: This is a rather useless parameter because 8 is the maximum
       db_alias length that is supported by DB2(cs).
 
    desc_maxlength
       An integer specifying the maximum number of bytes of information that
       are to be displayed.  The description is the one that was provided on
       the original CREATE DATABASE or CATALOG DATABASE command.
 
       aside: This parameter is also of rather dubious value because 30 is
       the maximum description that is supported by DB2(cs).
 
  Successful Result:
 
  o   Either:  The name and description of a database is displayed (along
      with a return code of either 0 (SQL_SUCCESS) or 1 (SUCCESS_WITH_INFO)
      ).
 
 
 
 
 
 -- 35 --  of 202
  o   Or:  A return code of 100 (that is, SQL_NO_DATA_FOUND) is displayed to
      indicate that the end of the list of available databases has been
      reached.
 
  Example:
 
      Given that - the current environment has an identifier of 3,
                 - there are two available databases,
      then a typical sequence of commands and responses would be:
 
        >sqldatasources 3 sql_fetch_first 9 31
        SQLDataSources: rc = 0 (SQL_SUCCESS)
        DataSource Name           : XOPEN_1
        DataSource Name Length    : 8
        Description               : X/Open Lists (DB2/6000)   <---Frank Check this
        Description Length        : 30
        #
        >sqldatasources 3 sql_fetch_next 9 31
        SQLDataSources: rc = 0 (SQL_SUCCESS)
        DataSource Name           : MULT_MED
        DataSource Name Length    : 8
        Description               : Multi-Media Test Tbls (SQL/DS)
        Description Length        : 30
        #
        >sqldatasources 3 sql_fetch_next 9 31
        SQLDataSources: rc = 100 (SQL_NO_DATA)
 
      Note that the lengths are always displayed as 8 and 30 even when
      the string is shorter.  This is because these are defined as
      fixed character in DB2(cs).
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 36 --  of 202
  1.8.17  DescribeAll
 
  Display all the common descriptor information for all columns of a result
  set.
 
  Syntax:
 
    >>--DescribeAll---hstmt----------------------------------------------------------------------------------><
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle of the statement to
       which the result set is linked.
 
  Successful Result:
 
      The information is displayed.  Also, Interactive CLI displays a return
      code of either 0 (SQL_SUCCESS) or 1 (SUCCESS_WITH_INFO).
 
  Example:
 
      Given that -there is a current connection to the PUB database (see 1.9, "Example Tables and Scripts" on page 176)
                 -there is a statement handle with a value of 22 in the allocated state
      then the following sequence of commands and responses is possible:
 
        >sqlexecdirect 22 "select * from pub_sign_photos" sql_nts
        SQLExecDirect: rc = 0 (SQL_SUCCESS)
        #
        # Describe the all the columns of the table
        #
        >sqldescribeall 22
        Column#  Column Name       ColNameLen  SQL_Type   Precision  Scale  Nullable
             1   PUB_NAME                8  SQL_VARCHAR        50      0  SQL_NO_NULLS
             2   TOWN                    4  SQL_VARCHAR        25      0  SQL_NO_NULLS
             3   PICTURE_QUALITY        15  SQL_CHAR            1      0  SQL_NULLABLE
             4   PICTURE_NUMBER         14  SQL_SMALLINT        5      0  SQL_NO_NULLS
             5   SIGN_PHOTO             10  SQL_BLOB        51200      0  SQL_NULLABLE
             6   PHOTO_DESCRIPTION      17  SQL_CLOB        20480      0  SQL_NULLABLE
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 37 --  of 202
  1.8.18  SQLDescribeCol
 
  Display all the common descriptor information for a specific column of a
  result set.
 
 
  Note:   Either SQLNumResultCols or SQLColAttributes may be used to obtain a
          count of the number of columns in a result set.
 
  Syntax:
 
                                        +-30-------------+
    >>--SQLDescribeCol--hstmt---column--+----------------+---------------------------------------------------><
                                        +-desc_maxlength-+
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle of the statement to
       which the result set is linked.
 
    column
       Column number within the result set, ordered sequentially left to
       right, starting at 1.
 
    desc_maxlength
       An integer specifying the maximum number of bytes of information that
       are to be displayed.
 
  Successful Result:
 
      The information is displayed.  Also, Interactive CLI displays a return
      code of either 0 (SQL_SUCCESS) or 1 (SUCCESS_WITH_INFO).
 
  Example:
 
      Given that -the database on the current connection contains the DEPARTMENT table that is shipped in the
                  IBMSAMPL database with DB2(cs)
                 -there an used statement handle with a value of 22
      then the following sequence of commands and responses is possible:
 
        >sqlexecdirect 22 "select * from department" sql_nts
        SQLExecDirect: rc = 0 (SQL_SUCCESS)
        #
        # Describe the second column of the table
        #
        >sqldescribecol 22 2 10
        SQLDescribeCol: rc = 0 (SQL_SUCCESS)
            Column Name          = DEPTNAME
            Actual Column Length = 8
            SQL Type             = SQL_VARCHAR
            Length / Precision   = 29
            Scale                = 0
            fNullable            = SQL_NO_NULLS
 
 
 
 
 
 
 
 
 
 
 
 -- 38 --  of 202
  1.8.19  Diff
 
  Compare the content of two files.
 
  Syntax:
 
    >>--Diff---file_name_1---file_name_2---------------------------------------------------------------------><
 
  Parameters:
 
    file_name_1   file_name_2
       The names of the two files that are to be compared.
 
  Successful Result:
 
      The contents of the files are compared and one of three results is
      displayed:
 
      o   The files are the same
 
      o   The files are not the same size
 
      o   The files are the same size but the content is different.  The
          location where the content begins to differ, is displayed.
 
  Example:
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 39 --  of 202
  1.8.20  SQLDisconnect
 
  Close a connection to a database.
 
  Syntax:
 
    >>--SQLDisconnect---hdbc---------------------------------------------------------------------------------><
 
  Parameters:
 
    hdbc
       The integer that identifies the connection handle of the connection
       that is being closed.
 
  Successful Result:
 
      The connection is closed.  If there are any statement handles
      associated with the connection they are freed as the last step in a
      successful disconnection.  Memory buffers associated with this
      statement handle and allocated via the GetMem command are also freed.
      Also, Interactive CLI displays a return code of either 0 (SQL_SUCCESS)
      or 1 (SUCCESS_WITH_INFO).
 
  Example:
 
      Given that the value of hdbc is 1, that there is an active connection, and that
      there is no active transaction, then the command:
 
        >sqldisconnect 1
 
      would likely result in the response:
 
        SQLDisconnect: rc = 0 (SQL_SUCCESS)
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 40 --  of 202
  1.8.21  DisplayFormat
 
  Display either a specific matrix format or all the matrix formats.
 
  Syntax:
 
    >>--DisplayFormat-----matrixformat_id--------------------------------------------------------------------><
                        +-ALL-------------+
 
  Parameters:
 
    matrixformat_id
       The integer that identifies the matrix format that is to be displayed.
 
    ALL
       This means that all currently defined matrix formats are to be
       displayed.
 
  Successful Result:
 
      The frmat is displayed.
 
  Example:
 
        # Create a matrix format for PUB_SIGN_PHOTOS
        #
        >formatmatrix 5000 1  sql_c_char 51
        FormatMatrix: new matrix format defined successfully.
        >formatmatrix 5000 2  sql_c_char 26
        FormatMatrix: matrix format 5000 appended successfully.
        >formatmatrix 5000 3  sql_c_char  2
        FormatMatrix: matrix format 5000 appended successfully.
        >formatmatrix 5000 4  sql_c_short
        FormatMatrix: matrix format 5000 appended successfully.
        >formatmatrix 5000 5  sql_c_blob_locator
        FormatMatrix: matrix format 5000 appended successfully.
        >formatmatrix 5000 6  sql_c_clob_locator
        FormatMatrix: matrix format 5000 appended successfully.
        #
        # Now Display it
        #
        >displayformat 5000
        Format [5000]
          Instances: 0
          Buffer size per row: 113
                column max_buff_size  c_type
          {0}:      1           51    SQL_C_CHAR
          {1}:      2           26    SQL_C_CHAR
          {2}:      3            2    SQL_C_CHAR
          {3}:      4            2    SQL_C_SHORT
          {4}:      5            4    SQL_C_BLOB_LOCATOR
          {5}:      6            4    SQL_C_CLOB_LOCATOR
        #
        # Get a memory matrix buffer of 15 rows and assign format 5000 to it.
        #
        >getmemmatrix 11 5000   5001   15
        GetMemMatrix: memory matrix 5001 allocated for statement handle 11.
 
 
 
 
 
 
 
 
 -- 41 --  of 202
  1.8.22  SQLDriverConnect
 
  Establish a connection to a database.
 
 
  Note:   This is an alternative to SQLConnect providing support for
          additional connection parameters and the ability to prompt the user
          for connection information.
 
  Syntax:
 
    >>--SQLDriverConnect---hdbc---0---in_connstr---in_connstr_length---out_connstr_maxlength----------------->
 
     >----SQL_DRIVER_PROMPT----------------------------------------------------------------------------------><
        |-SQL_DRIVER_COMPLETE----------|
        |-SQL_DRIVER_COMPLETE_REQUIRED-|
        +-SQL_DRIVER_NOPROMPT----------+
 
                   completion
 
  Parameters:
 
    0
       This means that the pop-up prompt window is to be centered within the
       screen.  It is currently the only option provided.
 
    in_constr
       Input connection string.  Refer to material under Usage starting on
       page 182 and under Configuration keywords starting on page 93 of the
       V2.1 DB2 CLI Guide and Reference for descriptions of the various
       keywords and values that can be specified within the connection
       string.
 
    in_constr_length
       Either the length of the input connection string or SQL_NTS.
 
    out_constr_maxlength
       An integer specifying the maximum number of bytes of the output
       connection string that are to be displayed.
 
    completion
       One of:
 
         SQL_DRIVER_PROMPT
            A dialog is always to be initiated.
 
         SQL_DRIVER_COMPLETE
            A dialog is only to be initiated if there is insufficient
            information in the connection string.  The connection string
            information is used as initial values in the dialog.
 
            Note that, if there is an error then, depending on the nature of
            that error, it is either ignored or the connection fails and and
            error is returned by CLI.
 
         SQL_DRIVER_COMPLETE_REQUIRED
            A dialog is only to be initiated if there is insufficient
            information in the connection string.  Only missing mandatory
            information is prompted for.  However, all three mandatory items
            (that is data source, user id, and password) appear in the
            dialogue box and any values already provided in the connection
            string can be changed.
 
 
 
 -- 42 --  of 202
            Note that, if there is an error then, depending on the nature of
            that error, it is either ignored or the connection fails and and
            error is returned by CLI.
 
 
         SQL_DRIVER_NOPROMPT
            The user is not prompted.  A connection is attempted with the
            information supplied.
 
  Successful Result:
 
      The connection is established.  The completed connection string that
      was used to establish the connection is displayed.  Also, Interactive
      CLI displays a return code of either 0 (SQL_SUCCESS) or 1
      (SUCCESS_WITH_INFO).
 
  Example:
 
      Given that - the identifier of an allocated connection handle is 3,
                 - user CLITEST1 is authorized to the database PUB via the password PASSWD1,
      then the command:
 
        sqldriverconnect 3  0  "DSN=PUB;UID=CLITEST1;PWD=PASSWD1;" sql_nts  100  sql_driver_complete
 
      would likely result in the response:
 
        SQLDriverConnect 3  0  "DSN=PUB;UID=clitest1;PWD=passwd1;"  SQL_NTS 100  SQL_DRIVER_COMPLETE
        SQLDriverConnect: rc = 0 (SQL_SUCCESS)
        SQLDriverConnect: ConnStrOut:
           DSN=PUB;UID=CLITEST1;PWD=PASSWD1;DYNAMIC=1;
                          cbConnStrOut: 43
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 43 --  of 202
  1.8.23  SQLError
 
  Return diagnostic information that is associated with either an environment
  handle, a connection handle or a statement handle.
 
  A diagnostic area is always attached to each allocated handle.  It is the
  diagnostic for the last command that was executed with that handle as the
  primary handle (e.g. the primary handle for Connect is the hdbc and the
  primary handle for Prepare is an hstmt).
 
  Syntax:
 
                                                           +-1024----------+
    >>--SQLError----henv---SQL_NUL_HDBC---SQL_NUL_HSTMT----+---------------+---------------------------------><
                  |-0------hdbc-----------SQL_NUL_HSTMT-|  +-msg_maxlength-+
                  +-0------0--------------hstmt---------+
 
  Parameters:
 
    henv  hdbc  hstmt
       The first three parameters are coded differently in order to determine
       which one of the handles is to be identified as the primary handle.
 
           henv   SQL_NUL_HDBC   SQL_NUL_HSTMT   The latest diagnostic that was attached to the henv
                                                 is to be displayed.
 
           0      hdbc           SQL_NUL_HSTMT   The latest diagnostic that was attached to the hdbc
                                                 is to be displayed.
 
                                                 The henv value is ignored but, by convention, it is
                                                 coded as zero.
 
           0      0              hstmt           The latest diagnostic that was attached to the hstmt
                                                 is to be displayed.
 
                                                 The henv and hdbc values are ignored but, by convention,
                                                 they are coded as zero.
 
    msg_maxlength
       An integer specifying the maximum number of bytes of the message text
       that are to be displayed.
 
       Note that this parameter is optional.  If the command is coded without
       a maximum message length, the default of 1024 is used.
 
  Successful Result:
 
      The latest diagnostic information that is associated with the handle is
      displayed.
 
      Note that the SQLError command does not itself set a detailed
      diagnostic code.
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 44 --  of 202
  Example 1:
 
      Given that - there is a statement handle with a value of 22,
                 - COTTON is connected to the IBMSAMPL database
                 - there is no table named MISSING_TABLE in IBMSAMPL
      the following sequence of commands and responses is possible:
 
        >sqlexecdirect 22 "select * from missing_table" sql_nts
        SQLExecDirect: rc = -1 (SQL_ERROR)
        #
        #Find out something about the error
        #
        >SQLError 0 0 22
        SQLError: rc = 0 (SQL_SUCCESS)
        SQLError: SQLState     : S0002
                  fNativeError : -204
                  szErrorMsg   : {IBM} {CLI Driver} {DB2/6000} SQL0204N  "COTTON.MISSING_TABLE" is
                                                                an undefined name.
                  SQLSTATE=42704
                  cbErrorMsg   : 99
 
      Note that the cbErrorMsg value is simply the length of szErrorMsg.
 
  Example 2:
 
      Given that there is a statement handle with a value of 22,
      then the following sequence of commands and responses is possible:
 
        >sqlsetcursorname 22 2bornot2b sql_nts
        SQLSetCursorName: rc = -1 (SQL_ERROR)
        #
        #Find out something about the error
        #
        >SQLError 0 0 22
        SQLError: rc = 0 (SQL_SUCCESS)
        SQLError: SQLState     : 34000
                  fNativeError : -99999
                  szErrorMsg   : {IBM} {CLI Driver} CLI0117E  Invalid cursor name. SQLSTATE=34000
                  cbErrorMsg   : 63
 
      34000 means that the cursor name is invalid (it cannot begin with
      a digit. The error was returned by the CLI Driver, not the
      Database Manager (that is why fNativeError is set to -99999).
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 45 --  of 202
  1.8.24  SQLExecDirect
 
  Execute an SQL statement directly.
 
  Syntax:
 
    >>--SQLExecDirect---hstmt----sqlstmt---sqlstmt_length----------------------------------------------------><
                               |                          |
                               +-FILE---file_name---------+
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle that is to be used
       for the statement.
 
    sqlstmt
       A delimited string that contains the SQL statement that is to be
       executed.  Note that the statement may contain parameter markers.
 
    sqlstmt_length
       Either the length of the statement string or SQL_NTS.
 
    FILE file_name
       The name of the file that contains the statement that is to be
       executed.
 
       Note that the only thing that can be in the file is the statement.
       That statement may be coded on one or more lines within the file.
 
       The statement should not be enclosed in delimiter characters.
 
  Successful Result:
 
      The SQL statement is executed at the database to which the application
      is connected and the results are "fed back" in the form of an updated
      diagnostic area for the statement handle.  Also, Interactive CLI
      displays a return code of either 0 (SQL_SUCCESS) or 1
      (SUCCESS_WITH_INFO).
 
  Example:
 
      Assuming that there is a statement handle 15 that is in the
      "allocated" state and that the connected user has the privilege to
      select from the PUB_CRAWL_LOG table, then the command:
 
        >sqlexecdirect 15 "select * from PUB_CRAWL_LOG where BEER_TRIED like '%Conners%'"  sql_nts
 
      could result in the response:
 
        SQLExecDirect: rc = 0 (SQL_SUCCESS)
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 46 --  of 202
  1.8.25  SQLExecute
 
  Execute a prepared SQL statement.
 
  Syntax:
 
    >>--SQLExecute---hstmt-----------------------------------------------------------------------------------><
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle of the prepared
       statement that is to be executed.
 
  Successful Result:
 
      The SQL statement is executed at the database to which the application
      is connected and the results are "fed back" in the form of an updated
      diagnostic area for the statement handle.  Also, Interactive CLI
      displays a return code of either 0 (SQL_SUCCESS) or 1
      (SUCCESS_WITH_INFO).
 
  Example:
 
      See the example with the SQLPrepare command on page 124.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 47 --  of 202
  1.8.26  ExtendedBindCol
 
  Bind a memory matrix buffer to a statement.
 
 
  Note:   This indicates that row-wise binding will be used with a subsequent
          SQLExtendedFetch command.
 
  Syntax:
 
    >>--ExtendedBindCol---hstmt---memmatrix_id---------------------------------------------------------------><
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle of the statement to
       which the memory matrix is to be bound.
 
    memmatrix_id
       The integer that identifies the memory matrix buffer which is to be
       bound to the statement.  (Note that more than one matrix may be
       associated with the statement at the same time.  The one that was most
       recently bound is used by the SQLExtendedFetch command.)
 
 
  Successful Result:
 
      The memory matrix buffer is bound to the statement (with
      acknowledgement).
 
  Example:
 
      See Example 1 with the SQLExtendedFetch command on page 53.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 48 --  of 202
  1.8.27  SQLExtendedFetch
 
  Get a set of rows from a result set.
 
 
  Note:   Before this command is invoked, the appropriate commands must have
          been used to set up either column-wise binding or row-wise binding
          for the statement.
 
              For column-wise binding,
 
              1.  GetMemArray and/or GetFileRef is used to define memory
                  array buffers and/or file reference array buffers.
 
              2.  SQLBindCol and/or BindFileToCol is used for every column
                  that is to be fetched in order to bind that column to an
                  array.
 
              3.  SetStmtOption with the SQL_ROWSET_SIZE option is used in
                  order to specify the maximum number of rows are to be
                  retrieved on one invocation of SQLExtendedFetch.
 
              For row-wise binding,
 
              1.  FormatMatrix is used for every column that is to be
                  fetched.
 
              2.  GetMemMatrix is used to assign that format to a memory
                  matrix buffer.
 
              3.  ExtendedBindCol is used to bind the memory matrix buffer to
                  a statement handle.
 
              4.  SetStmtOption is used to set SQL_BIND_TYPE to MATRIXFORMAT.
 
              5.  SetStmtOption with the SQL_ROWSET_SIZE option is used in
                  order to specify the maximum number of rows are to be
                  retrieved on one invocation of SQLExtendedFetch.
 
  Syntax:
 
    >>--SQLExtendedFetch---hstmt---SQL_FETCH_NEXT---0-------------------------------------------------------->
                                                        +-MEMMATRIX---memmatrix_id-+
                                     fetch_type
 
 
                  >------------------------------------------------------------------------------------------><
                     +-/TEST---textmask/-+
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle to which the result
       set is linked.
 
    fetch_type
       Only FETCH_NEXT is supported in Version 2.1.
 
    0
       This parameter which is reserved for use by absolute and relative
       scrolling is ignored in Version 2.1.  Thus, any value can be coded
       and, by convention, 0 is usually used.
 
 
 
 -- 49 --  of 202
    MEMMATRIX memmatrix_id.
       This not specified when column-wise binding has been used.  It is
       optional even for row-wise binding.
 
       It should identify the same memory matrix buffer that was specified on
       the SQLExtendedBindCol command that preceded this command.  However,
       if it does not do so, it does not alter the identity of the
       memmatrix_id that is used to do the binding.  The only purpose of this
       argument is to identify the memmatrix_id that will be updated with a
       count of the actual rows fetched so that this count can be displayed
       with a subsequent List command.
 
  Successful Result:
 
      An attempt is made to read the next block of rows from the result set
      and the results are "fed back" in the form of an updated diagnostic
      area for the statement handle.  Also, Interactive CLI displays a return
      code of either 0 (SQL_SUCCESS) or 1 (SUCCESS_WITH_INFO).
 
      If there are no more rows in the result set, that return code is
      SQL_NO_DATA_FOUND.
 
  Example 1:
 
      Given that - there is a connection identified by 2 the the PUB database
                 - the user on that connection is CLITEST1
                 - there is an allocated statement, 11, on connection 2
 
      then a possible sequence of commands and responses would be:
 
        #
        # Prepare statement to select row from the PUB_SIGN_PHOTOS table:
        #
        >sqlprepare 11 "select * from PUB_SIGN_PHOTOS" sql_nts
        SQLPrepare: rc = 0 (SQL_SUCCESS)
        #
        # Create a matrix format then display it
        >formatmatrix 5000 1  sql_c_char 51
        FormatMatrix: new matrix format defined successfully.
        >formatmatrix 5000 2  sql_c_char 26
        FormatMatrix: matrix format 5000 appended successfully.
        >formatmatrix 5000 3  sql_c_char  2
        FormatMatrix: matrix format 5000 appended successfully.
        >formatmatrix 5000 4  sql_c_short
        FormatMatrix: matrix format 5000 appended successfully.
        >formatmatrix 5000 5  sql_c_BLOB_locator
        FormatMatrix: matrix format 5000 appended successfully.
        >formatmatrix 5000 6  sql_c_clob_locator
        FormatMatrix: matrix format 5000 appended successfully.
        #
        # Get a memory matrix buffer of 15 rows and assign format 5000 to it.
        #
        >getmemmatrix 11 5000   5001   15
        GetMemMatrix: memory matrix 5001 allocated for statement handle 11.
        #
        # List the original contents of matrix 5001
        #
        >list memMatrix 11   5001
        Memory Matrix:
        hstmt: {11}, memmatrix_id: {5001}, matrixformat_id: {5000}
        total rows available: 15, rows fetched: 0
        Row [0]:
        Column {0 : Contents: ""
 
 
 -- 50 --  of 202
               Length: 0
        Column {1}: Contents: ""
               Length: 0
        Column {2}: Contents: ""
               Length: 0
        Column {3}: Contents: 0
               Length: 0
        Column {4}: Contents: 0 <x0>
               Length: 0
        Column {5}: Contents: 0 <x0>
               Length: 0
        .
        .
        info for 13 rows
        .
        .
        Row {14}:
        Column {0}: Contents: ""
               Length: 0
        Column {1}: Contents: ""
               Length: 0
        Column {2}: Contents: ""
               Length: 0
        Column {3}: Contents: 0
               Length: 0
        Column {4}: Contents: 0 <x0>
               Length: 0
        Column {5}: Contents: 0 <x0>
               Length: 0
 
        1 Memory Matrix(es) and 15 row(s) Listed
 
        #
        # Set SQL_ROWSET_SIZE to indicate how many rows are to be read at a time
        #
        >sqlsetstmtoption 11 sql_rowset_size 15
        SQLSetStmtOption: rc = 0 (SQL_SUCCESS)
        #
        # Bind memory matrix 5001 to statement handle
        #
        >extendedbindcol 11   5001
        Extended Bind completed.
        #
        # Set SQL_BIND_TYPE for row-wise binding
        #
        >sqlsetstmtoption 11 sql_bind_type matrixformat 5000
        SQLSetStmtOption: rc = 0 (SQL_SUCCESS)
        #
        # Execute the statement
        >sqlexecute 11
        SQLExecute: rc = 0 (SQL_SUCCESS)
        #
        # Fetch the first (and only) block of rows.  (There are more rows in
        #
        # the matrix than in the table)
        >sqlextendedfetch 11   sql_fetch_next   0   memmatrix 5001
        SQLExtendedFetch: rc = 0 (SQL_SUCCESS)
          Rows Fetched: 13
          RowStatus Array:
           {0}: SQL_ROW_SUCCESS
           {1}: SQL_ROW_SUCCESS
           {2}: SQL_ROW_SUCCESS
           {3}: SQL_ROW_SUCCESS
 
 
 -- 51 --  of 202
           {4}: SQL_ROW_SUCCESS
           {5}: SQL_ROW_SUCCESS
           {6}: SQL_ROW_SUCCESS
           {7}: SQL_ROW_SUCCESS
           {8}: SQL_ROW_SUCCESS
           {9}: SQL_ROW_SUCCESS
           {10}: SQL_ROW_SUCCESS
           {11}: SQL_ROW_SUCCESS
           {12}: SQL_ROW_SUCCESS
        #
        # Now see what is in the array
        #
        >list memmatrix 11   5001
        Memory Matrix:
        hstmt: [11], memmatrix_id: [5001], matrixformat_id: [5000]
        total rows available: 15, rows fetched: 13
        Row {0}:
        Column {0}: Contents: "Dutchess of Markham"
               Length: 19
        Column {1}: Contents: "Markham"
               Length: 7
        Column {2}: Contents: "d"
               Length: 1
        Column {3}: Contents: 1
               Length: 2
        Column {4}: Contents: 0 <x0>
               Length: -1
        Column {5}: Contents: Non-zero locator value
               Length: 4
        Row [1]:
        Column [0]: Contents: "Case is Altered"
               Length: 15
        Column [1]: Contents: "Pinner"
               Length: 6
        Column [2]: Contents: "c"
               Length: 1
        Column [3]: Contents: 2
               Length: 2
        Column [4]: Contents: 0 <x0>
               Length: -1
        Column [5]: Contents: Non-zero locator value
               Length: 4
        .
        .
        info for 11 rows
        .
        .
        Row {12}:
        Column {0}: Contents: "The Loggerheads"
               Length: 15
        Column {1}: Contents: "Gwernymynydd"
               Length: 12
        Column {2}: Contents: "a"
               Length: 1
        Column {3}: Contents: 22
               Length: 2
        Column {4}: Contents: 0 <x0>
               Length: -1
        Column {5}: Contents: Non-zero locator value
               Length: 4
        Row {13}:
        Column {0}: Contents: ""
               Length: 0
 
 
 -- 52 --  of 202
        Column {1}: Contents: ""
               Length: 0
        Column {2}: Contents: ""
               Length: 0
        Column {3}: Contents: 0
               Length: 0
        Column {4}: Contents: 0 <x0>
               Length: 0
        Column {5}: Contents: 0 <x0>
               Length: 0
        Row {14}:
        Column {0}: Contents: ""
               Length: 0
        Column {1}: Contents: ""
               Length: 0
        Column {2}: Contents: ""
               Length: 0
        Column {3}: Contents: 0
               Length: 0
        Column {4}: Contents: 0 <x0>
               Length: 0
        Column {5}: Contents: 0 <x0>
               Length: 0
 
        1 Memory Matrix(es) and 15 row(s) Listed
 
        #
        # Free the memory matrix
        #
        >freememmatrix 5001
        FreeMemMatrix: memory matrix 5001 freed.
        #
        # Free the matrix format
        #
        unformatmatrix 5000
        UnformatMatrix: matrix format has been deleted.
 
  Example 2:
 
      Make this an example that uses files and column-wise binding.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 53 --  of 202
  1.8.28  SQLFetch
 
  Get the next row of a result set.
 
  Syntax:
 
    >>--SQLFetch---hstmt-------------------------------------------------------------------------------------><
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle to which the result
       set is linked.
 
  Successful Result:
 
      An attempt is made to read the next row from the result set and the
      results are "fed back" in the form of an updated diagnostic area for
      the statement handle.  Also, Interactive CLI displays a return code of
      either 0 (SQL_SUCCESS) or 1 (SUCCESS_WITH_INFO).
 
      If there are no more rows in the result set, that return code is
      SQL_NO_DATA_FOUND.
 
  Example:
 
      Given that - the prepared statement used to create the result set is:
                      select PUB_NAME, TOWN, COUNTRY, RATING from PUB_CRAWL_LOG
                 - the value of the hstmt is 70
                 - SQLBindCol was used to bind the result set columns to memory bufs 701, 702, 703, and 704
                 - 157 of 159 rows have already been read (aside: our pub visiter has been busy lately)
      then a typical sequence of commands and responses would be:
 
        >sqlfetch 70
        SQLFetch: rc = 0 (SQL_SUCCESS)
        #
        >list buffs 70
        Buffs: hmembuf hstmt  bufSize  usedSize   c_type
                 {701}     70        51         13       SQL_C_CHAR
        Contents: "Waverly Hotel"
                 {702}     70        26         6       SQL_C_CHAR
        Contents: "Hearst"
                 {703}     70        26         6       SQL_C_CHAR
        Contents: "Canada"
                 {704}     70        2         1       SQL_C_CHAR
        Contents: "G"
        #
        >sqlfetch 70
        SQLFetch: rc = 0 (SQL_SUCCESS)
        #
        >list buffs 70
        Buffs: hmembuf hstmt  bufSize  usedSize   CType
                 {701}     70        51         20      SQL_C_CHAR
        Contents: "Ye Olde Greene Manne"
                 {702}     70        14         13      SQL_C_CHAR
        Contents: "Rickmansworth"
                 {703}     70        8         7      SQL_C_CHAR
        Contents: "England"
                 {704}     70        2         1      SQL_C_CHAR
        Contents: "G"
        #
        >sqlfetch 70
        SQLFetch: rc = 100 (SQL_NO_DATA)
 
 
 -- 54 --  of 202
  1.8.29  FetchAll
 
  Display all the (remaining) rows of a result set onto the screen.  Also
  display the names of the columns, a count of the number of columns, and a
  count of the number of rows obtained by SQLFetchAll.
 
 
  Note:   This is a basically a shortcut for the combination of the following
          commands:
 
              SQLNumResultCols
 
              SQLDescribeCol for each column
 
              SQLFetch on each remaining row in the result set
 
                 SQLGetData into SQL_C_CHAR for each column in each row
 
          In addition, column names and the count of rows obtained are
          displayed.
 
  Syntax:
 
    >>--FetchAll---hstmt-------------------------------------------------------------------------------------><
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle to which the result
       set is linked.
 
  Successful Result:
 
      If there are still rows in the result set:
 
      1.  The number of columns in the table is displayed.
      2.  The names of the columns in the result set are displayed.
      3.  Then, starting at the current position of the cursor in the result
          set, all the remaining rows in the result set are displayed.
      4.  Last, the a count of the rows that were fetched by FetchAll is
          displayed.
 
      If there are no rows in the result set, that fact is displayed (along
      with the column count and names of the rows.
 
  Example:
 
      See the example with the FetchNext command starting on page 59.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 55 --  of 202
  1.8.30  FetchNext
 
  Display the next row of a result set onto the screen.  Optionally display
  the number of columns and their names as well.
 
 
  Note:   This is a basically a shortcut for the combination of the following
          commands:
 
              SQLFetch on each remaining row in the result set
 
                 SQLGetData into SQL_C_CHAR for each column in each row
 
          In addition, column names may optionally be displayed.
 
  Syntax:
 
    >>--FetchNext---hstmt------------------------------------------------------------------------------------><
                           +-COLUMNNAME-+
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle to which the result
       set is linked.
 
    COLUMNNAME
       If this is specified, the names of the columns in the result set are
       also displayed.
 
  Successful Result:
 
      If there are still rows in the rsult set, the contents of the next row
      are displayed.
 
      If there are no rows in the result set, that fact is displayed.
 
  Example:
 
      Given that - there is a connection identified by 2 the the PUB database
                 - the user on that connection is CLITEST1
                 - there is allocated statement, 13, on connection 2
      then a possible sequence of commands and responses would be:
 
        # Execute a statement to create a result from the PUB_CRAWL_LOG example table
        #
        >sqlexecdirect 13 "select * from PUB_CRAWL_LOG" sql_nts
        SQLExecDirect: rc = 0 (SQL_SUCCESS)
        #
        # Fetch the first row
        #
        >fetchnext 13
        Case is Altered, Pinner, Middlesex, England, 1971-07-16, Young's Special Bitter, --> more to right
        #
        # Fetch the next row (this time sak for column names)
        #
        fetchnext 13 columnname
        FetchNext:  Columns: 11
          PUB_NAME TOWN POLITICAL_UNIT COUNTRY VISITED_ON BEER_TRIED PRICE ALC_CONTENT   --> more to right
          Los Gatos Brewing Company, Los Gatos, California, USA, 1993-03-15, Oktoberfest --> more to right
        #
        # Fetch the rest of the rows
        #
 
 
 -- 56 --  of 202
        >fetchall 13
        FetchAll:  Columns: 11
          PUB_NAME TOWN POLITICAL_UNIT COUNTRY VISITED_ON BEER_TRIED PRICE ALC_CONTENT   --> more to right
          White Horse, Droxford, Hampshire, England, 1977-07-21, Guinness, 0.55, -, E, 1 -->
          Cat and Custard Pot, Shipton Moyne, Wiltshire, England, 1979-01-15, Tankard... -->
          The Round of Grass, ?, Warwickshir, England, 1993-06-10, Guinness, 1.40, -, E, -->
          Black Fly and Ear, Pivabiska, Ontario, Canada, 1984-07-01, Pivabiska Pure...   -->
          The Stables, Theale, Berkshire, England, 1992-06-28, Pivabiska Pure Pilsner,   -->
          Cawl Esquel, Don Mills, Ontario, Canada, 1995-05-01, LLL (Limoges & Li Lager), -->
          The Slug and Lettuce, Stratford, Warwickshir, Englan, 1994-07-03, Flower's...  -->
          Cross Keys, Peebles, Peebles, Scotland, 1974-06-14, Guinness, 0.40, -, E, 0,   -->
          The Shed and Grimsby, Pivabiska, Ontario, Canada, 1984-07-01, Pivabiska...     -->
          FetchAll: 9 rows fetched.
        #
        # Try another FetchAll and another FetchNext to show response when there are no more rows
        #
        >fetchall 13
        FetchAll:  Columns: 11
          PUB_NAME TOWN POLITICAL_UNIT COUNTRY VISITED_ON BEER_TRIED PRICE ALC_CONTENT   --> more to right
          DESCRIPTION
          FetchAll: 0 rows fetched.
        #
        >fetchnext 13
        FetchNext: No more rows to be fetched.
        #
        # Close the cursor
        #
        >sqlfreestmt 13 sql_close
        SQLFreeStmt: rc = 0 (SQL_SUCCESS)
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 57 --  of 202
  1.8.31  SQLForeignKeys
 
  Obtain a result set that contains information about foreign keys.  The
  information returned is one of the following:
 
  1.  All the foreign keys, if any, in a specified table
 
  2.  All the foreign keys, if any, in other tables that point to the primary
      key in a specified table
 
  3.  The foreign key, if any, in a specified table that points to the
      primary key in a specified table.
 
  Note:   The effect of this command is the same as an SQLExecDirect command
          with the appropriate select-statement against the catalog.  Thus,
          the SQLForeignKeys command may be followed commands such as
          SQLFetch to display the result set.
 
  Syntax:
 
    >>--SQLForeignKeys---hstmt------------------------------------------------------------------------------->
 
                  >-- -1--------------------0---------------------------------------------------------------->
 
                  >---primary_key_schema----primary_key_schema_length---------------------------------------->
 
                  >---primary_key_table-----primary_key_table_length----------------------------------------->
 
                  >-- -1--------------------0---------------------------------------------------------------->
 
                  >---foreign_key_schema----foreign_key_schema_length---------------------------------------->
 
                  >---foreign_key_table-----foreign_key_table_length-----------------------------------------><
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle that is to be used
       for the result set returned by the command.
 
    -1
       This is a ***table_catalog argument which must always be a nul value
       in this release.
 
    0
 
    primary_key_schema
       Either:
 
       o   -1 if type 1 information is to be returned.  Warning:  Be aware,
           however, that the SET SCHEMA variation of the Option command (see
           page 118) can be used to set a default schema pattern.  In cases
           where such a default has been set, -1 is specified here to opt for
           that default.  Since this default will also apply to the
           foreign_key_schema, the ForeignKeys command can only be used to
           return type 3 information.
 
 
       o   The primary key table's schema name (case sensitive) if type 2 or
           3 information is to be returned.
 
 
 
 
 
 -- 58 --  of 202
    primary_key_schema_length
       If a name is specified, either the length of the schema name or
       SQL_NTS; otherwise 0.
 
    primary_key_table
       Either:
 
       o   -1 if type 1 information is to be returned.
 
       o   The primary key's table name (case sensitive) if type 2 or 3
           information is to be returned.
 
    primary_key_table_length
       If a name is specified, either the length of the table name or
       SQL_NTS; otherwise 0.
 
    -1
       See above
 
    0
 
    foreign_key_schema
       Either:
 
       o   -1 if type 2 information is to be returned.
 
           See the warning under primary_key_schema above.
 
       o   The foreign key table's schema name (case sensitive) if type 1 or
           3 information is to be returned.
 
    foreign_key_schema_length
       If a name is specified, either the length of the schema name or
       SQL_NTS; otherwise 0.
 
    foreign_key_table
       Either:
 
       o   -1 if type 2 information is to be returned.
 
       o   The foreign key's table name (case sensitive) if type 1 or 3
           information is to be returned.
 
    foreign_key_table_length
       If a name is specified, either the length of the table name or
       SQL_NTS; otherwise 0.
 
  Successful Result:
 
      A result set is returned and a cursor is opened on the statement
      handle.  The data in the result set is made available for retrieval via
      the SQLFetch command.  Also, Interactive CLI displays a return code of
      either 0 (SQL_SUCCESS) or 1 (SUCCESS_WITH_INFO).  If no rows are found
      that match the search criteria, an empty result set is returned and the
      return code from SQLFetch will be SQL_NO_DATA_FOUND.
 
 
 
 
 
 
 
 
 
 
 -- 59 --  of 202
  Example:
 
      Given that - there is a connection identified by 2 the the PUB database
                 - the user on that connection is CLITEST1
                 - there is allocated statement, 12, on connection 2
      then a possible sequence of commands and responses would be:
 
        # Obtain a result set contaning the foreign keys within the FRIENDS_AT_PUB table.
        #
        >sqlforeignkeys 12   -1 0   -1 0   -1 0   -1 0   CLITEST1 sql_nts   FRIENDS_AT_PUB sql_nts
        SQLForeignKeys: rc = 0 (SQL_SUCCESS)
        #
        # Fetch the rows, then close the cursor
        #
        >fetchall 12
        FetchAll:  Columns: 13
          PKTABLE_CAT PKTABLE_SCHEM PKTABLE_NAME PKCOLUMN_NAME FKTABLE_CAT FKTABLE_SCHEM --> more to right
          -, CLITEST1, FRIEND_CTRL, FRIEND_NUMBER, -, CLITEST1, FRIENDS_AT_PUB, FRIEND_NUMBER, 1, 3, 3, -, -
          -, CLITEST1, PUB_CRAWL_LOG, PUB_NAME, -, CLITEST1, FRIENDS_AT_PUB, PUB_NAME, 1, 3, 3, -, -
          -, CLITEST1, PUB_CRAWL_LOG, VISITED_ON, -, CLITEST1, FRIENDS_AT_PUB, VISITED_ON, 2, 3, 3, -, -
          FetchAll: 3 rows fetched.
        >sqlfreestmt 12 sql_close
        SQLFreeStmt: rc = 0 (SQL_SUCCESS)
        #
        # Obtain result set with the foreign keys in any tables that point to the PUB_CRAWL_LOG table
        #
        >sqlforeignkeys 12   -1 0   CLITEST1 SQL_NTS   PUB_CRAWL_LOG SQL_NTS   -1 0   -1 0   -1 0
        SQLForeignKeys: rc = 0 (SQL_SUCCESS)
        #
        # Fetch the rows, then close the cursor
        #
        >fetchall 12
        FetchAll:  Columns: 13
          PKTABLE_CAT PKTABLE_SCHEM PKTABLE_NAME PKCOLUMN_NAME FKTABLE_CAT FKTABLE_SCHEM --> more to right
          -, CLITEST1, PUB_CRAWL_LOG, PUB_NAME, -, CLITEST1, FRIENDS_AT_PUB, PUB_NAME, 1, 3, 3, -, -
          -, CLITEST1, PUB_CRAWL_LOG, VISITED_ON, -, CLITEST1, FRIENDS_AT_PUB, VISITED_ON, 2, 3, 3, -, -
          FetchAll: 2 rows fetched.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 60 --  of 202
  1.8.32  FormatMatrix
 
  Create or alter a matrix format for subsequent use with a GetMemMatrix
  command.
 
  The first time that the command is used for a given matrixformat_id, the
  matrix format is created.  Subsequent uses of the command either add new
  columns to the format or change the c_type of columns that already in the
  matrix format.
 
 
  Note:   This can only be invoked to change an existing matrix format if
          there is no memory matrix buffer that is currently defined with
          that matrix format.
 
  Syntax:
 
    >>--FormatMatrix---matrixformat_id---column-----SQL_C_CHAR---size----------------------------------------><
                                                  |-SQL_C_DBCHAR---size--|
                                                  |-SQL_C_SHORT----------|
                                                  |-SQL_C_USHORT---------|
                                                  |-SQL_C_SSHORT---------|
                                                  |-SQL_C_LONG-----------|
                                                  |-SQL_C_ULONG----------|
                                                  |-SQL_C_SLONG----------|
                                                  |-SQL_C_DOUBLE---------|
                                                  |-SQL_C_FLOAT----------|
                                                  |-SQL_C_DATE-----------|
                                                  |-SQL_C_TIME-----------|
                                                  |-SQL_C_TIMESTAMP------|
                                                  |-SQL_C_BINARY---size--|
                                                  |-SQL_C_BIT------------|
                                                  |-SQL_C_TINYINT--------|
                                                  |-SQL_C_UTINYINT-------|
                                                  |-SQL_C_STINYINT-------|
                                                  |-SQL_C_BLOB_LOCATOR---|
                                                  |-SQL_C_CLOB_LOCATOR---|
                                                  +-SQL_C_DBCLOB_LOCATOR-+
 
                                                         c_type
 
  Parameters:
 
       The integer that identifies the matrix format that is to be be added
       or changed.
 
    column
       The column number of the result set that will eventually be read into
       the matrix.  The numbers are ordered sequentially left to right,
       starting at 1.
 
    c_type
       The C data type of the result data.  It must be one of the values
       listed in the syntax diagram.  The variable-length c_types require an
       additional parameter, elem_size, in order to specify the size of the
       column.
 
  Successful Result:
 
      Either a new matrix format is created or an existing matrix format is
      modified.  In both cases there is acknowledgement.
 
  Example:
 
 
 -- 61 --  of 202
      See the example with the DisplayFormat command on page 44.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 62 --  of 202
  1.8.33  SQLFreeConnect
 
  Free a connection handle.
 
 
  Note:   The connection must have be disconnected before its handle can be
          freed.
 
  Syntax:
 
    >>--SQLFreeConnect---hdbc--------------------------------------------------------------------------------><
 
  Parameters:
 
    hdbc
       The integer that identifies a connection handle.
 
  Successful Result:
 
      The connection handle is freed.  Also, Interactive CLI displays a
      return code of 0 indicating that the command was successful.
 
  Example:
 
      Given that there is an active connection (but no active transaction) on hdbc 3,
      then a typical sequence of commands and responses would be:
 
        >sqldisconnect 3
        SQLDisconnect: rc = 0 (SQL_SUCCESS)
        #
        >sqlfreeconnect 3
        SQLFreeConnect: rc = 0 (SQL_SUCCESS)
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 63 --  of 202
  1.8.34  SQLFreeEnv
 
  Free the environment handle.
 
 
  Notes:  The connection handle must have be freed before the environment
          handle can be freed.
 
          The KillEnv command can be used as a shortcut to free all handles
          and disconnect any active connection and then to free the
          environment.
 
  Syntax:
 
    >>--SQLFreeEnv---henv------------------------------------------------------------------------------------><
 
  Parameters:
 
    henv
       The integer that identifies the current environment handle.
 
  Successful Result:
 
      The environment handle is freed.  Also, Interactive CLI displays a
      return code of 0 indicating that the command was successful.
 
  Example:
 
      Given that there is no current connection handle, then the command:
 
        >sqlfreeenv 3
 
      would result in the response:
 
        SQLFreeEnv: rc = 0 (SQL_SUCCESS)
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 64 --  of 202
  1.8.35  FreeFileRef
 
  Free a LOB file reference buffer.
 
 
  Note:   When a statement is freed with the SQLFreeStmt command, all file
          reference buffers associated with that statement are freed.
 
  Syntax:
 
    >>--FreeFileRef---hfileref-------------------------------------------------------------------------------><
 
  Parameters:
 
    hfileref
       The integer that identifies the file reference buffer that is to be
       freed.
 
  Successful Result:
 
      The file reference memory buffer is freed (with acknowledgement).
 
  Example:
 
      Given that there is a file reference memory buffer 126 assigned to
      statement handle 22, then the command:
 
        >freefileref 126
 
      would result in the response:
 
        FreeFileRef: file reference 126 freed.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 65 --  of 202
  1.8.36  FreeMem
 
  Free a specific scalar memory buffer.
 
 
  Note:   When a statement is freed with the SQLFreeStmt command, all scalar
          memory buffers associated with that statement are freed.
 
  Syntax:
 
    >>--FreeMem---hmembuf------------------------------------------------------------------------------------><
 
  Parameters:
 
    hmembuf
       The integer that identifies the memory buffer that is to be freed.
 
  Successful Result:
 
      The memory buffer is freed (with acknowledgement).
 
  Example:
 
      Given that there is a memory buffer 400 assigned to statement
      handle 22, then the command:
 
        >freemem 400
 
      would result in the response:
 
        FreeMem: memory buffer 400 freed.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 66 --  of 202
  1.8.37  FreeMemArray
 
  Free a specific memory array buffer.
 
 
  Note:   When a statement is freed with the SQLFreeStmt command, all memory
          array buffers associated with that statement are freed.
 
  Syntax:
 
    >>--FreeMemArray---memarray_id---------------------------------------------------------------------------><
 
  Parameters:
 
    memarray_id
       The integer that identifies the memory array buffer that is to be
       freed.
 
  Successful Result:
 
      The memory array buffer is freed (with acknowledgement)
 
  Example:
 
      Given that there is a memory array buffer 269 assigned to statement
      handle 22, then the command:
 
        >freememarray 269
 
      would result in the response:
 
        FreeMemArray: memory array 269 freed.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 67 --  of 202
  1.8.38  FreeMemMatrix
 
  Free a specific memory matrix.
 
 
  Notes:  When a statement is freed with the SQLFreeStmt command, all memory
          matrix buffers associated with that statement are freed.
 
          Even though the matrix is freed, the matrix format that was used by
          that matrix remains.
 
  Syntax:
 
    >>--FreeMemMatrix---memmatrix_id-------------------------------------------------------------------------><
 
  Parameters:
 
    memmatrix_id
       The integer that identifies the memory matrix buffer that is to be
       freed.
 
  Successful Result:
 
      The memory matrix buffer is freed (with acknowledgement)
 
  Example:
    Given that there is a memory matrix buffer 5001 assigned to statement
    handle 22, then the command:
 
      >freememmatrix 5001
 
    would result in the response:
 
      FreeMemMatrix: memory matrix 5001 freed.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 68 --  of 202
  1.8.39  SQLFreeStmt
 
  Depending on the stmt_option chosen, this command is used to do one of the
  following things for a specific statement handle.
 
  o   Close the cursor that is associated with the handle.
 
  o   Free the handle.  Note that this also frees any memory buffers that are
      associated with the statement handle.
 
 
  o   Release all row buffers that are associated with the result set of the
      statement.
 
  o   Release all parameter buffers that are associated with the statement.
 
  Syntax:
 
    >>--SQLFreeStmt---hstmt----SQL_CLOSE---------------------------------------------------------------------><
                             |-SQL_DROP---------|
                             |-SQL_UNBIND-------|
                             +-SQL_RESET_PARAMS-+
 
                                 stmt_option
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle that is to be freed.
 
    stmt_option
 
       SQL_CLOSE
            Close the cursor that is associated with the hstht and discard
            any result set.
 
       SQL_DROP
            Free the handle.  This also closes any cursor and frees memory
            buffers
 
       SQL_UNBIND
            Release all row buffers that have been bound by SQLBindCol for
            this hstmt.  Note that the memory buffers remain, they just lose
            their association with columns in the result set.
 
       SQL_RESET_PARAMS
            Release all parameter buffers that have been bound by
            SQLBindParameter or SQLSetParam for this hstmt.  Note that the
            parameter buffers remain, they just lose their association with
            parameter markers in the prepared statement.
 
  Successful Result:
 
      This depends on the value of stmt_option:
 
        SQL_CLOSE:                The cursor, if any, is closed.
 
        SQL_DROP:                 The statement handle is freed.  Any
                                  associated memory buffers are also freed.
 
        SQL_UNBIND:               The row buffers for the statement, if any,
                                  are freed.  Note that this does not free
                                  any associated memory buffers.
 
 
 -- 69 --  of 202
        SQL_RESET_PARAMS:         The parameter buffers for the statement, if
                                  any, in the CLI implementation are freed.
                                  Note that this does not free any associated
                                  memory buffers.
 
      In all the above cases, a successful result is simply indicated by the
      display of a return code of either 0 (SQL_SUCCESS) or 1
      (SUCCESS_WITH_INFO).  There is no other feedback.
 
  Example:
 
      Given that -statement handles 44, 55, and 66 are in the cursor positioned state.
                 -memory arrays 551 to 557 are allocated to statement handle 55
                 -file reference buffer 5501 is allocated to statement handle 55
                 -memory arrays 661 to 667 are allocated to statement handle 66
                 -file reference buffer 6601 is allocated to statement handle 66
      then the following sequence of commands and responses is possible:
 
        >sqlfreestmt 44 sql_close
        SQLFreeStmt: rc = 0 (SQL_SUCCESS)
        #
        # observe that the memory buffers are retained when SQL_CLOSE is specified
        #
        >sqlfreestmt 55 sql_close
        SQLFreeStmt: rc = 0 (SQL_SUCCESS)
        #
        # with SQL_DROP all the memory buffers are freed as well
        #
        >sqlfreestmt 66 sql_drop
        SQLFreeStmt: rc = 0 (SQL_SUCCESS)
        FreeMemArray: memory array 661 freed.
        FreeMemArray: memory array 662 freed.
        FreeMemArray: memory array 663 freed.
        FreeMemArray: memory array 664 freed.
        FreeMemArray: memory array 665 freed.
        FreeMemArray: memory array 666 freed.
        FreeMemArray: memory array 667 freed.
        FreeFileRef: file reference 6601 freed.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 70 --  of 202
  1.8.40  SQLGetConnectOption
 
  Get the current value of a specific connection attribute.
 
  Syntax:
 
    >>--SQLGetConnectOption---hdbc----SQL_ACCESS_MODE--------------------------------------------------------><
                                    |-SQL_AUTOCOMMIT--------|   +-/testmask/-+
                                    |-SQL_CONNECTTYPE-------|
                                    |-SQL_CURRENT_QUALIFIER-|
                                    |-SQL_CURRENT_SCHEMA----|
                                    |-SQL_DB2ESTIMATE-------|
                                    |-SQL_DB2EXPLAIN--------|
                                    |-SQL_LOGIN_TIMEOUT-----|
                                    |-SQL_LONGDATA_COMPAT---|
                                    |-SQL_MAXCONN-----------|
                                    |-/SQL_OPT_TRACE/---------|
                                    |-/SQL_OPT_TRACEFILE/-----|
                                    |-/SQL_PACKET_SIZE/-------|
                                    |-SQL_QUIET_MODE--------|
                                    |-SQL_SYNC_POINT--------|
                                    |-/SQL_TRANSLATE_DDL/-----|
                                    |-/SQL_TRANSLATE_OPTION/--|
                                    |-SQL_TXN_ISOLATION-----|
                                    +-SQL_WCHAR_TYPE--------+
 
                                             option
 
  Parameters:
 
    hdbc
       The integer that identifies the connection handle of the connection
       whose attribute is being queried.
 
    option
       One of the values shown in the syntax diagram.  For a description of
       most of these values, refer to Table 123 starting on page 341 of the
       V2.1 DB2 CLI Guide and Reference.
 
  Successful Result:
 
      The value of the attribute is displayed.  Also, Interactive CLI
      displays a return code of either 0 (SQL_SUCCESS) or 1
      (SUCCESS_WITH_INFO).
 
  Example:
 
      See the example with the SQLSetConnectOption command on page 148.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 71 --  of 202
  1.8.41  SQLGetCursorName
 
  Get the name of a cursor that is associated with a specific statement.
 
  The reason for this command is to enable one to obtain the name that CLI
  automatically generated for a cursor in order that the proper name may be
  used when preparing a subsequent Positioned DELETE or Positioned UPDATE
  statement.
 
  Syntax:
 
                                  +-19--------------------+
    >>--SQLGetCursorName---hstmt--+-----------------------+--------------------------------------------------><
                                  +-cursor_name_maxlength-+
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle to which the cursor
       is linked.
 
    cursor_name_max_length
       An integer indicating how many characters of the cursor name are to be
       displayed.
 
       This parameter is only present for IBM people who are testing our CLI
       Driver.  No value need be specified since there is a default value of
       19 and the maximum value supported is 19.
 
  Successful Result:
 
      The name of the cursor is displayed (as the value in double quotes to
      the right of 'cursorName =' in the response lines).  Also, Interactive
      CLI displays a return code of either 0 (SQL_SUCCESS) or 1
      (SUCCESS_WITH_INFO).
 
  Example:
 
      Given that -the database contains the DEPARTMENT table that is shipped in the
                  IBMSAMPL database with DB2/6000
                 -there is an unused statement handle with a value of 22
      then the following sequence of commands and responses is possible:
 
        >sqlexecdirect 22 "select * from department" sql_nts
        SQLExecDirect: rc = 0 (SQL_SUCCESS)
        #
        >sqlgetcursorname 22
        SQLGetCursorName: rc = 0 (SQL_SUCCESS)
        SQLGetCursorName:    cursorName = "SQLCUR1"
        SQLGetCursorName:    cbCursor   = 7
 
      The name of the cursor is SQLCUR1.  Because no cursor name had
      assigned to the statement handle before the SQLExecDirect
      command was executed, a name was automatically generated.  Note
      that the cbCursor value is simply the length of the cursor name.
 
      Contrast this example with the SQLSetCursorName example on page 149.
 
 
 
 
 
 
 
 
 -- 72 --  of 202
  1.8.42  SQLGetData
 
  Retrieve data from one unbound column of the current row a result set.
 
  A major use of this command is to retrieve large character strings
  iteratively in small chunks.
 
  Syntax:
 
    >>--SQLGetData---hstmt---column----SQL_C_CHAR---------------hmembuf--------------------------------------><
                                     |-SQL_C_DBCHAR---------|             +-FILE---filename-+
                                     |-SQL_C_SHORT----------|
                                     |-SQL_C_USHORT---------|
                                     |-SQL_C_SSHORT---------|
                                     |-SQL_C_LONG-----------|
                                     |-SQL_C_ULONG----------|
                                     |-SQL_C_SLONG----------|
                                     |-SQL_C_DOUBLE---------|
                                     |-SQL_C_FLOAT----------|
                                     |-SQL_C_DATE-----------|
                                     |-SQL_C_TIME-----------|
                                     |-SQL_C_TIMESTAMP------|
                                     |-SQL_C_BINARY---------|
                                     |-SQL_C_BIT------------|
                                     |-SQL_C_TINYINT--------|
                                     |-SQL_C_UTINYINT-------|
                                     |-SQL_C_STINYINT-------|
                                     |-SQL_C_BLOB_LOCATOR---|
                                     |-SQL_C_CLOB_LOCATOR---|
                                     |-SQL_C_DBCLOB_LOCATOR-|
                                     |                      |
                                     +-SQL_C_DEFAULT--------+
 
                                              c_type
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle of the statement for
       which the column is to be retrieved.
 
    column
       Column number within the result set, ordered sequentially left to
       right, starting at 1.
 
    c_type
       The C data type of the result data.  It must be one of the values
       listed in the syntax diagram.
 
       Since the memory buffer already has a c_type, this is a redundant
       spec.  It is present because IBM programmers require it to test our
       CLI Driver code.  This should be specified to be the same as the data
       type of the memory buffer (but, if different, the value specified here
       is used).
 
    hmembuf
       The integer that identifies the handle of the memory buffer which is
       to be used to receive the data.
 
    FILE file_name
       If a file_name is specified the data is written to a file rather than
       displayed on the screen.
 
 
 
 -- 73 --  of 202
       If the file does not exist, a new file is created.
 
       If an existing file is specified, the data is appended as a new line
       at the end of the file.
 
  Successful Result:
 
  o   Either:  The data is retrieved and the results are displayed (along
      with a return code of either 0 (SQL_SUCCESS) or 1 (SUCCESS_WITH_INFO).
 
      Note that when using SQLGetData to retrieve a long character string in
      smaller pieces, the value of the CLI parameter 'cbValue' that appears
      in the display should be checked.  'cbValue' contains the length of the
      string that was remaining before the function was called in the last
      iteration.  This (somewhat convoluted, but useful) semantic can best be
      understood by example, so we have provided one.
 
      If the value of the data being retrieved is the SQL null value, then
      'cbValue' is -1.
 
  o   Or:  A return code of 100 (that is, SQL_NO_DATA_FOUND) is displayed to
      indicate that the end of the string was reached on the previous call.
 
  Example:
 
      Given that - the prepared statement used to create a result set is:
                      select ALPHABET from CONTRIVED_EXAMPLE_TABLE
                 - the value of the hstmt is 50
                 - there is only one row and one column in the table, the data
                   type of that column is CHAR(26), and the value of that
                   column in the single row is 'abcdefghijklmnopqrstuvwxyz'.
                 - the column in the result set is not bound.
      then a valid sequence of commands and responses would be:
 
        >sqlfetch 50
        SQLFetch: rc = 0 (SQL_SUCCESS)
        #
        # Allocate memory buffer 501 for statement handle 50
        #
        >getmem 50 501 SQL_CHAR 7
        #
        # get the first 6 characters
        #
        >sqlgetdata 50 1 SQL_C_CHAR 501
        SQLGetData: rc = 0 (SQL_SUCCESS)
        Input C Buffer Type: SQL_C_CHAR
        Contents: "abcdef"
        cbValue = 26
        #
        # get the next 6 characters
        #
        >sqlgetdata 50 1 SQL_C_CHAR 501
        SQLGetData: rc = 0 (SQL_SUCCESS)
        Input C Buffer Type: SQL_C_CHAR
        Contents: "ghijkl"
        cbValue = 20
        #
        # get the next 6 characters
        #
        >sqlgetdata 50 1 SQL_C_CHAR 501
        SQLGetData: rc = 0 (SQL_SUCCESS)
        Input C Buffer Type: SQL_C_CHAR
        Contents: "mnopqr"
 
 
 -- 74 --  of 202
        cbValue = 14
        #
        # get the next 6 characters
        #
        >sqlgetdata 50 1 SQL_C_CHAR 501
        SQLGetData: rc = 0 (SQL_SUCCESS)
        Input C Buffer Type: SQL_C_CHAR
        Contents: "stuvwx"
        cbValue = 8
        #
        # get the last 2 characters
        #
        >sqlgetdata 50 1 SQL_C_CHAR 501
        SQLGetData: rc = 0 (SQL_SUCCESS)
        Input C Buffer Type: SQL_C_CHAR
        Contents: "yz"
        cbValue = 2
        #
        # try again
        #
        >sqlgetdata 50 1 SQL_C_CHAR 501
        SQLGetData: rc = 100 (SQL_NO_DATA)
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 75 --  of 202
  1.8.43  SQLGetEnvAttr
 
  Get the current value of a specific environment attribute.
 
  Syntax:
 
    >>--SQLGetEnvAttr---henv-----SQL_ATTR_OUTPUT_NTS---------------------------------------------------------><
                               |-SQL_CONNECTTYPE-----|   +-attribute_value_length----------------+
                               |-SQL_MAXCONN---------|                              +-/testmask/-+
                               +-SQL_SYNC_POINT------+
 
                                      attribute
 
  Parameters:
 
    henv
       The integer that identifies the current environment handle.
 
    attribute
       One of the values shown in the syntax diagram.  For a description of
       these values, refer to Table 128 starting on page 355 of the V2.1 DB2
       CLI Guide and Reference.
 
    attribute_value_length
       Currently not used because none of the values for the supported
       attributes are strings.
 
  Successful Result:
 
      The value of the attribute is displayed.  Also, Interactive CLI
      displays a return code of either 0 (SQL_SUCCESS) or 1
      (SUCCESS_WITH_INFO).
 
  Example:
 
      See the example with the SQLSetEnvAttr command on page 150.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 76 --  of 202
  1.8.44  GetFileRef
 
  Create a LOB file reference buffer.  The command also indicates whether the
  file reference buffer that is specified is to be used to reference a single
  file or an array of files.
 
  Syntax:
 
                                        +-ARRAYSIZE---1---MAXFILENAMELENGTH---256--------------+
    >>--GetFileRef---hstmt---hfileref---+--------------------------------------------------------------------><
                                        |                     +-MAXFILENAMELENGTH---256----+ |
                                        +-ARRAYSIZE---elems---+----------------------------+-+
                                                              +-MAXFILENAMELENGTH---length-+
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle to which the file
       reference buffer is to be assigned.
 
    hfileref
       An integer that will be used to identify the file reference buffer on
       subsequent commands.
 
    ARRAYSIZE elems
       An integer that specifies the number of elements in the array.
 
    MAXFILENAMELENGTH length
       An integer that identifies the maximum size of complete file name
       including the path (whether specified or defaulted to).  Note that one
       extra byte must be included for the nul-terminator.
 
  Successful Result:
 
      The file reference buffer is created (with acknowledgement).
 
  Example 1:
 
      Given the existence of a statement handle identified by 77 that is in the allocated
      state, then a valid sequence of commands and responses would be:
 
        >getfileref 77  5000
        GetFileRef: file reference 5000 for statement handle 77 allocated.
        #
        >getfileref 77  5001  arraysize 3
        GetFileRef: file reference 5000 for statement handle 77 allocated.
 
      No array size or name length was specified for buffer 5000, so a scalar
      buffer is created with the default maximum file name length of 256.
      5001 is created as a 3 element array also with the default maximum
      file name length of 256.
 
  Example 2:
 
      See Example 2 for SQLExtendedFetch on page 56
 
 
 
 
 
 
 
 
 
 
 -- 77 --  of 202
  1.8.45  SQLGetFunctions
 
  Used to inquire as to whether a specific function is supported on a
  specified connection.
 
  This is primarily for the use of applications that want to code to several
  different ODBC drivers so is of little or no practical use within IBM
  Interactive CLI.  It is simply here for completeness.
 
  Syntax:
 
    >>--SQLGetFunctions---hdbc---function--------------------------------------------------------------------><
 
  Parameters:
 
    hdbc
       The integer that identifies the connection handle of the connection
       whose function support is being queried.  There has to be an active
       connection on the handle.
 
    function
       An integer that identifies the #define number that has been assigned
       to each function.  The numbers assigned to the functions defined by
       any of DB2 CLI, Microsoft ODBC Version 2, the X/Open CLI Common
       Application Environment, and the ISO CLI Draft International Standard
       are listed below together with the constants #defined for the numbers:
 
       Note that the number, not the actual #define constant, must be coded
       here.
 
                                                     DB2   ODBC  X/Open  ISO
                                                     ---   ----  ------  ---
            SQL_API_SQLALLOCCONNECT            1     X     X     X       X
            SQL_API_SQLALLOCENV                2     X     X     X       X
            SQL_API_SQLALLOCHANDLE          1001     -     -     X       X
            SQL_API_SQLALLOCSTMT               3     X     X     X       X
 
            SQL_API_SQLBINDCOL                 4     X     X     X       X
            SQL_API_SQLBINDFILETOCOL        1250     X     -     -       -
            SQL_API_SQLBINDFILETOPARAM      1251     X     -     -       -
            SQL_API_SQLBINDPARAM              22     -     -     X       X
            SQL_API_SQLBINDPARAMETER          72     X     X     -       -
            SQL_API_SQLBROWSECONNECT          55     -     X     -       -
 
            SQL_API_SQLCANCEL                  5     X     X     X       X
            SQL_API_SQLCLOSECURSOR          1003     -     -     X       X
            SQL_API_SQLCOLATTRIBUTE            6     -     -     X       X
            SQL_API_SQLCOLATTRIBUTES           6     X     X     -       -
            SQL_API_SQLCOLUMNPRIVILEGES       56     X     X     -       -
            SQL_API_SQLCOLUMNS                40     X     X     X       -
            SQL_API_SQLCONNECT                 7     X     X     X       X
            SQL_API_SQLCOPYDESC             1004     -     -     X       X
 
            SQL_API_SQLDATASOURCES            57     X     X     X       ?
            SQL_API_SQLDESCRIBECOL             8     X     X     X       X
            SQL_API_SQLDESCRIBEPARAM          58     -     X     -       -
            SQL_API_SQLDISCONNECT              9     X     X     X       X
            SQL_API_SQLDRIVERCONNECT          41     X     X     -       -
            SQL_API_SQLDRIVERS                71     -     X     -       -
 
            SQL_API_SQLENDTRAN              1005     -     -     X       X
            SQL_API_SQLERROR                  10     X     X     X       X
            SQL_API_SQLEXECDIRECT             11     X     X     X       X
 
 
 -- 78 --  of 202
            SQL_API_SQLEXECUTE                12     X     X     X       X
            SQL_API_SQLEXTENDEDFETCH          59     X     X     -       -
 
            SQL_API_SQLFETCH                  13     X     X     X       X
            SQL_API_SQLFETCHSCROLL          1021     -     -     X       X
            SQL_API_SQLFOREIGNKEYS            60     X     X     -       -
            SQL_API_SQLFREECONNECT            14     X     X     X       X
            SQL_API_SQLFREEENV                15     X     X     X       X
            SQL_API_SQLFREEHANDLE           1006     -     -     X       X
            SQL_API_SQLFREESTMT               16     X     X     X       X
 
            SQL_API_SQLGETCONNECTATTR       1007     -     -     X       X
            SQL_API_SQLGETCONNECTOPTION       42     X     X     X       -
            SQL_API_SQLGETCURSORNAME          17     X     X     X       X
            SQL_API_SQLGETDATA                43     X     X     X       X
            SQL_API_SQLGETDESCFIELD         1008     -     -     X       X
            SQL_API_SQLGETDESCREC           1009     -     -     X       X
            SQL_API_SQLGETDIAGFIELD         1010     -     -     X       X
            SQL_API_SQLGETDIAGREC           1011     -     -     X       X
            SQL_API_SQLGETENVATTR           1012     X     -     X       X
            SQL_API_SQLGETFUNCTIONS           44     X     X     X       X
            SQL_API_SQLGETINFO                45     X     X     X       X
            SQL_API_SQLGETLENGTH            1022     X     -     -       -
            SQL_API_SQLGETPOSITION          1023     X     -     -       -
            SQL_API_SQLGETSQLCA             1253     X     -     -       -
            SQL_API_SQLGETSTMTATTR          1014     -     -     X       X
            SQL_API_SQLGETSTMTOPTION          46     X     X     X       -
            SQL_API_SQLGETSUBSTRING         1024     X     -     -       -
            SQL_API_SQLGETTYPEINFO            47     X     X     X       X
            SQL_API_SQLGETNUMRESULTCOLS       18     X     X     X       X
 
            SQL_API_SQLMORERESULTS            61     X     X     -       -
 
            SQL_API_SQLNATIVESQL              62     X     X     -       -
            SQL_API_SQLNUMPARAMS              63     X     X     -       -
 
            SQL_API_SQLPARAMDATA              48     X     X     X       X
            SQL_API_SQLPARAMOPTIONS           64     X     X     -       -
            SQL_API_SQLPREPARE                19     X     X     X       X
            SQL_API_SQLPRIMARYKEYS            65     X     X     -       -
            SQL_API_SQLPROCEDURECOLUMNS       66     X     X     -       -
            SQL_API_SQLPROCEDURES             67     X     X     -       -
            SQL_API_SQLPUTDATA                49     X     X     X       X
 
            SQL_API_SQLRELEASEENV           1015     X     -     X       X
            SQL_API_SQLROWCOUNT               20     X     X     X       X
 
            SQL_API_SQLSETCOLATTRIBUTES     1252     X     -     -       -
            SQL_API_SQLSETCONNECTATTR       1016     -     -     X       X
            SQL_API_SQLSETCONNECTOPTION       50     X     X     X       -
            SQL_API_SQLSETCURSORNAME          21     X     X     X       X
            SQL_API_SQLSETDESCFIELD         1017     -     -     X       X
            SQL_API_SQLSETDESCREC           1018     -     -     X       X
            SQL_API_SQLSETENVATTR           1019     X     -     X       X
            SQL_API_SQLSETPARAM               22     X     X     X       -
            SQL_API_SQLSETPOS                 68     -     X     -       -
            SQL_API_SQLSETSCROLLOPTIONS       69     X     X     -       -
            SQL_API_SQLSETSTMTATTR          1020     -     -     X       X
            SQL_API_SQLSETSTMTOPTION          51     X     X     X       -
            SQL_API_SQLSPECIALCOLUMNS         52     X     X     X       -
            SQL_API_SQLSTATISTICS             53     X     X     X       -
 
            SQL_API_SQLTABLEPRIVILEGES        70     X     X     -       -
 
 
 -- 79 --  of 202
            SQL_API_SQLTABLES                 54     X     X     X       -
            SQL_API_SQLTRANSACT               23     X     X     X       -
 
       The value 0 (whose #define value is SQL_API_ALL_FUNCTIONS) can be
       specified as an alternative.  The effect is the same as if the command
       had been submitted 72 times with the value of function equal to 1 the
       first time, equal to 2, the second time, up to 72.  Functions with
       numbers higher than 72 are not shown.
 
  Successful Result:
 
      Either TRUE or FALSE is displayed.  Also Interactive CLI displays a
      return code of 0 indicating that the command was successful.
 
  Example:
 
      Given that the current hdbc value is 3, then the commands shown
      below would give rise to the results that follow.
 
        # see if the SQLFetchScroll function is supported by the IBM CLI
        # Driver
        #
        >sqlgetfunctions 3 1021
        SQLGetFunctions: rc = 0 (SQL_SUCCESS)
             Supported : FALSE
        #
        # see if the SQLGetData function is supported by the IBM CLI Driver
        #
        >sqlgetdata 3 43
        SQLGetFunctions: rc = 0 (SQL_SUCCESS)
             Supported : TRUE
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 80 --  of 202
  1.8.46  SQLGetInfo
 
  Used to inquire as to whether one of a long list of facilities is supported
  by the driver and the database manager associated with one of the
  connections previously established by Interactive CLI.
 
  This is primarily for the use of applications that want to code to several
  different ODBC drivers but, unlike SQLGetFunctions, it may have some
  limited usefulness within IBM Interactive CLI.
 
  Syntax:
 
                                       +-50-------------+
    >>--SQLGetInfo---hdbc---info_type--+----------------+----------------------------------------------------><
                                       +-info_maxlength-+
 
  Parameters:
 
    hdbc
       The integer that identifies the connection handle of an active
       connection.
 
    info_type
       An integer that identifies the #define number that has been assigned
       to each of the ODBC defined facilities.  A list of the values and
       their found in any of the associated numbers follows.  Refer to Table
       76 starting on page 248 of the V2.1 DB2 CLI Guide and Reference for a
       description of each of these values.
 
       Note that the number, not the actual #define constant, must be coded
       here.
 
            SQL_ACCESSIBLE_PROCEDURES           20
            SQL_ACCESSIBLE_TABLES               19
            SQL_ACTIVE_CONNECTIONS               0
            SQL_ACTIVE_STATEMENTS                1
            SQL_ALTER_TABLE                     86
 
            SQL_BOOKMARK_PERSISTENCE            82
 
            SQL_CATALOG  _NAME_SEPARATOR        41
               _QUALIFIER                       41
 
            SQL_CATALOG  _TERM                  42
               _QUALIFIER                       42
 
            SQL_COLUMN_ALIAS                    87
            SQL_CONCAT_NULL_BEHAVIOR            22
            SQL_CONVERT_FUNCTIONS               48
            SQL_CONVERT_...                     53 to 71  (none are supported)
            SQL_CORRELATION_NAME                74
            SQL_CURSOR_COMMIT_BEHAVIOR          23
            SQL_CURSOR_ROLLBACK_BEHAVIOR        24
            SQL_DATA_SOURCE_READ_ONLY           25
            SQL_DATA_SOURCE_NAME                 2
            SQL_DATABASE_NAME                   16
            SQL_DBMS_NAME                       17
            SQL_DBMS_VER                        18
            SQL_DEFAULT_TXN_ISOLATION           26
            SQL_DRIVER_HDBC                      3
            SQL_DRIVER_HENV                      4
            SQL_DRIVER_HLIB                     76
            SQL_DRIVER_HSTMT                     5
 
 
 -- 81 --  of 202
            SQL_DRIVER_NAME                      6
            SQL_DRIVER_ODBC_VER                 77
            SQL_DRIVER_VER                       7
 
            SQL_EXPRESSIONS_IN_ORDERBY          27
 
            SQL_FETCH_DIRECTION                  8
            SQL_FILE_USAGE                      84
 
            SQL_GETDATA_EXTENSIONS              81
            SQL_GROUP_BY                        88
 
            SQL_IDENTIFIER_CASE                 28
            SQL_IDENTIFIER_QUOTE_CHAR           29
 
            SQL_KEYWORDS                        89
 
            SQL_LIKE_ESCAPE_CLAUSE             113
            SQL_LOCK_TYPES                      78
 
            SQL_MAX_BINARY_LITERAL_LEN         112
 
            SQL_MAX_CATALOG  _NAME_LEN          34
                   _QUALIFIER                   34
 
            SQL_MAX_COLUMN_NAME_LEN             30
            SQL_MAX_COLUMNS_IN_GROUP_BY         97
            SQL_MAX_COLUMNS_IN_INDEX            98
            SQL_MAX_COLUMNS_ORDER_BY            99
            SQL_MAX_COLUMNS_SELECT             100
            SQL_MAX_COLUMNS_TABLE              101
            SQL_MAX_CURSOR_NAME_LEN             31
            SQL_MAX_CURSOR_INDEX_SIZE          102
            SQL_MAX_PROCEDURE_NAME_LEN          33
            SQL_MAX_ROW_SIZE                   104
            SQL_MAX_ROW_SIZE_INCLUDES_LONG     103
 
            SQL_MAX_SCHEMA_NAME_LEN             32
                   _OWNER                       32
 
            SQL_MAX_STATEMENT_LEN              105
            SQL_MAX_TABLE_NAME_LEN              35
            SQL_MAX_TABLES_IN_SELECT           106
            SQL_MAX_USER_NAME_LEN              107
            SQL_MULT_RESULT_SETS                36
            SQL_MULTIPLE_ACTIVE_TXN             37
 
            SQL_NEED_LONG_DATA_LEN             111
            SQL_NON_NULLABLE_COLUMNS            75
            SQL_NULL_COLLATIONS                 85
 
            SQL_NUMERIC_FUNCTIONS               49
 
            SQL_ODBC_API_CONFORMANCE             9
            SQL_ODBC_SAG_CLI_CONFORMANCE        12
            SQL_ODBC_SQL_CONFORMANCE            15
            SQL_ODBC_SQL_OPT_IEF                73
            SQL_ODBC_VER                        10
 
            SQL_OJ_CAPABILITIES              65003
            SQL_ORDER_BY_COLUMNS_IN_SELECT      90
            SQL_OUTER_JOINS                     38
 
 
 
 -- 82 --  of 202
            SQL_PROCEDURE_TERM                  40
            SQL_PROCEDURES                      21
 
            SQL_QUALIFIER_USAGE                 92
            SQL_QUOTED_IDENTIFIER_CASE          93
 
            SQL_ROW_UPDATES                     11
 
            SQL_SCHEMA_TERM                     39
               _OWNER                           39
 
            SQL_SCROLL_CONCURRENCY              43
            SQL_SCROLL_OPTIONS                  44
            SQL_SEARCH_PATERN_ESCAPE            14
            SQL_SERVER_NAME                     13
            SQL_SPECIAL_CHARACTERS              94
            SQL_STATIC_SENSITIVITY              83
            SQL_STRING_FUNTIONS                 50
            SQL_SUBQUERIES                      95
            SQL_SYSTEM_FUNCTIONS                51
 
            SQL_TABLE_TERM                      45
            SQL_TIMEDATE_ADD_INTERVALS         109
            SQL_TIMEDATE_DIFF_INTERVALS        110
            SQL_TIMEDATE_FUNCTIONS              52
            SQL_TXN_CAPABLE                     46
            SQL_TXN_ISOLATION_OPTION            72
 
            SQL_UNION                           96
            SQL_USER_NAME                       47
 
    info_maxlength
       An integer specifying the maximum number of bytes of information that
       are to be displayed.
 
  Successful Result:
 
      The requested information is displayed.  Also, Interactive CLI displays
      a return code of either 0 (SQL_SUCCESS) or 1 (SUCCESS_WITH_INFO).
 
  Example:
 
      Given that an active connection is identified by 8 and that it
      is connected to the IBMSAMPL database that is shipped with DB2(cs).
 
      then the following sequence of commands and responses is possible:
 
        # find the name of the data source.
        #
        >sqlgetinfo 8  2  20
        SQLGetInfo: rc = 0 (SQL_SUCCESS)
            actual size of info = 8
            type {2} : info = "IBMSAMPL"
        #
        # find out whether or not names are case sensitive (4 means NO)
        #
        >sqlgetinfo 8  28  20
        SQLGetInfo: rc = 0 (SQL_SUCCESS)
            actual size of info = 2
            type {28} : info = 4
 
 
 
 
 
 -- 83 --  of 202
  1.8.47  GetInfoAll
 
  Display all the information that is available using the SQLGetInfo command.
  The effect is the same as if SQLGetInfo had been invoked once for every
  supported value of info_type
 
  Syntax:
 
    >>--GetInfoAll---hdbc------------------------------------------------------------------------------------><
 
  Parameters:
 
    hdbc
       The integer that identifies the connection handle of an active
       connection.
 
  Successful Result:
 
        The information for all valid values of infotype for the SQLGetInfo()
      function is dispalyed.
 
  Example:
 
      Given that an active connection is identified by 2 and that it is connected to the PUB database.
        #
        >getinfoall 2
        SQLGetInfo: rc = 0 (SQL_SUCCESS)
            actual size of info = 2
            Type {0} : info = 0
        SQLGetInfo: rc = 0 (SQL_SUCCESS)
            actual size of info = 2
            Type {1} : info = 0
        SQLGetInfo: rc = 0 (SQL_SUCCESS)
            actual size of info = 3
            Type {2} : info = "PUB"
        SQLGetInfo: rc = 0 (SQL_SUCCESS)
            actual size of info = 4
            Type {3} : info = 1
        SQLGetInfo: rc = 0 (SQL_SUCCESS)
            actual size of info = 4
            Type {4} : info = 1
        SQLGetInfo: rc = 0 (SQL_SUCCESS)
            actual size of info = 8
            Type {6} : info = "libdb2.a"
        .
        .  information for a lot of info_types
        .
 
        SQLGetInfo: rc = 0 (SQL_SUCCESS)
            actual size of info = 1
            Type {111} : info = "N"
        SQLGetInfo: rc = 0 (SQL_SUCCESS)
            actual size of info = 4
            Type {112} : info = 4000
        SQLGetInfo: rc = 0 (SQL_SUCCESS)
            actual size of info = 1
            Type {113} : info = "Y"
        SQLGetInfo: rc = 0 (SQL_SUCCESS)
            actual size of info = 2
            Type {114} : info = 1
        SQLGetInfo: rc = 0 (SQL_SUCCESS)
            actual size of info = 4
            Type {65003} : info = (hex) 0
 
 
 -- 84 --  of 202
  1.8.48  SQLGetLength
 
  Display the length of a value that is referenced by a LOB locator.
 
  Syntax:
 
    >>--SQLGetLength---hstmt----SQL_C_BLOB_LOCATOR------locator_hmembuf--------------------------------------><
                              |-SQL_C_CLOB_LOCATOR---|                    +-/testmask/-+
                              +-SQL_C_DBCLOB_LOCATOR-+
 
                                    locator_c_type
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle that is used to
       report any errors that might result from the processing of this
       command.
 
    locator_c_type
       The C type of the LOB locator.
 
    locator_hmembuf
       The integer that identifies the scalar memory buffer that contains the
       LOB locator value.
 
  Successful Result:
 
      Unless the value of the LOB is null, its length is displayed.  Note
      that 0 is displayed if LOB's value is an empty string.  If the value of
      the LOB is null, the length will be zero (the value of the indicator
      argument (which is also displayed) will be -1 in this case).  In all
      cases, Interactive CLI also displays a return code of either 0
      (SQL_SUCCESS) or 1 (SUCCESS_WITH_INFO).
 
  Example:
 
      See the example with SQLGetSubString on page 100.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 85 --  of 202
  1.8.49  GetMem
 
  Create a scalar memory buffer, "name" it with a unique identifying integer
  and assign a C data type to that buffer.
 
 
  Note:   When first created, the value in the memory buffer is an empty
          string for a SQL_C_CHAR type memory buffer and all zeros for all
          other types of memory buffers.  If the memory buffer is to be used
          for input to the database manager with an SQLExecute or
          SQLExecDirect call, the UpdateMem command should first be used to
          assign an appropriate value to the memory buffer.
 
  Syntax:
 
    >>--GetMem---hstmt---hmembuf-----SQL_C_CHAR---size-------------------------------------------------------><
                                   |-SQL_C_DBCHAR---size--|
                                   |-SQL_C_SHORT----------|
                                   |-SQL_C_USHORT---------|
                                   |-SQL_C_SSHORT---------|
                                   |-SQL_C_LONG-----------|
                                   |-SQL_C_ULONG----------|
                                   |-SQL_C_SLONG----------|
                                   |-SQL_C_DOUBLE---------|
                                   |-SQL_C_FLOAT----------|
                                   |-SQL_C_DATE-----------|
                                   |-SQL_C_TIME-----------|
                                   |-SQL_C_TIMESTAMP------|
                                   |-SQL_C_BINARY---size--|
                                   |-SQL_C_BIT------------|
                                   |-SQL_C_TINYINT--------|
                                   |-SQL_C_UTINYINT-------|
                                   |-SQL_C_STINYINT-------|
                                   |-SQL_C_BLOB_LOCATOR---|
                                   |-SQL_C_CLOB_LOCATOR---|
                                   +-SQL_C_DBCLOB_LOCATOR-+
 
                                            c_type
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle to which the scalar
       memory buffer is to be assigned.
 
    hmembuf
       An integer that will be used to identify the scalar memory buffer on
       subsequent commands.
 
    c_type
       The C data type of the data that will be stored in the scalar memory
       buffer.  It must be one of the values listed in the syntax diagram.
       The variable-length c_types require an additional parameter,
       elem_size, in order to specify the size of the buffer.
 
  Successful Result:
 
      The memory buffer is created (with acknowledgement).
 
  Example:
 
      See the example with the SQLPrepare command on page 124.
 
 
 
 -- 86 --  of 202
  1.8.50  GetMemArray
 
  Create a memory array, "name" it with a unique identifying integer and
  assign a C data type to the values therein.
 
  Syntax:
 
    >>--GetMemArray---hstmt---memarray_id---total_elems----SQL_C_CHAR---elem_size----------------------------><
                                                         |-SQL_C_DBCHAR---elem_size-|
                                                         |-SQL_C_SHORT--------------|
                                                         |-SQL_C_USHORT-------------|
                                                         |-SQL_C_SSHORT-------------|
                                                         |-SQL_C_LONG---------------|
                                                         |-SQL_C_ULONG--------------|
                                                         |-SQL_C_SLONG--------------|
                                                         |-SQL_C_DOUBLE-------------|
                                                         |-SQL_C_FLOAT--------------|
                                                         |-SQL_C_DATE---------------|
                                                         |-SQL_C_TIME---------------|
                                                         |-SQL_C_TIMESTAMP----------|
                                                         |-SQL_C_BINARY---elem_size-|
                                                         |-SQL_C_BIT----------------|
                                                         |-SQL_C_TINYINT------------|
                                                         |-SQL_C_UTINYINT-----------|
                                                         |-SQL_C_STINYINT-----------|
                                                         |-SQL_C_BLOB_LOCATOR-------|
                                                         |-SQL_C_CLOB_LOCATOR-------|
                                                         +-SQL_C_DBCLOB_LOCATOR-----+
 
                                                                c_type
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle to which the memory
       array buffer is to be assigned.
 
    memarray_id
       An integer that will be used to identify the memory array buffer on
       subsequent commands.
 
    total_elms
       An integer specifying the number of elements in the array.
 
       Note that it is possible to bind arrays of different sizes to the same
       statement handle at the same time but none of those arrays should have
       fewer elements than the value of the SQL_ROWSET_SIZE statement option
       when fetching into those arrays or fewer elements than the value
       specified for array_size on the SQLParamOptions command when obtaining
       parameter values from those arrays during statement execution.  Either
       one of these situations is likely to a crash.
 
    c_type
       The C data type of the data that will be stored in the memory array
       buffer.  It must be one of the values listed in the syntax diagram.
       The variable-length c_types require an additional parameter,
       elem_size, in order to specify the size of each individual element in
       the array.
 
  Successful Result:
 
      The memory buffer is created (with acknowledgement).
 
 
 
 -- 87 --  of 202
  Example:
 
      See the example with the UpdateElem command on page 169
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 88 --  of 202
  1.8.51  GetMemMatrix
 
  Create a memory matrix, "name" it with a unique identifying integer and
  assign a format to that matrix
 
  Syntax:
 
    >>--GetMemMatrix---hstmt---matrixformat_id---memmatrix_id---total_rows-----------------------------------><
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle to which the memory
       matrix buffer is to be assigned.
 
    matrixformat_id
       The integer that idetifies the matrix format that is to be used to
       define the columns within this memory matric buffer.
 
    memmatrix_id
       An integer that will be used to identify the memory matrix buffer on
       subsequent commands.
 
    total_rows
       An integer that specifies to number of rows in the matrix.
 
  Successful Result:
 
      The memory buffer is created (with acknowledgement).
 
  Example:
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 89 --  of 202
  1.8.52  GetParamIndex
 
  Get the value of the index on the array of input parameters after the
  execution of a statement that uses such an array in order to find out how
  many of the sets of parameters in the array were successfully processed.
  That is, this contains the defered output value of the pirow argument of
  the SQLParamOptions() function.
 
  Syntax:
 
    >>--GetParamIndex---hstmt--------------------------------------------------------------------------------><
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle of the statement with
       which the input parameters were used.
 
  Successful Result:
 
 
 
  Example:
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 90 --  of 202
  1.8.53  SQLGetPosition
 
  Display the starting position of a string (search string:) within another
  string (source string).  The search string can be either a literal or a
  value referenced by a LOB locator.  The source string must be a value
  referenced by a LOB locator.
 
  Syntax:
 
    >>--SQLGetPosition---hstmt-----SQL_C_BLOB_LOCATOR------source_hmembuf---FROM---LITERAL------------------->
                                 |-SQL_C_CLOB_LOCATOR---|                        +-LOCATOR-+
                                 +-SQL_C_DBCLOB_LOCATOR-+
 
                                      locator_c_type
 
 
                  >--search_hmembuf---from_position----------------------------------------------------------><
                                                      +-/testmask/-+
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle that is used to
       report any errors that might result from the processing of this
       command.
 
    locator_c_type
       The C type of the LOB locator(s).
 
    source_hmembuf
       The integer that identifies the scalar memory buffer that contains the
       LOB locator value of the source string.
 
    FROM LITERAL | FROM LOCATOR
       One of:
 
         FROM LITERAL
            The value in the scalar buffer identified by search_hmembuf is a
            literal
 
         FROM LOCATOR
            The value in the scalar buffer identified by search_hmembuf is a
            LOB locator.
 
    search_hmembuf
       The integer that identifies the scalar memory buffer that contains
       either literal to use as the search string of the LOB locator that
       identifies the search string.
 
    from_position
       An integer that identifies the byte/character within the source string
       where the search is to start.
 
  Successful Result:
 
      Either the position is displayed, or the value 0 is displayed to
      indicate that the search string was not found within the source string.
      Another posibility is that the source string is an empty string (i.e.
      length = zero) and, in this case, a value of 1 is displayed.  In all
      these cases, Interactive CLI also displays a return code of either 0
      (SQL_SUCCESS) or 1 (SUCCESS_WITH_INFO).
 
  Example:
 
 
 -- 91 --  of 202
      See the example with SQLGetSubString on page 100.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 92 --  of 202
  1.8.54  SQLGetSQLCA
 
  Display the contents of the SQLCA control block that is associated with
  either an environment handle, a connection handle or a statement handle.
 
  An SQLCA is always attached to each allocated handle.  It is the control
  block for the last command that was executed with that handle as the
  primary handle (e.g. the primary handle for Connect is the hdbc and the
  primary handle for Prepare is an hstmt).
 
  Syntax:
 
    >>--SQLGetSQLCA----henv---SQL_NUL_HDBC---SQL_NUL_HSTMT---------------------------------------------------><
                     |-0------hdbc-----------SQL_NUL_HSTMT-|
                     +-0------0--------------hstmt---------+
 
  Parameters:
 
    henv  hdbc  hstmt
       The parameters are coded differently in order to determine which one
       of the handles is to be identified as the primary handle.
 
           henv   SQL_NUL_HDBC   SQL_NUL_HSTMT   The SQLCA that is attached to
                                                 the henv is to be displayed
 
           0      hdbc           SQL_NUL_HSTMT   The SQLCA that is attached to
                                                 the hdbc is to be displayed
 
                                                 The henv value is ignored but, by
                                                 convention, it is coded as zero.
 
           0      0              hstmt           The SQLCA that is attached to
                                                 the hstmt is to be displayed
 
                                                 The henv and hdbc values are ignored
                                                 but, by convention, they are coded
                                                 as zero.
 
  Successful Result:
 
      The contents of the SQLCA control block are displayed.
 
      Note that the SQLCA is meaningful only if the previous request on the
      handle caused an interaction with the server.  For example SQLPrepare
      returns a valid SQLCA, whereas SQLAllocStmt returns a zeroed or empty
      SQLCA.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 93 --  of 202
  Example:
 
      This is an extension of the first example that is shown with the
      SQLError command on page 48.  That example contains
      the following sequence of commands and responses:
 
        >sqlexecdirect 22 "select * from missing_table" sql_nts
        SQLExecDirect: rc = -1 (SQL_ERROR)
        #
        #Find out something about the error
        #
        >SQLError 0 0 22
        SQLError: rc = 0 (SQL_SUCCESS)
        SQLError: SQLState     : S0002
                  fNativeError : -204
                  szErrorMsg   : {IBM} {CLI Driver} {DB2/6000} SQL0204N  "COTTON.MISSING_TABLE" is
                                                                an undefined name.
                  SQLSTATE=42704
                  cbErrorMsg   : 99
 
      The SQLGetSQLCA command can now be used:
 
        >sqlgetsqlca 0 0 22
 
      and the response will be:
 
        SQLGetSQLCA: rc= 0 (SQL_SUCCESS)
        SQLGetSQLCA: sqlca contents:
                     sqlcaid: "SQLCA   "
                     sqlcabc:  136
                     sqlcode:  -204
                     sqlerrml: 20
                     sqlerrmc:
 
        434F54544F4E572E4D  49535349  4E475F54  |COTTON.MISSING_T|
        41424C45  20202020  20202020  20202020  |ABLE            |
                     sqlerrp:  SQLRSMT2
                     sqlerrd: {0} -30850  {1} 0  {2} 0  {3} 0  {4} 0  {5} 0
                     sqlwarn: {0}    {1}    {2}    {3}    {4}    {5}
                     sqlwarn: {6}    {7}    {8}    {9}    {10}
                     sqlstate: "42704"
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 94 --  of 202
  1.8.55  SQLGetStmtOption
 
  Get the current value of a specific statement attribute.
 
  Syntax:
 
    >>--SQLGetStmtOption---hstmt-----SQL_ASYNC_ENABLE-------------------------------------------------------><
                                   |-SQL_BIND_TYPE---------|   +/testmask/-+
                                   |-SQL_CONCURRENCY-------|
                                   |-SQL_CURSOR_HOLD-------|
                                   |-SQL_CURSOR_TYPE-------|
                                   |-SQL_GET_BOOKMARK------|
                                   |-SQL_MAX_LENGTH--------|
                                   |-SQL_MAX_ROWS----------|
                                   |-SQL_NODESCRIBE--------|
                                   |-SQL_NOSCAN------------|
                                   |-SQL_PARAMOPT_ATOMIC---|
                                   |-SQL_QUERY_TIMEOUT-----|
                                   |-SQL_RETRIEVE_DATA-----|
                                   |-SQL_ROW_NUMBER--------|
                                   |-SQL_ROWSET_SIZE-------|
                                   +-SQL_STMTTXN_ISOLATION-+
 
                                            option
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle whose attribute is
       being queried.
 
    option
       One of the values shown in the syntax diagram.  For a description of
       these values, refer to Table 84 on page 278 and to Table 133 starting
       on page 366 of the V2.1 DB2 CLI Guide and Reference.
 
  Successful Result:
 
      The value of the attribute is displayed.  Also, Interactive CLI
      displays a return code of either 0 (SQL_SUCCESS) or 1
      (SUCCESS_WITH_INFO).
 
  Example:
 
      See the first example with the SQLSetStmtOption command on page 155.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 95 --  of 202
  1.8.56  SQLGetSubString
 
  Obtain a portion of a string that is referenced by a LOB locator.
 
 
  Syntax:
 
    >>--SQLGetSubString---hstmt-----SQL_C_BLOB_LOCATOR------source_hmembuf---from_position---for_length------>
                                  |-SQL_C_CLOB_LOCATOR---|
                                  +-SQL_C_DBCLOB_LOCATOR-+
 
                                       locator_c_type
 
 
                  >----SQL_C_CHAR-----------------USEMEMBUF---hmembuf----------------------------------------><
                     |-SQL_C_DBCHAR---------|   |                          |   +-/testmask/-+
                     |-SQL_C_BINARY---------|   +-TEMPBUF---temp_buff_size-+
                     |-SQL_C_BLOB_LOCATOR---|
                     |-SQL_C_CLOB_LOCATOR---|
                     +-SQL_C_DBCLOB_LOCATOR-+
 
                          target_c_type
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle that is used to
       report any errors that might result from the processing of this
       command.
 
    locator_c_type
       The C type of the LOB locator.
 
    source_hmembuf
       The integer that identifies the scalar memory buffer that contains the
       LOB locator value of the source string.
 
    from_position
       An integer that specifies the first byte/character of the starting
       position of the substring within the source string.
 
    for_length
       An integer that specifies the length of the substring.
 
    target_c_type
       If one of SQL_C_CHAR, SQL_C_DBCHAR, or SQL_C_BINARY is specified, then
       the substring is transfered from the database server to a scalar
       memory buffer in the application.
 
       If one of SQL_C_CHAR_LOCATOR, SQL_C_DBCHAR_LOCATOR, or
       SQL_C_BINARY_LOCATOR is specified, then a new LOB locator is created
       for the substring at the database server an the value of that locator
       is transfered from the database server to a scalar memory buffer in
       the application.
 
    USEMBUF hmembuf
       The integer that identifies the scalar memory buffer into which either
       the substring or a LOB locator representing that substring is to be
       placed.
 
 
 
 
 
 
 -- 96 --  of 202
    TEMPBUF temp_buf_size
       This can be used to specifiy the size of a temporary scalar memory
       buffer that is to receive to substring.  This memory buffer is thrown
       away as soon as the substring has been displayed.
 
       TEMPBUF also be used in the case where a locator is returned (although
       that is not why the option is provided).
 
       In the TEMPBUF case the string is displayed.  It is not displayed in
       the case where it is read into a scalar memory buffer.
 
  Successful Result:
 
      The substring is or the LOB locator value is displayed.  If a user
      defined scalar memory buffer has been specified as a target (via
      USEMEMBUF) that buffer is also updated.  In all cases, Interactive CLI
      also displays a return code of either 0 (SQL_SUCCESS) or 1
      (SUCCESS_WITH_INFO).
 
  Example:
 
      Given that - there is a connection identified by 2 the the PUB database
                 - the user on that connection is CLITEST1
                 - there are two allocated statement, 12 and 33, on connection 2
 
                 -a row for the pub named "The Loggerheads" exists in the PUB_SIGN_PHOTOS table
                  and the content of the PHOTO_DESCRIPTION column is as follows:
 
                      For 110 years the Cupid Inn served the people of Grove-hill and Cupid      69
                      Green, Hemel Hempstead (Herts).  It was a firm favourite, so that          65
                      when in 1970, it was scheduled for demolition because of roadworks, a      69
                      new Cupid was built in its place.  In the old days when pubs were on       68
                      the roadside, one sign was all that was needed.  But now that pubs are     70
                      in open, landscaped areas there is more scope, and so when it came to      69
                      designing a sign for the new pub, the artist (Mr. D. A. Clark of Watford)  73
                      decided to do something different and have a set of three signs with a
                      story behind each.  The first shows a cupid frowning on a young couple
                      who have fallen out after an argument.  In the second sign, the cupid
                      has a mischievous look on his face as he fires his arrows at the
                      hearts of the couple and finds his target.  The third sign shows the
                      couple in loving embrace--reunited as Cupid hovers above them with a
                      wink, a smile and a thumbs-up gesture.
 
      then a possible sequence of commands and responses would be:
 
        #
        # Prepare statement to select the sign description column of a specific row from PUB_SIGN_PHOTOS
        #
        >SQLPrepare 12 "select photo_description from pub_sign_photos where
                                                           pub_name = 'The Loggerheads'" sql_nts
        SQLPrepare: rc = 0 (SQL_SUCCESS)
        #
        # Get a memory buffer for a CLOB_LOCATOR and bind it to the statemen
        #
        >>getmem 12 1201 sql_c_clob_locator
        GetMem: memory buffer 1201 for statement handle 12 allocated.
        #
        >sqlbindcol 12 1 sql_c_clob_locator 1201
        SQLBindCol: rc = 0 (SQL_SUCCESS)
        #
        # Execute the statement and fetch the row
        #
        >>sqlexecute 12
 
 
 -- 97 --  of 202
        SQLExecute: rc = 0 (SQL_SUCCESS)
        SQLError 0 0 12
        SQLError: rc = 100 (SQL_NO_DATA_FOUND)
        SQLError: SQLState     : 00000
        #
        >>sqlfetch 12
        SQLFetch: rc = 0 (SQL_SUCCESS)
        #
        # Find out how long the CLOB string is:
        #
        >sqlgetlength 33 sql_c_clob_locator 1201
        SQLGetLength: rc = 0 (SQL_SUCCESS)
           StringLength: 1377
           IndicatorValue: 0
        #
        # Find out position of the first occurrence of the word 'artist' within the CLOB string
        # (should be 453)
        #
        >getmem 12 1202 sql_c_char 7
        GetMem: memory buffer 1202 for statement handle 12 allocated.
        #
        >updateMem 1202 sql_c_char   value 6 artist
        UpdateMem: memory buffer 1202 for statement handle 12 updated.
        #
        >sqlgetposition 33 sql_c_clob_locator 1201   from literal   1202   1
        SQLGetPosition: rc = 0 (SQL_SUCCESS)
           LocatedAt: 453
           IndicatorValue: 0
        #
        # Display the 100 characters starting with the word 'artist' from the CLO string
        #
        >sqlgetsubstring 33 sql_c_clob_locator 1201   453   50   sql_c_char   tempbuf 110
        SQLGetSubString: rc = 0 (SQL_SUCCESS)
        Output C Buffer Type: SQL_C_CHAR
        Contents: "
         artist (Mr. D. A. Clark of Watford) decided to do "
           StringLength: 50
           IndicatorValue: 0
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 98 --  of 202
  1.8.57  SQLGetTypeInfo
 
  Return a result set that contains information about data types that are
  supported by the database to which Interactive CLI is currently connected.
 
  Information about all data types can be requested (by specifying
  SQL_ALL_TYPES as the info_type value) or information about one specific
  data type can be requested.
 
  This is primarily for the use of applications that want to code to several
  different ODBC drivers but, unlike SQLGetFunctions, it may have some
  limited usefulness within IBM Interactive CLI.
 
  See Table 89 starting on page 285 of the V2.1 DB2 CLI Guide and Reference
  for a description of the result set that is created by this command.
 
 
  Note:   The result set that is returned must be interrogated via the normal
          mechanism of SQLBindCol then SQLFetch into memory buffers, the List
          BUFFS to see the results.
 
  Syntax:
 
    >>--SQLGetTypeInfo---hstmt----SQL_CHAR-------------------------------------------------------------------><
                                |-SQL_VARCHAR--------|
                                |-SQL_LONGVARCHAR----|
                                |-SQL_GRAPHIC--------|
                                |-SQL_VARGRAPHIC-----|
                                |-SQL_LONGVARGRAPHIC-|
                                |-SQL_SMALLINT-------|
                                |-SQL_INTEGER--------|
                                |-SQL_DECIMAL--------|
                                |-SQL_NUMERIC--------|
                                |-SQL_DOUBLE---------|
                                |-SQL_FLOAT----------|
                                |-SQL_REAL-----------|
                                |-SQL_DATE-----------|
                                |-SQL_TIME-----------|
                                |-SQL_TIMESTAMP------|
                                |-SQL_BINARY---------|
                                |-SQL_VARBINARY------|
                                |-SQL_LONGVARBINARY--|
                                |-SQL_BLOB-----------|
                                |-SQL_CLOB-----------|
                                |-SQL_DBCLOB---------|
                                |                    |
                                +-SQL_ALL_TYPES------+
 
                                    sql_type_info
 
  Parameters:
 
    hstmt
       The integer that identifies the handle of the statement to which the
       result set will be attached.
 
    sql_type_info
       The C data type of the result data.  It must be one of the values
       listed in the syntax diagram.
 
  Successful Result:
 
 
 
 
 -- 99 --  of 202
      A result set is returned and a cursor is opened on the statement
      handle.  The data in the result set is made available for retrieval via
      the SQLFetch command.  Also, Interactive CLI displays a return code of
      either 0 (SQL_SUCCESS) or 1 (SUCCESS_WITH_INFO).
 
  Example:
 
    Given a statement handle 10 in the allocated state on a connection 2
    that is currently connected to a DB2(cs) database named PUB, then
    a valid sequence of commands and responses would be:
 
        # Get data type information re the server's support of SQL_VARCHAR
        #
        >sqlgettypeinfo 10 sql_varchar
        SQLGetTypeInfo: rc = 0 (SQL_SUCCESS)
        #
        # Fetch the results returned (1 row only)
        #
        >fetchall 10
        FetchAll:  Columns: 15
          TYPE_NAME DATA_TYPE COLUMN_SIZE LITERAL_PREFIX LITERAL_SUFFIX CREATE_PARAMS  --> more to right
          VARCHAR, 12, 4000, ', ', (length), 1, 1, 3, -, 0, -, -, -, -
          FetchAll: 1 rows fetched.
        #
        # Drop the re-allocate the statement handle.
        #
        >sqlfreestmt 10 sql_drop
        SQLFreeStmt: rc = 0 (SQL_SUCCESS)
        sqlallocstmt 2 10
        SQLAllocStmt: rc = 0 (SQL_SUCCESS)
                      CLI hstmt = 1, Test Driver hstmt = 10
        #
        # Get information re the server's support for all data types
        #
        >sqlgettypeinfo 10 sql_all_types
        SQLGetTypeInfo: rc = 0 (SQL_SUCCESS)
        #
        #
        # Fetch the results returned (1 row only)
        #
        >fetchall 10
        FetchAll:  Columns: 15
          TYPE_NAME DATA_TYPE COLUMN_SIZE LITERAL_PREFIX LITERAL_SUFFIX CREATE_PARAMS  --> more to right
          BLOB, 30, 2147483647, -, -, (length), 1, 1, 1, -, 0, -, -, -, -
          CLOB, 40, 2147483647, -, -, (length), 1, 1, 1, -, 0, -, -, -, -
          LONG VARCHAR FOR BIT DATA, -4, 32700, -, -, -, 1, 0, 0, -, 0, -, -, -, -
          VARCHAR () FOR BIT DATA, -3, 4000, -, -, (length) FOR BIT DATA, 1, 1, 0, -, 0, -, -, -, -
          CHARacter () FOR BIT DATA, -2, 254, ', ', (length) FOR BIT DATA, 1, 1, 3, -, 0, -, -, -, -
          LONG VARCHAR, -1, 32700, -, -, -, 1, 0, 0, -, 0, -, -, -, -
          CHARacter, 1, 254, ', ', (length), 1, 1, 3, -, 0, -, -, -, -
          NUMeric, 2, 31, -, -, (precision,scale), 1, 0, 2, 0, 0, 0, -, 0, 31
          DECimal, 3, 31, -, -, (precision,scale), 1, 0, 2, 0, 0, 0, -, 0, 31
          INTeger, 4, 10, -, -, -, 1, 0, 2, 0, 0, 0, -, -, -
          SMALLINT, 5, 5, -, -, -, 1, 0, 2, 0, 0, 0, -, -, -
          FLOAT, 6, 15, -, -, -, 1, 0, 2, 0, 0, 0, -, -, -
          FLOAT, 8, 15, -, -, -, 1, 0, 2, 0, 0, 0, -, -, -
          DATE, 9, 10, ', ', -, 1, 0, 2, -, 0, -, -, -, -
          TIME, 10, 8, ', ', -, 1, 0, 2, -, 0, -, -, -, -
          TIMESTAMP, 11, 26, ', ', -, 1, 0, 2, -, 0, -, -, 0, 6
          VARCHAR, 12, 4000, ', ', (length), 1, 1, 3, -, 0, -, -, -, -
          FetchAll: 17 rows fetched.
 
 
 
 
 -- 100 --  of 202
  1.8.58  KillEnv
 
  Free the environment by freeing all handles of any type within the
  environment and releasing all resources that are attached to all these
  handles.
 
  This is equivalent to issuing:
 
        SQLDisconnect (which, in turn, frees all statement handles (which,
                       in turn, frees all memory buffers associated with
                       the statement handles))
        SQLFreeHdbc
        SQLFreeEnv
 
  Note:   The KillEnv command will fail if there is any active transaction.
 
  Syntax:
 
    >>--KillEnv---henv---------------------------------------------------------------------------------------><
 
  Parameters:
 
    henv
       The integer that identifies the current environment handle.
 
  Successful Result:
 
      The environment is no more.  The results of the underlying commands are
      displayed.
 
  Example:
 
      Given that the environment is identified by 1 and that there is a
      current active connection (but no active transaction) in that
      environment, the command:
 
        >killenv 1
 
      Should be responded to with:
 
        SQLDisconnect: rc = 0 (SQL_SUCCESS)
        SQLFreeConnect: rc = 0 (SQL_SUCCESS)
        SQLFreeEnv: rc = 0 (SQL_SUCCESS)
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 101 --  of 202
  1.8.59  List
 
  Display current information about handles and/or memory buffers.
 
  Syntax:
 
    >>--List----HENV-----------------------------------------------------------------------------------------><
              |-HDBC------------------------------------------------|
              |-HSTMT-----------------------------------------------|
              |                                                     |
              |-BUFFS-----------------------------------------------|
              |        +-hstmt--------------+                       |
              |                 +-hmembuf-+                         |
              |                                                     |
              |-MEMARRAY--------------------------------------------|
              |           +-hstmt-------------------------------+   |
              |                    +-memarray_id--------------+     |
              |                                   +-element-+       |
              |                                                     |
              |-MEMMATRIX-------------------------------------------|
              |            +-hstmt--------------------------------+ |
              |                     +-memmatrix_id--------------+   |
              |                                     +-ith_row-+     |
              |                                                     |
              |-FILEREFS--------------------------------------------|
              |           +-hstmt-----------------------------+     |
              |                    +-hfileref---------------+       |
              |                                +-ith_fref-+         |
              |                                                     |
              +-ALL-------------------------------------------------+
 
  Parameters:
 
    HENV
       Display the identifier of the environment handle.  Note that two
       values are displayed:
 
       o   the value in square brackets under the heading 'index' is the
           external Interactive CLI environment handle value and should be
           used to identify the environment on subsequent calls.
 
       o   the value under the heading 'henv' is the internal henv value used
           by Interactive CLI to communicate with IBM's CLI Driver.
 
    HDBC
       Display the identifier of the connection handle.  Note that three
       values are displayed:
 
       o   the value in square brackets under the heading 'index' is the
           external Interactive CLI connection handle value and should be
           used to identify the connection on subsequent calls.
 
       o   the value under the heading 'hdbc' is the internal hdbc value used
           by Interactive CLI to communicate with IBM's CLI Driver.
 
       o   the value under the heading 'henv' is the internal henv value
           linked to the internal hdbc value.
 
    HSTMT
       Display the identifier of all statement handles.  As with HENV and
       HDBC, the values listed in square brackets in the index column should
       be used to identify the statements within Interactive CLI.
 
 
 
 -- 102 --  of 202
    BUFFS  [ hstmt [ hmembuf ] ]
       Display the identifiers, characteristics, and contents of scalar
       memory buffers.  The buffers shown depend on whether or not BUFFS has
       been quafified:
 
         no qualification
            All scalar memory buffers are dispalyed.
 
         hstmt
            All scalar memory buffers for a the specified hstmt are
            displayed.
 
         hstmt  hmembuf
            Only the identified scalar memory buffer is displayed.
 
       If it would help to also see the contents of the memory buffer in
       hexadecimal format, then before using the List command, the HEX option
       should be set to ON using the Option command.
 
    MEMARRAY  [ hstmt [ memarray_id [ element ] ] ]
       Similar to BUFFS, except that memory array buffer information is
       displayed.
 
    MEMMATRIX  [ hstmt [ mematrix_id [ ith_row ] ] ]
       Similar to BUFFS, except that memory matrix information is displayed.
 
    FILEREFS  [ hstmt [ hfileref [ ith_fref ] ] ]
       Similar to BUFFS, except that file reference buffer information is
       displayed.
 
    ALL
       Display all the above.
 
  Successful Result:
 
      The requested information is displayed.
 
  Example 1:
 
      Given that user PELLOW is authorized to the database IBMSAMPL with the password
      MOOSE then the following sequence of commands and responses is possible:
 
        # First do a quick connect
        #
        >quickconnect  3  7  ibmsampl pellow moose
        SQLAllocEnv: rc = 0 (SQL_SUCCSS)
                     CLI henv = 1, Test Driver henv = 3
        SQLAllocConnect: rc = 0 (SQL_SUCCSS)
                     CLI hdbc = 1, Test Driver hdbc = 7
        SQLConnect: rc = 0 (SQL_SUCCSS)
        #
        # Now list the integers for the environment and connection
        #
        >list henv
        Environment Handles:  index   henv
                               {3}     1
        1 Environment Handle(s) allocated
        #
        >list hdbc
        Connection Handles:  index   hdbc    henv
                               {7}    1       1
        1 Connection Handle(s) allocated
        #
 
 
 -- 103 --  of 202
        # Now assign some statement handles
        #
        >sqlallocstmt  7  22
        SQLAllocStmt: rc = 0 (SQL_SUCCSS)
                      CLI hstmt = 1, Test Driver hstmt = 22
        #
        >sqlallocstmt  7  33
        SQLAllocStmt: rc = 0 (SQL_SUCCSS)
                      CLI hstmt = 2, Test Driver hstmt = 33
        #
        # Now list the integers for the statement handles
        #
        >list hstmt
        Statement Handles:  index   hstmt    hdbc
                             {22}      1       1
                             {33}      2       1
        1 Connection Handle(s) allocated
 
  Example 2:
 
      See example with UpdateElem on page 169 for the use of List MEMARRAY
 
  Example 3:
 
      See example with SQLFetch on page 57 for the use of List BUFFS
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 104 --  of 202
  1.8.60  SQLMoreResults
 
  This is used to determine whether there is another result set available on
  a statement handle in two different situations.
 
  o   A batch query has been  executed with more than one set of parameter
      values (see SQLExtendedFetch and SQLParamOptions).
 
  o   A CALL statement has been executed that invokes a stored procedure that
      returns multiple result sets.
 
  Syntax:
 
    >>--SQLMoreResults---hstmt-------------------------------------------------------------------------------><
 
  Parameters:
 
    hstmt
       The integer that identifies the handle of the statement that can
       potentially contain another result set.
 
  Successful Result:
 
      If there is another result set, the cursor on the previous result set
      is closed and a cursor is opened at the start of the next result set.
      Also a return code of 0 (SQL_SUCESS) is displayed.
 
      If there are no more result sets, a return code of 100
      (SQL_NO_DATA_FOUND) is displayed.
 
  Example:
 
      Given that - there is a connection identified by 2 the the PUB database
                 - the user on that connection is CLITEST1
                 - there is allocated statement, 12, on connection 2
      then a possible sequence of commands and responses would be:
 
        # Prepare statement to select rows from both the PUB_SIGN_PHOTOS table
        # and the PUB_CRAWL_LOG table and to UNION the results into one
        # result set.  The content of the statement (which is in a file) is:
        #    SELECT PUB_NAME, TOWN FROM PUB_SIGN_PHOTOS
        #      WHERE TOWN LIKE ?
        #    UNION ALL
        #    SELECT PUB_NAME, TOWN FROM PUB_CRAWL_LOG
        #      WHERE TOWN LIKE ?
        # Note the two parameter markers.  These will be set in order to
        # provide different result sets.
        #
        >sqlprepare 11 file pubsel_1.stm
        SQLPrepare: rc = 0 (SQL_SUCCESS)
        #
        # Get memory array buffers for parameter markers.
        #
        >getmemarray 11 111  3  sql_c_char 21
        GetMemArray: Memory Array 111 for statement handle 11 allocated.
        >getmemarray 11 112  3  sql_c_char 21
        GetMemArray: Memory Array 112 for statement handle 11 allocated.
        #
        # Bind the buffers to the parameter markers
        #
        >sqlbindparameter 11 1  sql_param_input  sql_c_char  sql_char  21 0  111 memarray
        SQLBindParameter: rc = 0 (SQL_SUCCESS)
        >sqlbindparameter 11 1  sql_param_input  sql_c_char  sql_char  21 0  112 memarray
 
 
 -- 105 --  of 202
        SQLBindParameter: rc = 0 (SQL_SUCCESS)
        #
        # Update the first set of elements (for the first result set) with
        # a pattern (%) that returns all rows.
        #
        >updateelem 111 0  value  1  "%"
        UpdateElem: array elem 0 of memory array 111 updated.
        >updateelem 112 0  value  1  "%"
        UpdateElem: array elem 0 of memory array 112 updated.
        #
        # Update the second set of elements (for the 2nd result set) so
        # that only rows with a town named Pivabiska will be returned.
        #
        >updateelem 111 1  value  9  Pivabiska
        UpdateElem: array elem 1 of memory array 111 updated.
        >updateelem 112 1  value  9  Pivabiska
        UpdateElem: array elem 1 of memory array 112 updated.
        #
        # Update the third set of elements (for the 3rd result set) so that
        # all towns starting with P will be returned.
        #
        >updateelem 111 2  value  1  "P%"
        UpdateElem: array elem 2 of memory array 111 updated.
        >updateelem 112 2  value  1  "P%"
        UpdateElem: array elem 2 of memory array 112 updated.
        #
        # List the contents of the memory array buffers for statement 12
        #
        >list memarray 11
        Memory Arrays:
               arrayId hstmt  totalElems  ElemSize   c_type
                [111]     11          3          21     SQL_C_CHAR
        Element [0] Contents: "%"
                     Length: 1
        Element [1] Contents: "Pivabiska"
                     Length: 9
        Element [2] Contents: "P%"
                     Length: 2
 
               arrayId hstmt  totalElems  ElemSize   c_type
                [112]     11          3          21     SQL_C_CHAR
        Element [0] Contents: "%"
                     Length: 1
        Element [1] Contents: "Pivabiska"
                     Length: 9
        Element [2] Contents: "P%"
                     Length: 2
 
        2 Memory Array(s) and 6 Elements Listed
 
        #
        # See what the count of parameter markers is
        #
        >sqlnumparams 11
        SQLNumParams: rc = 0 (SQL_SUCCESS)
                Number of Parameters = 2
        #
        # Tell implementation that parameter values are to be provided via an array
        #
        >sqlparamoptions 11 3
        SQLParamOptions: rc = 0 (SQL_SUCCESS)
        #
        # Execute the statement
 
 
 -- 106 --  of 202
        #
        >sqlexecute 11
        SQLExecute: rc = 0 (SQL_SUCCESS)
        #
        # Look at the first result set
        #
        >fetchall 11
        FetchAll:  Columns: 2
          PUB_NAME TOWN
          Dutchess of Markham, Markham
          Case is Altered, Pinner
          Bishop and Wolf, Isles of Scilly
          The Bullnose Morris, Oxford
          Duke Without a Head, Wateringbury
          The Royal Oak, Hayling Island
          Fox With his Teeth Drawn, Munden
          Magpie and Punchbowl, Bishopsgate, London
          Wig and Fidgett, Boxted
          The Cheese Rollers, Shurdington
          Whiskey Jack, Pivabiska
          Cupid, Hemel Hempstead
          The Loggerheads, Gwernymynydd
          Case is Altered, Pinner
          Los Gatos Brewing Company, Los Gatos
          White Horse, Droxford
          Cat and Custard Pot, Shipton Moyne
          The Round of Grass, ?
          Black Fly and Ear, Pivabiska
          The Stables, Theale
          Cawl Esquel, Don Mills
          The Slug and Lettuce, Stratford
          Cross Keys, Peebles
          The Shed and Grimsby, Pivabiska
          Waverly Hotel, Hearst
          FetchAll: 25 rows fetched.
        #
        # Prepare to process the 2nd result set
        #
        >sqlmoreresults 11
        SQLMoreResults: rc = 0 (SQL_SUCCESS)
        #
        # Look at the 2nd result set
        #
        >fetchall 11
        FetchAll:  Columns: 2
          PUB_NAME TOWN
          Whiskey Jack, Pivabiska
          Black Fly and Ear, Pivabiska
          The Shed and Grimsby, Pivabiska
          FetchAll: 3 rows fetched.
        #
        # Prepare to process the 3rd result set
        #
        >sqlmoreresults 11
        SQLMoreResults: rc = 0 (SQL_SUCCESS)
        #
        # Look at the 3rd result set
        #
        >fetchall 11
        FetchAll:  Columns: 2
          PUB_NAME TOWN
          Case is Altered, Pinner
          Whiskey Jack, Pivabiska
 
 
 -- 107 --  of 202
          Case is Altered, Pinner
          Black Fly and Ear, Pivabiska
          Cross Keys, Peebles
          The Shed and Grimsby, Pivabiska
          FetchAll: 6 rows fetched.
        #
        # Try SQLMoreResults one more time -there should not be any result sets
        #
        >sqlmoreresults 11
        SQLMoreResults: rc = 100 (SQL_NO_DATA_FOUND)
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 108 --  of 202
  1.8.61  SQLNativeSql
 
  Given an SQL statement string, SQLNativeSQL displays the CLI Driver
  Manager's translated version of that string (with vendor escape clauses
  either converted or thrown away, as approproate).
 
 
  Note:   The CLI Driver process portions of the statement that are coded
          within a Vendor Escape clause and either converts them to SQL that
          the DBMS connected to by the hdbc will understand or throws them
          away.
 
  Syntax:
 
 
    >>--SQLNativeSql-----hdbc----sqlstmt---sqlstmt_length-----nativestmt_maxlength---------------------------><
                               |                          |
                               +-FILE---file_name---------+
 
  Parameters:
 
    hdbc
       The integer that identifies the connection handle of the data source
       that is used to determine just how the driver manager processes the
       vendor escape clauses.
 
    sqlstmt
       A delimited string that contains the SQL statement that is to be
       converted.
 
    sqlstmt_length
       Either the length of the statement string or SQL_NTS.
 
    FILE file_name
       The name of the file that contains the statement that is to be
       converted.
 
       Note that the only thing that can be in the file is the statement.
       That statement may be coded on one or more lines within the file.
 
       The statement should not be enclosed in delimiter characters.
 
    nativestmt_maxlength
       An integer specifying the maximum number of bytes of information that
       are to be displayed.
 
  Successful Result:
 
 
 
  Example:
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 109 --  of 202
  1.8.62  SQLNumParams
 
  Obtain a count of the number of parameter markers in an SQL statement.
 
  Syntax:
 
    >>--SQLNumParams---hstmt---------------------------------------------------------------------------------><
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle of the statement
       whose parameter markers are to be counted.
 
  Successful Result:
 
      The number of parameter markers is displayed.  Also, Interactive CLI
      displays a return code of 0 indicating that the command was successful.
 
  Example:
 
      Given that there are statement handles identified by 33 and 44,
      then the following sequence of commands and responses is possible:
 
        >sqlexecdirect 33 "insert into pub_crawl_log values (? ? ? ? ? ? ? ? ? ? ?)"
        SQLExecDirect: rc = 0 (SQL_SUCCESS)
        #
        >sqlexecdirect 44 "lock table pub_crawl_log in share mode)"
        SQLExecDirect: rc = 0 (SQL_SUCCESS)
        #
        >sqlnumparams 33
                 Number of Parameters = 11
        #
        >sqlnumparams 44
                 Number of Parameters = 0
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 110 --  of 202
  1.8.63  SQLNumResultCols
 
  Obtain a count of the number of columns in a result set.
 
  Syntax:
 
    >>--SQLNumResultCols---hstmt-----------------------------------------------------------------------------><
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle to which the result
       set is linked.
 
  Successful Result:
 
      The number of columns is displayed.  Also, Interactive CLI displays a
      return code of 0 indicating that the command was successful.
 
  Example:
 
      Given that hstmt 20 is in the 'allocated state' (and knowing that
      the result set returned for a SQLGetTypeInfo call has 13
      columns), then the following commands would likely result in the
      responses shown:
 
        >sqlgettypeinfo 20 sql_graphic
        SQLGetTypeInfo: rc = 0 (SQL_SUCCESS)
        #
        >sqlnumresultcols 20
        SQLNumResultCols: rc = 0 (SQL_SUCCESS)
                Result columns = 13
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 111 --  of 202
  1.8.64  Option
 
  Either:   set an option that will apply to subsequent commands.
 
  or:       display the current setting of all options
 
  Syntax:
 
    >>--Option-----------------------------------------------------------------------------------------------><
                |-AUTOCOMMIT----OFF---------------------|
                |             +-ON--+                   |
                |                                       |
                |-CALLERROR----OFF----------------------|
                |            +-ON--+                    |
                |                                       |
                |-/CLEAN/----/ON/---------------------------|
                |        +-/OFF/-+                        |
                |                                       |
                |-DELIMIT---DEFAULT---------------------|
                |         +-my_own_char-+               |
                |                                       |
                |-ECHO----ON----------------------------|
                |       +-OFF-+                         |
                |                                       |
                |-FILLCHAR---DEFAULT--------------------|
                |          +-my_own_char-+              |
                |                                       |
                |-HEX----OFF- --------------------------|
                |      |     +-CHAR---+ |               |
                |      +-ON--+--------+-+               |
                |            +-NOCHAR-+                 |
                |                                       |
                |-LOG----OFF----------------------------|
                |      +-ON---file_name-+               |
                |                                       |
                |-PROMPT----ON--------------------------|
                |         +-OFF-+                       |
                |                                       |
                |-SCREEN----OFF-------------------------|
                |         +-ON--+                       |
                |                                       |
                |-SET----AUTHID---user_name-------------|
                |      |                          |     |
                |      |-AUTHSTR---authentication-|     |
                |      |                          |     |
                |      |-DB_ALIAS---db_alias------|     |
                |      |                          |     |
                |      +---SCHEMA----schema_name--+     |
                |        +-OWNER -+                     |
                |                                       |
                |-STDERR----OFF-------------------------|
                |         +-ON---file_name-+            |
                |                                       |
                +-SCRIPT----OFF-------------------------+
                          +-ON---file_name-+
 
  Parameters:
 
  Note that all these parameters have defaults and the default is always the
  first alternative listed.
 
 
 
 
 
 -- 112 --  of 202
    -                 If no parameter is specified, the current option
                      settings are displayed.
 
    AUTOCOMMIT
 
                      ON             When set ON, changes to the database are
                                     automatically committed after the
                                     execution of every SQL statement that
                                     modifies the database.
 
                      OFF            When set OFF, normal SQL transaction
                                     control is in effect and changes to the
                                     database must be committed (or rolled
                                     back) with the Transact command.
 
    CALLERROR
 
                      OFF            SQLError is not automatically called.
 
                      ON             When set ON, then if the result of a CLI
                                     command is either ERROR or SUCCESS WITH
                                     INFO, the SQLError function is called
                                     automatically.
 
    DELIMIT
 
                      DEFAULT        The quotation character ( " ) may be
                                     used to delimit string argument values
                                     in subsequent commands.
 
                      my_own_char    The specified character may be used to
                                     delimit string argument values in
                                     subsequent commands.
 
    ECHO
 
                      ON             When set ON, then when the LOG is also
                                     ON, both commands and the results of
                                     those commands are written to the log.
 
                      OFF            When set OFF, only results are written
                                     to the log.
 
    FILLCHAR
 
                      DEFAULT        The standard c nul-termination character
                                     (zero) will be used to fill memory
                                     buffers and output display areas.
 
                      my_own_char    A different character may be specified.
                                     This is primarily for internal testing
                                     purposes when running with the
                                     SQL_ATTR_OUTPUT_NTS environment
                                     attribute set to SQL_FALSE.
 
                                     If this option is set before
                                     QuickConnect is called, then
                                     null-termination will be turned OFF as
                                     part of the QuickConnect processing.
 
                                     If a non-DEFAULT value is specified then
                                     it is always necessary to specify the
 
 
 
 -- 113 --  of 202
                                     exact length of the strings on the
                                     UpdateMem and UpdateElem command.
 
    HEX
 
                      OFF            When set OFF, data is not displayed in
                                     hexadecimal format.
 
                      ON             When set ON, data that is displayed as a
                                     result of a List BUFFS command is shown
                                     hexadecimal format.  When ON is
                                     specifed, one additional character (the
                                     one immediately to the right of the
                                     buffer), is also displayed.
 
                                     If CHAR is specified (or defaulted to)
                                     the data is also displayed in character
                                     format; if NOCHAR is specified the data
                                     is only displayed in hex.
 
    LOG
 
                      OFF            When set to OFF, results of commands are
                                     displayed on the screen.
 
                      ON file_name   When set to ON, results of commands are
                                     written to the named file rather than
                                     being displayed on the screen.
 
                                     If the file does not exist, a new file
                                     is created.
 
                                     If an existing file is specified, the
                                     log records are appended as new lines at
                                     the end of the file.
 
    PROMPT
 
                      ON             When set to ON, a > symbol is placed at
                                     the start of the line on the screen into
                                     which the next command is to be keyed.
 
                      OFF            When set to OFF, no prompt character
                                     appears at the start of the line.
 
    SCREEN
 
                      OFF            When set OFF, then when LOG is ON,
                                     nothing is displayed on the screen.
 
                      ON             When set ON, then results are always
                                     sent to the screen even if LOG is ON.
                                     screen.
 
    SET
 
                      AUTHID user_name
                                     The meaning of this (as well as AUTHSTR
                                     and DB_ALIAS) is the same as on the
                                     SQLConnect command.  If they have been
                                     set in advance via the Option command,
                                     they do not have to be coded on any
                                     SQLConnect commands.
 
 
 -- 114 --  of 202
                      AUTHSTR authentication
                                     see AUTHID
 
                      DB_ALIAS db_alias
                                     see AUTHID
 
                      SCHEMA  [OWNER] schema_name
                                     This can be used to set a default
                                     schema_name to be used with any of the
                                     commands for the catalog functions.
                                     When specified, it means that this value
                                     is used whenever -1 is specified for
                                     table_schema on the commands:
 
                                         SQLColumnPrivileges
 
                                         SQLPrimaryKeys
 
                                         SQLSpecialColumns
 
                                         SQLStatistics
 
                                     and for table_schema_pattern on the
                                     commands:
 
                                         SQLColumns
 
                                         SQLTablePrivileges
 
                                         SQLTables
 
                                     and for proc_schema_pattern on the
                                     commands:
 
                                         SQLProcedureColumns
 
                                         SQLProcedures
 
                                     and for both primary_key_schema and
                                     foreign_key_schema on the command:
 
                                         SQLForeignKeys
 
                                     Observe that some commands do not accept
                                     a pattern for this value, so care must
                                     be taken to reset this option when
                                     moving from a command where a SCHEMA
                                     pattern defualt is appropriate to one
                                     where only a SCHEMA name default is
                                     appropriate.  Also it is very unlikely
                                     that one would want to use the
                                     SQLForeignKeys command with this value
                                     set to anything other than the empty
                                     string.
 
                      Any of the above can be set OFF by specifying the value
                      "" (i.e. an empty string).
 
    STDERR
 
                      OFF            When set to OFF, errors and warnings are
                                     displayed to the screen.
 
 
 
 -- 115 --  of 202
                      ON file_name   This is for use with logs.  When
                                     logging, errors and warnings are usually
                                     displayed on the screen.  However, if
                                     STDERR is set to ON, they are written to
                                     a file.
 
                                     This can be the same file as the regular
                                     log.
 
                                     If the file does not exist, a new file
                                     is created.
 
                                     If an existing file is specified, the
                                     errors and warnings are appended as new
                                     lines at the end of the file.
 
    SCRIPT
 
                      OFF            When set to OFF, no command script is
                                     produced.
 
                      ON file_name   When set to ON, a command script is
                                     created from all the commands that are
                                     keyed.  Command scripts can later be
                                     submitted to Interactive CLI again by
                                     use of either the Read command or the
                                     ReadNLog command.  A # separator line is
                                     written to the script file after each
                                     command.
 
                                     If the file does not exist, a new file
                                     is created.
 
                                     If an existing file is specified, the
                                     commands are appended as new lines at
                                     the end of the file.
 
  Successful Result:
 
      If the command is to set an option, it is set (but the only feedback a
      prompt for a new command).
 
      If the command is to display the current option values, they are
      displayed.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 116 --  of 202
  Example:
 
      Following is a possible sequence of commands and responses.
 
        # first, set an database alias and request that a SCRIPT file be created
        #
        >option db_alias MYDB
        >option script on cr8_pub.script_out
 
        #
        # now, display all the current settings
        #
        >option
                  UserName:        ""
                  Authentication:  ""
                  AutoCommit:      Off
                  CallError:       Off
                  DB_Alias:        "MYDB"
                  Delimiter:       "
                  Echo:            Off
                  FillChar:        "\0"
                  Hex:             Off
                  Log Results:     Printed to stdout
                  SchemaName:      ""
                  Prompt:          On
                  Screen:          Off
                  stderr:          Defaults to Screen
                  Script:          On    to File: cr8_pub.script_out
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 117 --  of 202
  1.8.65  SQLParamData
 
  Identify the parameter of a statement that needs data at execution time.
 
 
  Note:   This is one of a set of commands that is used to assign large
          character strings to parameters iteratively in small chunks.  See
          the note with SQLPutData on page 132 for details.
 
  Syntax:
 
    >>--SQLParamData---hstmt---------------------------------------------------------------------------------><
                              +-/testmask/-+
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle of the statement
       needing data.
 
  Successful Result:
 
      If there are [still] parameters that reuire data at execution,
      Interactive CLI displays the identity of that parameter along with a
      return code of 99 (SQL_NEED_DATA).
 
      If there are no such parameters, a return code of 0 (SQL_SUCCESS) or 1
      (SUCCESS_WITH_INFO) is displayed.
 
  Example:
 
      See the example with the SQLPut command on page 133.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 118 --  of 202
  1.8.66  SQLParamOptions
 
  Indicate that parameter values is(are) to be provided via array(s) when
  subsequently executing a specific statement.
 
  Syntax:
 
    >>--SQLParamOptions---hstmt---array_size-----------------------------------------------------------------><
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle of the statement that
       will subsequently be executed.
 
    array_size
       An integer that specifies the number of elements in the array(s); and,
       thus, also indicates the number of times that the statement will be
       executed.
 
  Successful Result:
 
 
 
  Example:
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 119 --  of 202
  1.8.67  Pause
 
  Pause is for use within command scripts that are displaying their results.
  When encountered, it halts execution so that it is possible to examine the
  contents of the screen.
 
 
  Note:   Pressing the <Enter> key causes processing to be resumed.
 
  Syntax:
 
    >>--Pause------------------------------------------------------------------------------------------------><
 
  Successful Result:
 
      Processing of commands from the script halts temporarily.  Interactive
      CLI waits for the <Enter> key to be pressed before resuming.
 
  Example:
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 120 --  of 202
  1.8.68  SQLPrepare
 
  Prepare an SQL statement for later execution.
 
  Syntax:
 
    >>--SQLPrepare---hstmt----sqlstmt---sqlstmt_length-------------------------------------------------------><
                            |                          |
                            +-FILE---file_name---------+
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle that is to be used
       for the statement.
 
    sqlstmt
       A delimited string that contains the SQL statement that is to be
       executed.  Note that the statement will usually contain parameter
       markers.
 
    sqlstmt_length
       Either the length of the statement string or SQL_NTS.
 
    FILE file_name
       The name of the file that contains the statement that is to be
       prepared.
 
       Note that the only thing that can be in the file is the statement.
       That statement may be coded on one or more lines within the file.
 
       The statement should not be enclosed in delimiter characters.
 
  Successful Result:
 
      The SQL statement is prepared at the database to which the application
      is connected.  This prepared form of the statement is then available
      for subsequent execution via the Execute statement.  Also, Interactive
      CLI displays a return code of either 0 indicating success or 1
      indicating success with a warning.
 
  Example:
 
      Given that - there is a statement handle 80 that is in the "allocated" state
                 - the contents of the file QUERY4 in the current directory are as follows:
                       select PUB_NAME, BEER_TRIED, VISITED_ON from PUB_CRAWL_LOG where TOWN = ?
                 - the connected user has the privilege to select from the PUB_CRAWL_LOG table
      then a typical sequence of commands and responses would be:
 
        >sqlprepare 80 file query4
        SQLPrepare: rc = 0 (SQL_SUCCESS)
        #
        # set the value of the parameter marker to search for Stratford
        #
        >getmem 80 8011 sql_c_char 21
        Memory buffer 8011 for statement handle 80 allocated
        >sqlsetparam 80 1  sql_c_char  sql_varchar  21  0  8011
        SQLSetparam: rc = 0 (SQL_SUCCESS)
        >updatemem 8011 sql_c_char value 7 Stratford
        Memory buffer 8011 for statement handle 80 updated
 
 
 
 
 
 -- 121 --  of 202
        #
        # execute the query
        #
        >sqlexecute 80
        SQLExecute: rc = 0 (SQL_SUCCESS)
        #
        # bind memory buffers to the result set
        #
        >getmem 80 8021 SQL_C_CHAR 51
        Memory buffer 8021 for statement handle 80 allocated
        >getmem 80 8022 SQL_C_CHAR 31
        Memory buffer 8022 for statement handle 80 allocated
        >getmem 80 8023 SQL_C_DATE
        Memory buffer 8023 for statement handle 80 allocated
        >sqlbindcol 80 1  SQL_C_CHAR  8021
        SQLBindCol: rc = 0 (SQL_SUCCESS)
        >sqlbindcol 80 2  SQL_C_CHAR  8022
        SQLBindCol: rc = 0 (SQL_SUCCESS)
        >sqlbindcol 80 3  SQL_C_DATE  8023
        SQLBindCol: rc = 0 (SQL_SUCCESS)
 
        #
        # fetch a row
        #
        >sqlfetch 80
        SQLFetch: rc = 0 (SQL_SUCCESS)
        #
        # list the memory buffers for the statement
        #
        >list buffs 80
        Buffs: mHandle hstmt  bufSize  usedSize   Mask       CType
                 {8011}     80        21         9      0       SQL_C_CHAR
        Contents: "Stratford"
                 {8021}     80        51         16      0       SQL_C_CHAR
        Contents: "Slug and Lettuce"
                 {8022}     80        31         23      0       SQL_C_CHAR
        Contents: "Flower's Special Bitter"
                 {8023}     80        8          8      0      SQL_C_DATE
        Contents: 1993 05 29
        #
        # and carry on
        #
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 122 --  of 202
  1.8.69  SQLPrimaryKeys
 
  Obtain a result set containing a row for each of the columns in the primary
  key for a given table.
 
 
  Note:   The effect of this command is the same as an SQLExecDirect command
          with the appropriate select-statement against the catalog.  Thus,
          the SQLPrimaryKeys command may be followed commands such as
          SQLFetch to display the result set.
 
  Syntax:
 
    >>--SQLPrimaryKeys---hstmt------------------------------------------------------------------------------->
 
                  >-- -1-------------0----------------------------------------------------------------------->
 
                  >---table_schema---table_schema_length----------------------------------------------------->
 
                  >---table_name-----table_name_length-------------------------------------------------------><
 
  Parameters:
 
       The integer that identifies the statement handle that is to be used
       for the result set returned by the command.
 
    -1
       This is the table_catalog argument which must always be a nul value in
       this release.
 
    0
 
    table_schema
       The table's schema name (case sensitive).
 
       The SET SCHEMA variation of the Option command (see page 118) can be
       used to set a default schema name.  In cases where such a default has
       been set, -1 is specified here to opt for that default.
 
    table_schema_length
       Either the length of the schema name or SQL_NTS.
 
    table_name
       The table's name (case sensetive).
 
    table_name_length
       Either the length of the table name or SQL_NTS.
 
  Successful Result:
 
      A result set is returned and a cursor is opened on the statement
      handle.  The data in the result set is made available for retrieval via
      the SQLFetch command.  Also, Interactive CLI displays a return code of
      either 0 (SQL_SUCCESS) or 1 (SUCCESS_WITH_INFO).  If no rows are found
      that match the search criteria, an empty result set is returned and the
      return code from SQLFetch will be SQL_NO_DATA_FOUND.
 
 
 
 
 
 
 
 
 
 -- 123 --  of 202
  Example:
 
      Given that - there is a connection identified by 2 the the PUB database
                 - the user on that connection is CLITEST1
                 - there is allocated statement, 12, on connection 2
      then a possible sequence of commands and responses would be:
 
        # List the primary key columns for the PUB_CRAWL_LOG table.
        #
        >sqlprimarykeys 12   -1 0   CLITEST1 sql_nts   PUB_CRAWL_LOG sql_nts
        SQLPrimarkKeys: rc = 0 (SQL_SUCCESS)
        #
        # Fetch the rows, then close the cursor
        #
        >fetchall 12
        FetchAll:  Columns: 6
          TABLE_CAT TABLE_SCHEM TABLE_NAME COLUMN_NAME ORDINAL_POSITION PK_NAME
          -, CLITEST1, PUB_CRAWL_LOG, PUB_NAME, 1, -
          -, CLITEST1, PUB_CRAWL_LOG, VISITED_ON, 2, -
          FetchAll: 2 rows fetched.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 124 --  of 202
  1.8.70  SQLProcedureColumns
 
  Return a result set that contains information about the parameters (not
  columns, in spite of the name that we inherited from ODBC) of one or more
  stored procedures. Both the procedures and the parameters may be filtered
  by specifying name patterns.
 
  Only procedures that have been registered in the DB2CLI.PROCEDURES table
  will be present in the result set returned by this command.
 
  Notes:  The effect of this command is the same as an SQLExecDirect command
          with the appropriate select-statement against the catalog.  Thus,
          the SQLProcedureColumns command may be followed commands such as
          SQLFetch to display the result set.
 
 
  Syntax:
 
    >>--SQLProcedureColumns---hstmt-------------------------------------------------------------------------->
 
                  >-- -1--------------------0---------------------------------------------------------------->
 
                  >---proc_schema_pattern---proc_schema_pattern_length--------------------------------------->
 
                  >---proc_name_pattern-----proc_name_pattern_length----------------------------------------->
 
                  >---param_name_pattern----param_name_pattern_length----------------------------------------><
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle that is to be used
       for the result set returned by the command.
 
    -1
       This is a ***catalog argument which must always be a nul value in this
       release.
 
    0
 
    proc_schema_pattern
       Either a (case sensitive) pattern (as per the LIKE predicate) used to
       select procedure schema names or -1 used to indicate that all
       procedures are to be selected.
 
       The SET SCHEMA variation of the Option command (see page 118) can be
       used to set a default schema pattern.  In cases where such a default
       has been set, -1 is specified here to opt for that default.
 
    proc_schema_pattern_length
       Either the length of the procedure schema pattern or SQL_NTS.
 
    proc_name_pattern
       Either a (case sensitive) pattern used to select procedure names or -1
       used to indicate that a ll procedures are to be selected.
 
    proc_name_pattern_length
       Either the length of the procedure name pattern or SQL_NTS.
 
    param_pattern
       Either a (case sensitive) pattern used to select parameters or -1 used
       to indicate that all parameters are to be selected.
 
 
 
 -- 125 --  of 202
    param_pattern_length
       Either the length of the procedure name pattern or SQL_NTS.
 
  Successful Result:
 
      A result set is returned and a cursor is opened on the statement
      handle.  The data in the result set is made available for retrieval via
      the SQLFetch command.  Also, Interactive CLI displays a return code of
      either 0 (SQL_SUCCESS) or 1 (SUCCESS_WITH_INFO).  If no rows are found
      that match the search criteria, an empty result set is returned and the
      return code from SQLFetch will be SQL_NO_DATA_FOUND.
 
  Example:
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 126 --  of 202
  1.8.71  SQLProcedures
 
  Return a result set that contains information about one or more procedures.
  The procedures may be filtered by specifying a name pattern.
 
 
  Note:   The effect of this command is the same as an SQLExecDirect command
          with the appropriate select-statement against the catalog.  Thus,
          the SQLProcedures command may be followed commands such as SQLFetch
          to display the result set.
 
  Syntax:
 
      SQLProcedureshstmt
 
                     -10
 
                    proc_schema_patternproc_schema_pattern_length
 
                    proc_name_patternproc_name_pattern_length

 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle that is to be used
       for the result set returned by the command.
 
    -1
       This is a ***catalog argument which must always be a nul value in this
       release.
 
    0
 
    proc_schema_pattern
       Either a (case sensitive) pattern (as per the LIKE predicate) used to
       select procedure schema names or -1 used to indicate that all
       procedures are to be selected.
 
       The SET SCHEMA variation of the Option command (see page 118) can be
       used to set a default schema pattern.  In cases where such a default
       has been set, -1 is specified here to opt for that default.
 
    proc_schema_pattern_length
       Either the length of the procedure schema pattern or SQL_NTS.
 
    proc_name_pattern
       Either a (case sensitive) pattern (as per the LIKE predicate) used to
       select procedures or -1 used to indicate that all procedures are to be
       selected.
 
    proc_name_pattern_length
       Either the length of the procedure name pattern or SQL_NTS.
 
  Successful Result:
 
      A result set is returned and a cursor is opened on the statement
      handle.  The data in the result set is made available for retrieval via
      the SQLFetch command.  Also, Interactive CLI displays a return code of
      either 0 (SQL_SUCCESS) or 1 (SUCCESS_WITH_INFO).  If no rows are found
      that match the search criteria, an empty result set is returned and the
      return code from SQLFetch will be SQL_NO_DATA_FOUND.
 
  Example:
 
 
 -- 127 --  of 202
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 128 --  of 202
  1.8.72  SQLPutData
 
  Assign data to a parameter marker in a statement at the time of execution
  of that statement.
 
  A major use of this command is to assign large character strings
  iteratively in small chunks.
 
 
  Note:   This command is used in conjunction with other commands in steps
          such as those outlined below:
 
          1.  The ChangeParam command is used to indicate that a memory
              buffer is to be used for SQL_DATA_AT_EXEC.
 
          2.  The SQLBindParameter or SQLSetParam command is used (with the
              HANDLE option) to assign the buffer from step 1 to a parameter.
 
          3.  The statement is executed via either an SQLExecute or
              SQLExecDirect command.  If there are any parameters that
              require SQL_DATA_AT_EXEC, the return code from the command is
              99 (that is, SQL_NEED_DATA).
 
          4.  The SQLParamData command is used to obtain the identity of the
              parameter (its ordinal position in the statement) that requires
              data at execution time.
 
          5.  The SQLPutData command is used to assign data from a memory
              buffer to the parameter identified in the SQPRaramData command
              from step 4.  Either:
 
              o   The complete value can be assigned in one use of
                  SQLPutData,
 
              or:
 
              o   The value can be assigned in segments by multiple uses
                   of SQLPutData.
 
          6.  The SQLParamData command is used to indicate that all the data
              has been assigned to the parameter.
 
              o   If there are any more parameters that require
                  SQL_DATA_AT_EXEC, then SQLParamData returns the identity of
                  the next such parameter along with the return code of
                  SQL_NEED_DATA.
 
              o   Otherwise, the return code is SQL_SUCCESS).
 
  Syntax:
 
    >>--SQLPutData---hstmt---hmembuf-------------------------------------------------------------------------><
                                        +-segment_length-+
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle of the statement for
       which data is to be assigned to a parameter.
 
    hmembuf
       The integer that identifies the handle of the memory buffer that
       contains the data that is to be assigned to the parameter.
 
 
 -- 129 --  of 202
    segment_length
       For parameters defined as either SQL_C_CHAR or SQL_C_BINARY in the
       earlier SQLBindParameter or SQLSetParam command, the data can be
       assigned in increments.  If this is specified, the number of bytes
       specified are transferred from the memory buffer (starting at byte 1
       of the buffer) and appended to the value of the parameter value that
       is currently being constructed.
 
  Successful Result:
 
      The data is appended to the parameter value.  Interactive CLI displays
      a return code of either 0 indicating that the command was successful or
      1 indicating success with warning.
 
 
 
  Example:
 
      Given that - the existence of the PUB_CRAWL_LOG table described
                   in 1.9, "Example Tables and Scripts" on page 176
                 - there is a connection (with id = 2) to the PUB database
                 - statement handles 10 and 13 exist in the allocated state
                   on connection 2
      then the following sequence of commands and responses shows the
      insertion of a new row into the table:
 
        # Prepare statement to insert data into the table:
        #
        >sqlprepare 10 "insert into PUB_CRAWL_LOG values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)" sql_nts
        SQLPrepare: rc = 0 (SQL_SUCCESS)
        #
        # Get buffers to use for inserting values:
        #
        >getmem 10 101  sql_c_char 51
        GetMem: memory buffer 101 for statement handle 10 allocated.
        >getmem 10 102  sql_c_char 26
        GetMem: memory buffer 102 for statement handle 10 allocated.
        >getmem 10 103  sql_c_char 26
        GetMem: memory buffer 103 for statement handle 10 allocated.
        >getmem 10 104  sql_c_char 26
        GetMem: memory buffer 104 for statement handle 10 allocated.
        >getmem 10 1059 sql_c_date
        GetMem: memory buffer 1059 for statement handle 10 allocated.
        >getmem 10 1069 sql_c_char 31
        GetMem: memory buffer 1069 for statement handle 10 allocated.
        >getmem 10 107  sql_c_char 6
        GetMem: memory buffer 107 for statement handle 10 allocated.
        >getmem 10 1089 sql_c_float
        GetMem: memory buffer 1089 for statement handle 10 allocated.
        >getmem 10 1099 sql_c_char 2
        GetMem: memory buffer 1099 for statement handle 10 allocated.
        >getmem 10 1109 sql_c_short
        GetMem: memory buffer 1109 for statement handle 10 allocated.
        >getmem 10 1119 sql_c_char 2001
        GetMem: memory buffer 1119 for statement handle 10 allocated.
        >getmem 10 905  sql_c_date
        GetMem: memory buffer 905 for statement handle 10 allocated.
        >getmem 10 906  sql_c_char 31
        GetMem: memory buffer 906 for statement handle 10 allocated.
        >getmem 10 908  sql_c_float
        GetMem: memory buffer 908 for statement handle 10 allocated.
        >getmem 10 909  sql_c_char 2
        GetMem: memory buffer 909 for statement handle 10 allocated.
 
 
 -- 130 --  of 202
        >getmem 10 910  sql_c_short
        GetMem: memory buffer 910 for statement handle 10 allocated.
        >getmem 10 911  sql_c_char 51
        GetMem: memory buffer 911 for statement handle 10 allocated.
        #
        # Set buffers ending in 9 to indicate that data is to be inserted at execution:
        #
        >changeparam 1059 sql_data_at_exec
        ChangeParam: memory buffer 1059 changed.
        >changeparam 1069 sql_data_at_exec
        ChangeParam: memory buffer 1069 changed.
        >changeparam 1089 sql_data_at_exec
        ChangeParam: memory buffer 1089 changed.
        >changeparam 1099 sql_data_at_exec
        ChangeParam: memory buffer 1099 changed.
        >changeparam 1109 sql_data_at_exec
        ChangeParam: memory buffer 1109 changed.
        >changeparam 1119 sql_data_at_exec
        ChangeParam: memory buffer 1119 changed.
        #
        # Assign the buffers to the INSERT statement:
        #
        >sqlsetparam 10  1 sql_c_char   sql_varchar    51  0  101
        SQLSetParam: rc = 0 (SQL_SUCCESS)
        >sqlsetparam 10  2 sql_c_char   sql_varchar    26  0  102
        SQLSetParam: rc = 0 (SQL_SUCCESS)
        >sqlsetparam 10  3 sql_c_char   sql_varchar    26  0  103
        SQLSetParam: rc = 0 (SQL_SUCCESS)
        >sqlsetparam 10  4 sql_c_char   sql_varchar    26  0  104
        SQLSetParam: rc = 0 (SQL_SUCCESS)
        >sqlsetparam 10  5 sql_c_date   sql_date       10  0  1059  handle
        SQLSetParam: rc = 0 (SQL_SUCCESS)
        >sqlsetparam 10  6 sql_c_char   sql_varchar    31  0  1069  handle
        SQLSetParam: rc = 0 (SQL_SUCCESS)
        >sqlsetparam 10  7 sql_c_char   sql_decimal     4  2  107
        SQLSetParam: rc = 0 (SQL_SUCCESS)
        >sqlsetparam 10  8 sql_c_float  sql_float      15  0  1089  handle
        SQLSetParam: rc = 0 (SQL_SUCCESS)
        >sqlsetparam 10  9 sql_c_char   sql_char        2  0  1099  handle
        SQLSetParam: rc = 0 (SQL_SUCCESS)
        >sqlsetparam 10 10 sql_c_short  sql_smallint    5  0  1109  handle
        SQLSetParam: rc = 0 (SQL_SUCCESS)
        >sqlsetparam 10 11 sql_c_char   sql_varchar  2001  0  1119  handle
        SQLSetParam: rc = 0 (SQL_SUCCESS)
        #
        # Set the buffers that are to contain data in advance of exececution:
        >updatemem 101 sql_c_char  value  13  "Waverly Hotel"
        UpdateMem: memory buffer 101 for statement handle 10 updated.
        >updatemem 102 sql_c_char  value   6  Hearst
        UpdateMem: memory buffer 102 for statement handle 10 updated.
        >updatemem 103 sql_c_char  value   7  Ontario
        UpdateMem: memory buffer 103 for statement handle 10 updated.
        >updatemem 104 sql_c_char  value   6  Canada
        UpdateMem: memory buffer 104 for statement handle 10 updated.
        >updatemem 107 sql_c_char  value   3  .75
        UpdateMem: memory buffer 107 for statement handle 10 updated.
        #
        # Execute the INSERT  (should return SQL_NEED_DATA):
        #
        >check func_rc sql_need_data
        >sqlexecute 10
        SQLExecute: rc = 99 (SQL_NEED_DATA)
        #
 
 
 -- 131 --  of 202
        # Use SQLParam Data do locate 1st parameter that needs data (should be 5):
        #
        >sqlparamdata 10
        SQLParamData: rc = 99 (SQL_NEED_DATA)
        SQLParamData:  rgbValue: 423
        #
        # Set then put value for parameter 5:
        >updatemem 905 sql_c_date  value 1976 06 21
        UpdateMem: memory buffer 905 for statement handle 10 updated.
        >sqlputdata 10 905
        SQLPutData: rc = 0 (SQL_SUCCESS)
        #
        # Next parameter needing data should be 6; set then put it:
        >sqlparamdata 10
        SQLParamData: rc = 99 (SQL_NEED_DATA)
        SQLParamData:  rgbValue: 42d
        >updatemem 906 sql_c_char  value  20  "Northern Ale (Doran)"
        UpdateMem: memory buffer 906 for statement handle 10 updated.
        >sqlputdata 10 906
        SQLPutData: rc = 0 (SQL_SUCCESS)
        #
        # Now, parameter 8:
        #
        >sqlparamdata 10
        SQLParamData: rc = 99 (SQL_NEED_DATA)
        SQLParamData:  rgbValue: 441
        >updatemem 908 sql_c_float value  4e3
        UpdateMem: memory buffer 908 for statement handle 10 updated.
        >sqlputdata 10 908
        SQLPutData: rc = 0 (SQL_SUCCESS)
        #
        # Now, parameter 9:
        #
        >sqlparamdata 10
        SQLParamData: rc = 99 (SQL_NEED_DATA)
        SQLParamData:  rgbValue: 44b
        >updatemem 909 sql_c_char  value   1  G
        UpdateMem: memory buffer 909 for statement handle 10 updated.
        >sqlputdata 10 909
        SQLPutData: rc = 0 (SQL_SUCCESS)
        #
        # Now, parameter 10:
        #
        >sqlparamdata 10
        SQLParamData: rc = 99 (SQL_NEED_DATA)
        SQLParamData:  rgbValue: 455
        >updatemem 910 sql_c_short value   0
        UpdateMem: memory buffer 910 for statement handle 10 updated.
        >sqlputdata 10 910
        SQLPutData: rc = 0 (SQL_SUCCESS)
        #
        # Now, parameter 11.  It will be put in several chunks.
        #
        >sqlparamdata 10
        SQLParamData: rc = 99 (SQL_NEED_DATA)
        SQLParamData:  rgbValue: 45f
        >updatemem 911 sql_c_char  value  50  "This is an old railway hotel right on hightway 11."
        UpdateMem: memory buffer 911 for statement handle 10 updated.
        >sqlputdata 10 911 50
        SQLPutData: rc = 0 (SQL_SUCCESS)
        >updatemem 911 sql_c_char  value  50  "  It has the typical old small town Ontario Beer P"
        UpdateMem: memory buffer 911 for statement handle 10 updated.
        >sqlputdata 10 911 50
 
 
 -- 132 --  of 202
        SQLPutData: rc = 0 (SQL_SUCCESS)
        >updatemem 911 sql_c_char  value  50  "arlour atmosphere.  On this occassion, my brother "
        UpdateMem: memory buffer 911 for statement handle 10 updated.
        >sqlputdata 10 911 50
        SQLPutData: rc = 0 (SQL_SUCCESS)
        >updatemem 911 sql_c_char  value  50  "Bruce and I visited it about 16:30 on a hot day (a"
        UpdateMem: memory buffer 911 for statement handle 10 updated.
        >sqlputdata 10 911 50
        SQLPutData: rc = 0 (SQL_SUCCESS)
        >updatemem 911 sql_c_char  value  50  "bout 35 degrees) after work from 7:00 unloading th"
        UpdateMem: memory buffer 911 for statement handle 10 updated.
        >sqlputdata 10 911 50
        SQLPutData: rc = 0 (SQL_SUCCESS)
        >updatemem 911 sql_c_char  value  50  "e material for the cabin from a boxcar.  This is t"
        UpdateMem: memory buffer 911 for statement handle 10 updated.
        >sqlputdata 10 911 50
        SQLPutData: rc = 0 (SQL_SUCCESS)
        >updatemem 911 sql_c_char  value  50  "he only time that I have ever had  Northern Ale wh"
        UpdateMem: memory buffer 911 for statement handle 10 updated.
        >sqlputdata 10 911 50
        SQLPutData: rc = 0 (SQL_SUCCESS)
        >updatemem 911 sql_c_char  value  50  "en it rated as high a G.  We were in and then out "
        UpdateMem: memory buffer 911 for statement handle 10 updated.
        >sqlputdata 10 911 50
        SQLPutData: rc = 0 (SQL_SUCCESS)
        >updatemem 911 sql_c_char  value  50  "of the place in 10 minutes, but I still remeber th"
        UpdateMem: memory buffer 911 for statement handle 10 updated.
        >sqlputdata 10 911 50
        SQLPutData: rc = 0 (SQL_SUCCESS)
        >updatemem 911 sql_c_char  value  19  "e occasion vividly."
        UpdateMem: memory buffer 911 for statement handle 10 updated.
        >sqlputdata 10 911 12
        SQLPutData: rc = 0 (SQL_SUCCESS)
        #
        # Call SQLParamData again; this time to say that operation is complete
        #
        >sqlparamdata 10
        SQLParamData: rc = 0 (SQL_SUCCESS)
        #
        # Select the rows from the table, display them, then close the cursor
        #
        >sqlexecdirect 13 "select * from PUB_CRAWL_LOG" sql_nts
        SQLExecDirect: rc = 0 (SQL_SUCCESS)
        >fetchall 13
        FetchAll:  Columns: 11
          PUB_NAME TOWN POLITICAL_UNIT COUNTRY VISITED_ON BEER_TRIED PRICE ALC_CONTENT RATING PICTURE_TAKEN DESCRIPTION
 
              ... display of previous rows -not shown here ...
 
          Waverly Hotel, Hearst, Ontario, Canada, 1976-06-21, Northern Ale (Doran), 0.75, 4.00000000000000e+03, G, 0,
          This is an old railway hotel right on hightway 11.  It has the typical old small town Ontario Beer Parlour
          atmosphere.  On this occassion, my brother Bruce and I visited it about 16:30 on a hot day (about 35 degrees)
          after work from 7:00 unloading the material for the cabin from a boxcar.  This is the only time that I have
          ever had  Northern Ale when it rated as high a G.  We were in and then out of the place in 10 minutes, but I
          still remeber the occasion vividly.
                (note to the reader: all the above text will be displayed on one long line.)
 
          FetchAll: 12 rows fetched.
        >sqlfreestmt 13 sql_close
        SQLFreeStmt: rc = 0 (SQL_SUCCESS)
 
 
 
 
 
 -- 133 --  of 202
  1.8.73  QuickConnect
 
  QuickConnect combines the effect of the SQLAllocEnv, SQLAllocConnect, and
  SQLConnect functions into one "shortcut" function.
 
 
  Note:   If the option FILLCHAR (see page 116) is not set to DEFAULT, then
          an implicit SQLSetEnvAttr() call is made in order to set the
          SQL_ATTR_OUTPUT_NTS option to SQL_FALSE -thus turning it off before
          the SQLAllocConnect() call is made.
 
  Syntax:
 
    >>--QuickConnect---henv---hdbc---------------------------------------------------------------------------><
                                    +-db_alias---------------------------------+
                                                +-user_name---authentication-+
 
  Parameters:
 
    henv
       The integer to which the environment handle is to be allocated.
 
    hdbc
       The integer to which the connection handle is to be allocated.
 
    db_alias
       A string containing the alias for the database to which the connection
       is to be established.
 
       If this is not coded, then the Option SET command must previously been
       have used to set a "current" db_alias.
 
    user_name
       A string containing the userid that is attempting the connection.
 
    authentication
       A string containing the password of the userid that is attempting the
       connection.
 
    Note: Unlike the SQLConnect command, all the argument values are always
          assumed to be null terminated so Interactive CLI will count the
          length of the strings and no length parameters are needed.
 
  Successful Result:
 
      The environment and connection handles are allocated and a connection
      is established.  The return codes resulting from the execution of all
      three underlying functions are displayed.
 
  Example:
 
      Given that user MLI is authorized to the database PUBS with the password CREEMORE
      then the command:
 
        >quickconnect  2  8  pubs  mli  creemore
 
      would likely result in the response:
 
        SQLAllocEnv: rc = 0 (SQL_SUCCSS)
                     CLI henv = 1, Test Driver henv = 2
        SQLAllocConnect: rc = 0 (SQL_SUCCSS)
                     CLI hdbc = 1, Test Driver hdbc = 8
        SQLConnect: rc = 0 (SQL_SUCCSS)
 
 
 -- 134 --  of 202
  1.8.74  Quit
 
   Quit the Interactive CLI facility and return to the operating system
   prompt.
 
  Syntax:
 
    >>--Quit-------------------------------------------------------------------------------------------------><
 
  Successful Result:
 
      The Interactive CLI session is terminated and the prompt line of the
      containing shell is displayed.
 
  Example:
 
      I keyed the following command about a minute ago:
 
        >quit
 
      and the response (from the emacs shell in AIX) was:
 
        (pellow@corona) /u/pellow/sqllib/samples/cli $ _
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 135 --  of 202
  1.8.75  Read
 
  Read and execute the commands in a "command script" file.  All the commands
  in the named file are executed and the results are displayed on the screen.
 
 
  Notes:  Pause commands can be placed anywhere in the script.  They cause
          processing to be temporarily halted so that the results on the
          screen can be examined.
 
          If the LOG option is ON, then the results are written to a file
          rather than having them displayed on the screen.
 
          If both the LOG and ECHO options are ON, then both the commands and
          the results are written to the screen.
 
          Each command occupies a single line.  In this version there is no
          provision for splitting a long command over several lines.
 
  Syntax:
 
    >>--Read---file_name-------------------------------------------------------------------------------------><
 
  Parameters:
 
    file_name
       The name of the file that contains the command script.
 
  Successful Result:
 
      The commands are read from the specified command script file and
      processed by Interactive CLI.
 
  Example:
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 136 --  of 202
  1.8.76  ReadNLog
 
  ReadNLog is simply a shortcut for the command sequence:
 
      Option LOG on file_name.LOG
      #
      Read file_name
 
  Syntax:
 
    >>--ReadNLog---file_name---------------------------------------------------------------------------------><
 
  Parameters:
 
    file_name
       The name of the file that contains the command script.
 
  Successful Result:
 
      The commands are read from the specified command script file and the
      results are written to a file that has a name that is that of the name
      of the command script file with the letters .LOG appended.
 
  Example:
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 137 --  of 202
  1.8.77  SQLRowCount
 
  Display the number of rows directly affected by an SQL UPADTE, INSERT, or
  DELETE statement.
 
  Syntax:
 
    >>--SQLRowCount---hstmt----------------------------------------------------------------------------------><
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle of a previously
       executed UPDATE, INSERT, or DELETE statement.
 
  Successful Result:
 
      The row count is displayed.  Also, Interactive CLI displays a return
      code of 0 indicating that the command was successful.
 
      If the last SQL statement executed on the handle was other than UPDATE,
      INSERT, or DELETE, then the row count returned is -1.
 
  Example:
 
      Given that - statement handle 35 is in the allocated state,
                 - there are 3 rows in the PUB_CRAWL_LOG table that have a value
                   of 'Leningrad' in the TOWN column,
      then a typical sequence of commands and responses would be:
 
        >sqlexecdirect 35
           "update PUB_CRAWL_LOG set NAME='St Petersburg' where NAME='Leningrad'"
           sql_nts
        SQLExecDirect: rc = 0 (SQL_SUCESS)
        #
        >sqlrowcount 35
        SQLRowCount: rc = 0 (SQL_SUCCESS)
                Row count = 3
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 138 --  of 202
  1.8.78  SaveFile
 
  Save the contents of the buffers for the SCRIPT and LOG files to disk.
 
 
  Note:   One use of this is insure that the log file and script files are is
          complete if one wishes to examine them without quitting Interactive
          CLI.
 
          Another use is as a precaution against a future crash of
          Interactive CLI or its underlying software/hardware.
 
  Syntax:
 
    >>--SaveFile---------------------------------------------------------------------------------------------><
 
  Successful Result:
 
 
 
  Example:
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 139 --  of 202
  1.8.79  SQLSetColAttributes
 
  Set information about a column of the result set so that it is not
  necessary to obatain the information from the DBMS.
 
 
  Note:   This provides an optimization for applications that know the
          structure of the result sets in advance.
 
  Syntax:
 
    >>--SQLSetColAttributes---hstmt---column---column_name---column_name_length--------------------------->
 
                                               +-0--------------0--------SQL_NULLABLE-----+
                   >----SQL_CHAR---------------+------------------------------------------+---------------><
                      |-SQL_VARCHAR--------|   |             +-0---------SQL_NULLABLE---+ |
                      |-SQL_LONGVARCHAR----|   +-precision---+--------------------------+-+
                      |-SQL_GRAPHIC--------|                 |         +-SQL_NULLABLE-+ |
                      |-SQL_VARGRAPHIC-----|                 +-scale---+--------------+-+
                      |-SQL_LONGVARGRAPHIC-|                           +-SQL_NO_NULLS-+
                      |-SQL_SMALLINT-------|
                      |-SQL_INTEGER--------|
                      |-SQL_DECIMAL--------|
                      |-SQL_NUMERIC--------|
                      |-SQL_DOUBLE---------|
                      |-SQL_FLOAT----------|
                      |-SQL_REAL-----------|
                      |-SQL_DATE-----------|
                      |-SQL_TIME-----------|
                      |-SQL_TIMESTAMP------|
                      |-SQL_BINARY---------|
                      |-SQL_VARBINARY------|
                      |-SQL_LONGVARBINARY--|
                      |-SQL_BLOB-----------|
                      |-SQL_CLOB-----------|
                      +-SQL_DBCLOB---------+
 
                             sql_type
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle of the result set.
 
    column
       Column number within the result set, ordered sequentially left to
       right, starting at 1.
 
    column_name
       The name of the column.
 
    column_name_length
       Either the length of the column_name string or SQL_NTS.
 
    sql_type
 
  +--- To do ---------------------------------------------------------------+
  |                                                                         |
  | Say something for these three arguments (and note that precision means  |
  | max length for the string types).                                       |
  |                                                                         |
  +-------------------------------------------------------------------------+
 
 
 
 -- 140 --  of 202
    precision
 
    scale
 
    SQL_NULLABLE | SQL_NO_NULLS
       Observe that SQL_NULLABLE is the default.
 
  Successful Result:
 
 
 
  Example:
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 141 --  of 202
  1.8.80  SQLSetConnection
 
  Switch to a specific connection before continuing.  The equivalent function
  in CLI is used when mixing CLI calls and embedded SQL.  It is of no
  practical use with Interactive CLI.
 
  Syntax:
 
    >>--SQLSetConnection---hdbc------------------------------------------------------------------------------><
 
  Parameters:
 
    hdbc.
       The integer that identifies the connection handle of the connection to
       which the switch is to be made.
 
  Successful Result:
 
 
 
  Example:
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 142 --  of 202
  1.8.81  SQLSetConnectOption
 
  Set a connection attribute for a specific connection handle.
 
  or
 
  Set a statement attribute for all current and future statement handles that
  are defined on the connection.  These can subsequently be individually
  changed with the SQLSetStmtOption command.
 
  Syntax:
 
    >>--SQLSetConnectOption---hdbc------SQL_ACCESS_MODE--------------char_string_value-----------------------><
                                    | |-SQL_AUTOCOMMIT--------| |  |                   |  +-/testmask/-+
                                    | |-SQL_CONNECTTYPE-------| |  +-long_int_value----+
                                    | |-SQL_CURRENT_QUALIFIER-| |
                                    | |-SQL_CURRENT_SCHEMA----| |
                                    | |-SQL_DB2ESTIMATE-------| |
                                    | |-SQL_DB2EXPLAIN--------| |
                                    | |-SQL_LOGIN_TIMEOUT-----| |
                                    | |-SQL_LONGDATA_COMPAT---| |
                                    | |-SQL_MAXCONN-----------| |
                                    | |-/SQL_OPT_TRACE/---------| |
                                    | |-/SQL_OPT_TRACEFILE/-----| |
                                    | |-/SQL_PACKET_SIZE/-------| |
                                    | |-SQL_QUIET_MODE--------| |
                                    | |-SQL_SYNC_POINT--------| |
                                    | |-/SQL_TRANSLATE_DDL/-----| |
                                    | |-/SQL_TRANSLATE_OPTION/--| |
                                    | |-SQL_TXN_ISOLATION-----| |
                                    | +-SQLWCHAR_TYPE---------+ |
                                    |                           |
                                    |   option (connection)     |
                                    |                           |
                                    |                           |
                                    +---SQL_ASYNC_ENABLE--------+
                                      |-SQL_BIND_TYPE---------|
                                      |-SQL_CONCURRENCY-------|
                                      |-SQL_CURSOR_HOLD-------|
                                      |-SQL_CURSOR_TYPE-------|
                                      |-SQL_MAX_LENGTH--------|
                                      |-SQL_MAX_ROWS----------|
                                      |-SQL_NODESCRIBE--------|
                                      |-SQL_NOSCAN------------|
                                      |-SQL_PARAMOPT_ATOMIC---|
                                      |-SQL_QUERY_TIMEOUT-----|
                                      |-SQL_RETRIEVE_DATA-----|
                                      |-SQL_ROWSET_SIZE-------|
                                      +-SQL_STMTTXN_ISOLATION-+
 
                                          option (statement)
 
  Parameters:
 
    hdbc
       The integer that identifies the connection handle whose attribute is
       being set.
 
    option
       One of the values shown in the syntax diagram.
 
 
 
 
 
 -- 143 --  of 202
    char_string value | long_int_value
       For a description of the connection values for each attribute, refer
       to Table 123 starting on page 341 of the V2.1 DB2 CLI Guide and
       Reference.  The statement values can be found in Table 133 starting on
       page 366.  Values are either case sensitive character strings (which
       Interactive CLI always automatically nul-terminates) or integers.
 
       Some of the values that are to be specified for the attributes are
       themselves #define values and, in this version of Interactive CLI, the
       number rather than #define constant must be used.  A list of the
       #define values follows:
 
            Attribute                   #define Values                  Number
            ---------                   --------------                  ------
            SQL_ACCESS_MODE             SQL_MODE_READ_ONLY              1
                                        SQL_MODE_READ_WRITE             0
 
            SQL_AUTOCOMMIT              SQL_AUTOCOMMIT_ON               1
                                        SQL_AUTOCOMMIT_OFF              0
 
            SQL_CONNECTTYPE             SQL_CONCURRENT_TRANS            1
                                        SQL_COORDINATED_TRANS           2
 
            SQL_DB2EXPLAIN              SQL_DB2EXPLAIN_ON               1
                                        SQL_DB2EXPLAIN_OFF              0
 
            SQL_LONGDATA_COMPAT         SQL_LD_COMPAT_NO                0
                                        SQL_LD_COMPAT_YES               1
 
            SQL_SYNC_POINT              SQL_ONEPHASE                    1
                                        SQL_TWOPHASE                    2
 
            SQL_TXN_ISOLATION           SQL_TXN_READ_UNCOMMITTED        1
            SQL_STMTTXN_ISOLATION       SQL_TXN_READ_COMMITTED          2
                                        SQL_TXN_REPEATABLE_READ         4
                                        SQL_TXN_SERIALIZABLE            8
                                        SQL_TXN_NOCOMMIT               32
 
            SQL_WCHARTYPE               SQL_WCHARTYPE_CONVERT           1
                                        SQL_WCHARTYPE_NOCONVERT         0
 
            SQL_ASYNC_ENABLE            SQL_ASYNC_ENABLE_OFF            0
                                        SQL_ASYNC_ENABLE_ON             1
 
            SQL_BIND_TYPE               SQL_BIND_BY_COLUMN              0
 
            SQL_CONCURRENCY             SQL_CONCUR_READ_ONLY            1
                                        SQL_CONCUR_LOCK                 2
 
            SQL_CURSOR_HOLD             SQL_CURSOR_HOLD_ON              1
                                        SQL_CURSOR_HOLD_OFF             0
 
            SQL_CURSOR_TYPE             SQL_CURSOR_FORWARD_ONLY         0
 
            SQL_NODECSCRIBE             SQL_NODESCRIBE_OFF              0
                                        SQL_NODESCRIBE_ON               1
 
            SQL_NOSCAN                  SQL_NOSCAN_OFF                  0
                                        SQL_NOSCAN_ON                   1
 
            SQL_PARAMOPT_ATOMIC         SQL_ATOMIC_YES                  1
                                        SQL_ATOMIC_NO                   0
 
 
 
 -- 144 --  of 202
            SQL_RETRIEVE_DATA           SQL_RD_ON                       1
                                        SQL_RD_OFF                      0
 
  Successful Result:
 
      The value is assigned.  Interactive CLI displays a return code of
      either 0 (SQL_SUCCESS) or 1 (SUCCESS_WITH_INFO).
 
  Example:
 
    Given the existence of a connection handle identified by 2 that is
    in the alloacted but unconnected state, then a valid sequence of
    commands and responses would be:
 
        # Get the CONNECTYPE connect option (to find out what the default is)
        #
        >sqlgetconnectoption 2 sql_connecttype
        SQLGetConnectOption: rc = 0 (SQL_SUCESS)
        Option (32-bit integer value) = 1
        #
        # Set the connection to type 2
        #
        >sqlsetconnectoption 2 sql_connecttype 2
        SQLSetConnectOption: rc = 0 (SQL_SUCESS)
        #
        # Set the maximum number of connections to 35
        #
        >sqlsetconnectoption 2 sql_maxconn 35
        SQLSetConnectOption: rc = 0 (SQL_SUCESS)
        #
        # Check that the set worked
        #
        sqlgetconnectoption 2 sql_maxconn
        SQLGetConnectOption: rc = 0 (SQL_SUCESS)
        Option (32-bit integer value) = 35
        #
        # Connect to the PUB database
        #
        >sqlconnect 2  pubsql_nts  clitest1 sql_nts  passwd1 sql_nts
        SQLConnect: rc = 0 (SQL_SUCCESS)
        #
        # Now that we are connected, set the transaction isolation level (not valid before)
        #
        >sqlsetconnectoption 2 sql_txn_isolation 4
        SQLSetConnectOption: rc = 0 (SQL_SUCESS)
        #
        # Set the default for CURSOR_HOLD for statement handles on the connection OFF
        #
        >sqlsetconnectoption 2 sql_cursor_hold 0
        SQLSetConnectOption: rc = 0 (SQL_SUCESS)
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 145 --  of 202
  1.8.82  SQLSetCursorName
 
  Set the name of a cursor that is associated with a specific statement.
 
  The reason for this command is to enable one to set the name before
  creating a result set in order that that name may be used when preparing a
  subsequent Positioned DELETE or Positioned UPDATE statement for operations
  on that result set.
 
 
  Note:   SQLSetCursorName can only be executed when there is no current
          prepared or executed statement for the statement handle.
 
  Syntax:
 
    >>--SQLSetCursorName---hstmt---cursor_name---cursor_name_length------------------------------------------><
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle to which the cursor
       is linked.
 
    cursor_name
       The name to be used for the cursor.
 
    cursor_name_length
       Either the length of the cursor_name or SQL_NTS.
 
  Successful Result:
 
      The cursor name is assigned to the statement handle.  Interactive CLI
      displays a return code of either 0 (SQL_SUCCESS) or 1
      (SUCCESS_WITH_INFO).
 
  Example:
 
      Given that -the database contains the DEPARTMENT table that is shipped in the
                  IBMSAMPL database with DB2(cs).
                 -there an used statement handle with a value of 22
      then the following sequence of commands and responses is possible:
 
        >sqlsetcursorname 22 MYCUR sql_nts
        #
        >sqlexecdirect 22 "select * from department" sql_nts
        SQLExecDirect: rc = 0 (SQL_SUCCESS)
        #
        >sqlgetcursorname 22
        SQLGetCursorName: rc = 0 (SQL_SUCCESS)
        SQLGetCursorName:    cursorName = "MYCUR"
        SQLGetCursorName:    cbCursor   = 6
 
      The name of the cursor is MYCUR.
 
      Contrast this example with the SQLGetCursorName example on page 75.
 
 
 
 
 
 
 
 
 
 
 -- 146 --  of 202
  1.8.83  SQLSetEnvAttr
 
  Set the value of a specific environment attribute.
 
  Syntax:
 
    >>--SQLSetEnvAttr---henv-----SQL_ATTR_OUTPUT_NTS-----attribute_value-------------------------------------><
                               |-SQL_CONNECTTYPE-----|                     +-attribute_value_length-+
                               |-SQL_MAXCONN---------|
                               +-SQL_SYNC_POINT------+
 
                                      attribute
 
  Parameters:
 
    henv
       The integer that identifies the current environment handle.
 
    attribute
       One of the values shown in the syntax diagram.
 
    attribute_value
       For a description of the appropriate values for each attribute, refer
       to Table 128 starting on page 355 of the V2.1 DB2 CLI Guide and
       Reference.
 
       Some of the values that are to be specified for the attributes are
       themselves #define values and, in this version of Interactive CLI, the
       number rather than #define constant must be used.  A list of the
       #define values follows:
 
            Attribute                   #define Values                  Number
            ---------                   --------------                  ------
            SQL_ATTR_OUTPUT_NTS         SQL_TRUE                        1
                                        SQL_FALSE                       2
 
            SQL_CONNECTTYPE             SQL_CONCURRENT_TRANS            1
                                        SQL_COORDINATED_TRANS           2
 
            SQL_SYNC_POINT              SQL_ONEPHASE                    1
                                        SQL_TWOPHASE                    2
 
    attribute_value_length
       Currently not used because none of the values for the supported
       attributes are strings.
 
  Successful Result:
 
      The value is assigned.  Interactive CLI displays a return code of
      either 0 (SQL_SUCCESS) or 1 (SUCCESS_WITH_INFO).
 
  Example:
 
    Given the existence of an environment handle identified by 1, then a
    valid sequence of commands and responses would be:
 
        # Get all the environment options (to find out what the defaults are)
        #
        >sqlgetenvattr 1 sql_attr_output_nts
        SQLGetEnvAttr: rc = 0 (SQL_SUCESS)
        Attribute value = 1
        StringLength = 5
        #
 
 
 -- 147 --  of 202
        >sqlgetenvattr 1 sql_connecttype
        SQLGetEnvAttr: rc = 0 (SQL_SUCESS)
        Attribute value = 1
        StringLength = 5
        #
        >sqlgetenvattr 1 sql_maxconn
        SQLGetEnvAttr: rc = 0 (SQL_SUCESS)
        Attribute value = 0
        StringLength = 5
        #
        >sqlgetenvattr 1 sql_sync_point
        SQLGetEnvAttr: rc = 0 (SQL_SUCESS)
        Attribute value = 1
        StringLength = 5
        #
        # Set the SYNC_POINT value to 2 phase
        #
        >sqlsetenvattr 1 sql_sync_point 2
        SQLSetEnvAttr: rc = 0 (SQL_SUCESS)
        #
        # Set the maximum number of connections to 35
        #
        >sqlsetenvattr 1 sql_maxconn 35
        SQLSetEnvAttr: rc = 0 (SQL_SUCESS)
        #
        # Check that the set of MAXCONN worked
        #
        >sqlgetenvattr 1 sql_maxconn
        SQLGetEnvAttr: rc = 0 (SQL_SUCESS)
        Attribute value = 35
        StringLength = 5
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 148 --  of 202
  1.8.84  SQLSetParam
 
  (The equivilant CLI function has been deprecated in favour of
  SQLBindParameter.)
 
  Assign:
 
  o   a scalar memory buffer with a C data type
 
  as well as
 
  o   an SQL data type
 
  to a parameter marker in a statement before executing that statement.
 
 
  Note:   If the basic data type of the memory buffer is different than the
          SQL data type, then the data will be converted before it is passed
          to the server.  For example, a value in an SQL_C_CHAR buffer might
          be converted to SQL_DECIMAL.
 
          The SQLBindParameter command can be used to do everything that
          SQLSetParam can do and, in addition, SQLBindParameter can be used
          to set parameters before executing a CALL statement and to bind a
          memory array to a parameter.
 
  Syntax:
 
    >>--SQLSetParam---hstmt---param-----SQL_C_CHAR------------------------SQL_CHAR--------------------------->
                                      |-SQL_C_DBCHAR---------|          |-SQL_VARCHAR--------|
                                      |-SQL_C_SHORT----------|          |-SQL_LONGVARCHAR----|
                                      |-SQL_C_USHORT---------|          |-SQL_GRAPHIC--------|
                                      |-SQL_C_SSHORT---------|          |-SQL_VARGRAPHIC-----|
                                      |-SQL_C_LONG-----------|          |-SQL_LONGVARGRAPHIC-|
                                      |-SQL_C_ULONG----------|          |-SQL_SMALLINT-------|
                                      |-SQL_C_SLONG----------|          |-SQL_INTEGER--------|
                                      |-SQL_C_DOUBLE---------|          |-SQL_DECIMAL--------|
                                      |-SQL_C_FLOAT----------|          |-SQL_NUMERIC--------|
                                      |-SQL_C_DATE-----------|          |-SQL_DOUBLE---------|
                                      |-SQL_C_TIME-----------|          |-SQL_FLOAT----------|
                                      |-SQL_C_TIMESTAMP------|          |-SQL_REAL-----------|
                                      |-SQL_C_BINARY---------|          |-SQL_DATE-----------|
                                      |-SQL_C_BIT------------|          |-SQL_TIME-----------|
                                      |-SQL_C_TINYINT--------|          |-SQL_TIMESTAMP------|
                                      |-SQL_C_UTINYINT-------|          |-SQL_BINARY---------|
                                      |-SQL_C_STINYINT-------|          |-SQL_VARBINARY------|
                                      |-SQL_C_BLOB_LOCATOR---|          |-SQL_LONGVARBINARY--|
                                      |-SQL_C_CLOB_LOCATOR---|          |-SQL_BLOB-----------|
                                      +-SQL_C_DBCLOB_LOCATOR-+          |-SQL_CLOB-----------|
                                                                        +-SQL_DBCLOB---------+
                                               c_type
                                                                               sql_type
 
 
                                                                      +-ADDRESS-+
                   >--param_length_precision---param_scale---hmembuf--+---------+----------------------------><
                                                                      +-HANDLE--+
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle of the statement for
       which the parameters are to be bound.
 
 
 -- 149 --  of 202
    param
       Parameter number within the prepared statement, ordered sequentially
       left to right, starting at 1.
 
    c_type
       The C data type of the memory buffer.  It must be one of the values
       listed in the syntax diagram.
 
    sql_type
       The SQL data type of the data within the memory buffer.  It must be
       one of the values listed in the syntax diagram.
 
    param_length_precision
       See page 135 of the V2.1 DB2 CLI Guide and Reference. The parameter is
       called cbParamDef there.
 
    param_scale
       See page 136 of the V2.1 DB2 CLI Guide and Reference. The parameter is
       called ibScale there.
 
    hmembuf
       The integer that identifies the handle of the memory buffer which is
       to be bound to the parameter.
 
    ADDRESS | HANDLE
 
       This indicates the value that is retrieved by SQLParamData when this
       parameter is identified when using the SQL_DATA_AT_EXEC facility.  One
       of:
 
         ADDRESS
            The address of the scalar memory buffer is returned.
 
         HANDLE
            The integer that identifies a specific sacalar memory buffer is
            returned.
 
  Successful Result:
 
      The parameter marker is bound to the memory buffer.  Also, Interactive
      CLI displays a return code of either 0 indicating success or 1
      indicating success with a warning.
 
  Example:
 
      See the example with the SQLPrepare command on page 124.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 150 --  of 202
  1.8.85  SQLSetStmtOption
 
  Set a statement attribute for a specific statement handle.
 
  or
 
  Set the appropriate values to indicate that this statement handle is to be
  used with the ExtendedFetch command with either column-wise binding or
  row-wise binding.
 
  Syntax:
 
    >>--SQLSetStmtOption---hstmt-------SQL_ASYNC_ENABLE----------long_int_value------------------------------><
                                   | |-SQL_CONCURRENCY-------|                      |
                                   | |-SQL_CURSOR_HOLD-------|                      |
                                   | |-SQL_CURSOR_TYPE-------|                      |
                                   | |-SQL_MAX_LENGTH--------|                      |
                                   | |-SQL_MAX_ROWS----------|                      |
                                   | |-SQL_NODESCRIBE--------|                      |
                                   | |-SQL_NOSCAN------------|                      |
                                   | |-SQL_PARAMOPT_ATOMIC---|                      |
                                   | |-SQL_QUERY_TIMEOUT-----|                      |
                                   | |-SQL_RETRIEVE_DATA-----|                      |
                                   | |-SQL_ROWSET_SIZE-------|                      |
                                   | +-SQL_STMTTXN_ISOLATION-+                      |
                                   |                                                |
                                   |        option                                  |
                                   |                                                |
                                   |                                                |
                                   +-SQL_BIND_TYPE---0------------------------------|
                                                   |                                |
                                                   +-MATRIXFORMAT---matrixformat_id-+
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle whose attribute is
       being set.
 
    option
       One of the values shown in the syntax diagram.
 
    long_int_value
       For a description of the appropriate values for each attribute, refer
       to Table 133 starting on page 366 of the V2.1 DB2 CLI Guide and
       Reference.
 
       Some of the values that are to be specified for the attributes are
       themselves #define values and, in this version of Interactive CLI, the
       number rather than #define constant must be used.  A list of the
       #define values follows:
 
            Attribute                   #define Values                  Number
            ---------                   --------------                  ------
            SQL_ASYNC_ENABLE            SQL_ASYNC_ENABLE_OFF            0
                                        SQL_ASYNC_ENABLE_ON             1
 
            SQL_CONCURRENCY             SQL_CONCUR_READ_ONLY            1
                                        SQL_CONCUR_LOCK                 2
 
            SQL_CURSOR_HOLD             SQL_CURSOR_HOLD_ON              1
                                        SQL_CURSOR_HOLD_OFF             0
 
 
 
 -- 151 --  of 202
            SQL_CURSOR_TYPE             SQL_CURSOR_FORWARD_ONLY         0
 
            SQL_NODECSCRIBE             SQL_NODESCRIBE_OFF              0
                                        SQL_NODESCRIBE_ON               1
 
            SQL_NOSCAN                  SQL_NOSCAN_OFF                  0
                                        SQL_NOSCAN_ON                   1
 
            SQL_PARAMOPT_ATOMIC         SQL_ATOMIC_YES                  1
                                        SQL_ATOMIC_NO                   0
 
            SQL_RETRIEVE_DATA           SQL_RD_ON                       1
                                        SQL_RD_OFF                      0
 
    SQL_BIND_TYPE 0
       Column-wise binding is to be used with the SQLExtendedFetch command.
 
    SQL_BIND_TYPE   MATRIXFORMAT matrixformat_id
       Row-wise binding is to be used with the SQLExtendedFetch command.
 
  Successful Result:
 
      The value is assigned.  Interactive CLI displays a return code of
      either 0 (SQL_SUCCESS) or 1 (SUCCESS_WITH_INFO).
 
 
 
  Example 1:
 
    Given the existence of a statement handle identified by 77 that is in th
    allocated state, then a valid sequence of commands and responses would be:
 
        # Set the NODESCRIBE statement option ON (it is OFF by default)
        #
        >sqlsetstmtoption 77 sql_nodescribe 1
        SQLSetStmtOption: rc = 0 (SQL_SUCESS)
        #
        >sqlgetstmtoption 77 sql_nodescribe
        SQLGetStmtOption: rc = 0 (SQL_SUCESS)
        Option (32-bit integer value) = 1
 
  Example 2:
 
      See the examples with the SQLExtendedFetch command starting on page 53.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 152 --  of 202
  1.8.86  SQLSpecialColumns
 
  Return a result set containing the identity of the column(s) whose values
  uniquely identify a row in a specific table (if there is such a set of
  columns).
 
 
  Note:   The affect of this command is the same as an SQLExecDirect command
          with the appropriate select-statement against the catalog.  Thus,
          the SQLSpecialColumns command may be followed commands such as
          SQLFetch to display the result set.
 
  Syntax:
 
    >>--SQLSpecialColumns---hstmt-----SQL_BEST_ROWID--------------------------------------------------------->
                                    +-SQL_ROWVER-----+
 
                  >-- -1-------------0----------------------------------------------------------------------->
 
                  >---table_schema---table_schema_length----------------------------------------------------->
 
                  >---table_name-----table_name_length------------------------------------------------------->
 
                  >----SQL_SCOPE_CURROW-----------SQL_NO_NULLS-----------------------------------------------><
                     |-SQL_SCOPE_TRANSACTION-|  +-SQL_NULLABLE-+
                     +-SQL_SCOPE_SESSION-----+
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle that is to be used
       for the result set returned by the command.
 
    SQL_BEST_ROWID | SQL_ROWVER
       One of:
 
         SQL_BEST_ROWID
            This should always be specified.
 
         SQL_ROWVER
            If this is specified, an empty result set will be returned.
 
    -1
       This is a ***catalog argument which must always be a nul value in this
       release.
 
    0
 
    table_schema
       The table's schema name (case sensitive).
 
       The SET SCHEMA variation of the Option command (see page 118) can be
       used to set a default schema name.  In cases where such a default has
       been set, -1 is specified here to opt for that default.
 
    table_schema_length
       Either the length of the schema name or SQL_NTS.
 
    table_name
       The table's name (case sensetive).
 
 
 
 
 
 -- 153 --  of 202
    table_name_length
       Either the length of the table name or SQL_NTS.
 
    SQL_SCOPE_CURROW | SQL_SCOPE_TRANSACTION | SQL_SCOPT_SESSION
       One of:
 
         SQL_SCOPE_CURROW
            This should usually be specified.
 
         SQL_SCOPE_TRANSACTION
            If the the current value of the SQL_STMTTXN_ISOLATION attribute
            for this statement handle is SQL_TXN_SERIALIZABLE (i.e.
            repeatable read), then the set of special columns (if there are
            any) will be returned.  Any other value results in an empty
            result set.
 
         SQL_SCOPE_SESSION
            If this is specified, an empty result set will be returned.
 
    SQL_NO_NULLS | SQL_NULLABLE
       One of:
 
         SQL_NO_NULLS
            None of the columns identified are allowed to contain a null
            value.
 
         SQL_NULLABLE
            The columns identified can be nullable.  Note that, if this is
            specified, the columns identified will never be that of the
            table's primary key.
 
  Successful Result:
 
      A result set is returned and a cursor is opened on the statement
      handle.  The data in the result set is made available for retrieval via
      the SQLFetch command.  Also, Interactive CLI displays a return code of
      either 0 (SQL_SUCCESS) or 1 (SUCCESS_WITH_INFO).  If no rows are found
      that match the search criteria, an empty result set is returned and the
      return code from SQLFetch will be SQL_NO_DATA_FOUND.
 
  Example:
 
      Given that - there is a connection identified by 2 the the PUB database
                 - the user on that connection is CLITEST1
                 - there is allocated statement, 12, on connection 2
      then a possible sequence of commands and responses would be:
 
        # Obtain a result set contaning the special columns of the PUB_CRAWL_LOG table.
        #
        >sqlspecialcolumns 12  sql_best_rowid  -1 0  CLITEST1 sql_nts  PUB_CRAWL_LOG sql_nts
                                                                   sql_scope_currow  sql_no_nulls
        SQLSpecialColumns: rc = 0 (SQL_SUCCESS)
        #
        # Fetch the rows, then close the cursor
        #
        >fetchall 12
        FetchAll:  Columns: 8
          SCOPE COLUMN_NAME DATA_TYPE TYPE_NAME COLUMN_SIZE BUFFER_LENGTH DECIMAL_DIGITS PSEUDO_COLUMN
          0, PUB_NAME, 12, VARCHAR, 50, 50, -, 1
          0, VISITED_ON, 9, DATE, 10, 6, -, 1
          FetchAll: 2 rows fetched.
        sqlfreestmt 12 sql_close
        SQLFreeStmt: rc = 0 (SQL_SUCCESS)
 
 
 -- 154 --  of 202
        #
        # Obtain result set of the special columns for the PUB_SIGN_PHOTOS table.
        #
        >sqlspecialcolumns 12  sql_best_rowid  -1 0  CLITEST1 sql_nts  PUB_SIGN_PHOTOS sql_nts
                                                                   sql_scope_currow  sql_no_nulls
        SQLSpecialColumns: rc = 0 (SQL_SUCCESS)
        #
        # Fetch the rows, then close the cursor
        #
        >fetchall 12
        FetchAll:  Columns: 8
          SCOPE COLUMN_NAME DATA_TYPE TYPE_NAME COLUMN_SIZE BUFFER_LENGTH DECIMAL_DIGITS PSEUDO_COLUMN
          0, PICTURE_NUMBER, 5, SMALLINT, 5, 2, -, 1
          FetchAll: 1 rows fetched.
        >sqlfreestmt 12 sql_close
        SQLFreeStmt: rc = 0 (SQL_SUCCESS)
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 155 --  of 202
  1.8.87  SQLStatistics
 
  Return a result set containing both statistical information about a
  specific table (number of rows and number of pages used to store the table)
  as well as the structure of the indexes (if any) defined on that table.
 
 
  Notes:  The effect of this command is the same as an SQLExecDirect command
          with the appropriate select-statement against the catalog.  Thus,
          the SQLStatistics command may be followed commands such as SQLFetch
          to display the result set.
 
          Statistics are retained in the catalog however, unlike most catalog
          data they are not automatically updated by the execution of SQL
          statements.  The CLP RUNSTATS command must be run in order to
          update the catalog.
 
  Syntax:
 
    >>--SQLStatistics---hstmt-------------------------------------------------------------------------------->
 
                  >-- -1-------------0----------------------------------------------------------------------->
 
                  >---table_schema---table_schema_length----------------------------------------------------->
 
                  >---table_name-----table_name_length------------------------------------------------------->
 
                  >----SQL_INDEX_UNIQUE-------SQL_QUICK------------------------------------------------------><
                     +-SQL_INDEX_ALL----+   +-SQL_ENSURE-+
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle that is to be used
       for the result set returned by the command.
 
    -1
       This is a ***catalog argument which must always be a nul value in this
       release.
 
    0
 
    table_schema
       The table's schema name (case sensitive).
 
       The SET SCHEMA variation of the Option command (see page 118) can be
       used to set a default schema name.  In cases where such a default has
       been set, -1 is specified here to opt for that default.
 
    table_schema_length
       Either the length of the schema name or SQL_NTS.
 
    table_name
       The table's name (case sensetive).
 
    table_name_length
       Either the length of the table name or SQL_NTS.
 
    SQL_INDEX_UNIQUE | SQL_INDEX_ALL
       One of:
 
 
 
 
 
 -- 156 --  of 202
         SQL_INDEX_UNIQUE
            Only indexes defined with the UNIQUE property are to be returned.
 
         SQL_INDEX_ALL
            All indexes are to be returned.
 
    SQL_QUICK | SQL_ENSURE
       It does not matter which of these is specified.  In Version 2.1, this
       has no effect on either the processing or the result of the command.
 
  Successful Result:
 
      A result set is returned and a cursor is opened on the statement
      handle.  The data in the result set is made available for retrieval via
      the SQLFetch command.  Also, Interactive CLI displays a return code of
      either 0 (SQL_SUCCESS) or 1 (SUCCESS_WITH_INFO).  If no rows are found
      that match the search criteria, an empty result set is returned and the
      return code from SQLFetch will be SQL_NO_DATA_FOUND.
 
  Example:
 
      Given that - there is a connection identified by 2 the the PUB database
                 - the user on that connection is CLITEST1
                 - there is allocated statement, 12, on connection 2
      then a possible sequence of commands and responses would be:
 
        # Obtain a result set contaning the indexes and other statistics about the PUB_CRAWL _LOG table.
        #
        >sqlstatistics 12   -1 0   clitest1 sql_nts   pub_sign_photos sql_nts   sql_index_all   sql_quick
        SQLStatistics: rc = 0 (SQL_SUCCESS)
        #
        >fetchall 12
        FetchAll:  Columns: 13
          TABLE_CAT TABLE_SCHEM TABLE_NAME NON_UNIQUE INDEX_QUALIFIER INDEX_NAME TYPE ORDINAL_POSITION COLUMN_NAME
          ASC_OR_DESC CARDINALITY PAGES FILTER_CONDITION
          -, CLITEST1, PUB_SIGN_PHOTOS, -, -, -, 0, -, -, -, -, -, -
          -, CLITEST1, PUB_SIGN_PHOTOS, 0, CLITEST1, PUB_PICTURE_NO, 3, 1, PICTURE_NUMBER, A, -, -, -
          -, CLITEST1, PUB_SIGN_PHOTOS, 1, CLITEST1, PUB_SIGN_INDEX, 3, 1, PUB_NAME, A, -, -, -
          FetchAll: 3 rows fetched.
        >sqlfreestmt 12 sql_close
        SQLFreeStmt: rc = 0 (SQL_SUCCESS)
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 157 --  of 202
  1.8.88  SQLTablePrivileges
 
  Return a result set that contains information about the privileges on one
  or more tables.  The tables may be filtered by specifying name patterns.
 
 
  Note:   The effect of this command is the same as an SQLExecDirect command
          with the appropriate select-statement against the catalog.  Thus,
          the SQLTablePrivileges command may be followed commands such as
          SQLFetch to display the result set.
 
  Syntax:
 
    >>--SQLTablePrivileges---hstmt---------------------------------------------------------------------------><
 
                  >-- -1---------------------0--------------------------------------------------------------->
 
                  >---table_schema_pattern---table_schema_pattern_length------------------------------------->
 
                  >---table_name_pattern-----table_name_pattern_length---------------------------------------><
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle that is to be used
       for the result set returned by the command.
 
    -1
       This is a ***catalog argument which must always be a nul value in this
       release.
 
    0
 
    table_schema_pattern
       Either a (case sensitive) pattern (as per the LIKE predicate) used to
       select schemas or -1 used to indicate that all schemas are to be
       selected.
 
       The SET SCHEMA variation of the Option command (see page 118) can be
       used to set a default schema pattern.  In cases where such a default
       has been set, -1 is specified here to opt for that default.
 
    table_schema_pattern_length
       Either the length of the schema name pattern or SQL_NTS.
 
    table_name_pattern
       Either a (case sensitive) pattern used to select tables or -1 used to
       indicate that all tables are to be selected.
 
    table_name_pattern_length
       Either the length of the table name pattern or SQL_NTS.
 
  Successful Result:
 
      A result set is returned and a cursor is opened on the statement
      handle.  The data in the result set is made available for retrieval via
      the SQLFetch command.  Also, Interactive CLI displays a return code of
      either 0 (SQL_SUCCESS) or 1 (SUCCESS_WITH_INFO).  If no rows are found
      that match the search criteria, an empty result set is returned and the
      return code from SQLFetch will be SQL_NO_DATA_FOUND.
 
 
 
 
 
 -- 158 --  of 202
  Example:
 
      Given that - there is a connection identified by 2 the the PUB database
                 - the user on that connection is CLITEST1
                 - there is allocated statement, 12, on connection 2
      then a possible sequence of commands and responses would be:
 
        # List the privileges on the tables in the CLITEST1 schema in the PUB database.
        #
        >sqltableprivileges 12   -1 0   clitest1 sql_nts   -1 0
        SQLTablePrivileges: rc = 0 (SQL_SUCCESS)
        #
        >fetchall 12
        FetchAll:  Columns: 7
          TABLE_CAT TABLE_SCHEM TABLE_NAME GRANTOR GRANTEE PRIVILEGE IS_GRANTABLE
          -, CLITEST1, FRIEND_CTRL, SYSIBM, CLITEST1, ALTER, YES
          -, CLITEST1, FRIEND_CTRL, SYSIBM, CLITEST1, CONTROL, YES
          -, CLITEST1, FRIEND_CTRL, SYSIBM, CLITEST1, DELETE, YES
          -, CLITEST1, FRIEND_CTRL, SYSIBM, CLITEST1, INDEX, YES
          -, CLITEST1, FRIEND_CTRL, SYSIBM, CLITEST1, INSERT, YES
          -, CLITEST1, FRIEND_CTRL, SYSIBM, CLITEST1, REFERENCES, YES
          -, CLITEST1, FRIEND_CTRL, SYSIBM, CLITEST1, SELECT, YES
          -, CLITEST1, FRIEND_CTRL, SYSIBM, CLITEST1, UPDATE, YES
          -, CLITEST1, FRIENDS_AT_PUB, SYSIBM, CLITEST1, ALTER, YES
          -, CLITEST1, FRIENDS_AT_PUB, SYSIBM, CLITEST1, CONTROL, YES
          -, CLITEST1, FRIENDS_AT_PUB, SYSIBM, CLITEST1, DELETE, YES
          -, CLITEST1, FRIENDS_AT_PUB, SYSIBM, CLITEST1, INDEX, YES
          -, CLITEST1, FRIENDS_AT_PUB, SYSIBM, CLITEST1, INSERT, YES
          -, CLITEST1, FRIENDS_AT_PUB, SYSIBM, CLITEST1, REFERENCES, YES
          -, CLITEST1, FRIENDS_AT_PUB, SYSIBM, CLITEST1, SELECT, YES
          -, CLITEST1, FRIENDS_AT_PUB, SYSIBM, CLITEST1, UPDATE, YES
          -, CLITEST1, LIMEY_PUB_CRAWL, SYSIBM, CLITEST1, CONTROL, YES
          -, CLITEST1, LIMEY_PUB_CRAWL, SYSIBM, CLITEST1, DELETE, YES
          -, CLITEST1, LIMEY_PUB_CRAWL, SYSIBM, CLITEST1, INSERT, YES
          -, CLITEST1, LIMEY_PUB_CRAWL, SYSIBM, CLITEST1, SELECT, YES
          -, CLITEST1, LIMEY_PUB_CRAWL, SYSIBM, CLITEST1, UPDATE, YES
          -, CLITEST1, PUB_CRAWL_LOG, SYSIBM, CLITEST1, ALTER, YES
          -, CLITEST1, PUB_CRAWL_LOG, SYSIBM, CLITEST1, CONTROL, YES
          -, CLITEST1, PUB_CRAWL_LOG, SYSIBM, CLITEST1, DELETE, YES
          -, CLITEST1, PUB_CRAWL_LOG, SYSIBM, CLITEST1, INDEX, YES
          -, CLITEST1, PUB_CRAWL_LOG, SYSIBM, CLITEST1, INSERT, YES
          -, CLITEST1, PUB_CRAWL_LOG, SYSIBM, CLITEST1, REFERENCES, YES
          -, CLITEST1, PUB_CRAWL_LOG, SYSIBM, CLITEST1, SELECT, YES
          -, CLITEST1, PUB_CRAWL_LOG, SYSIBM, CLITEST1, UPDATE, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, SYSIBM, CLITEST1, ALTER, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, SYSIBM, CLITEST1, CONTROL, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, SYSIBM, CLITEST1, DELETE, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, SYSIBM, CLITEST1, INDEX, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, SYSIBM, CLITEST1, INSERT, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, SYSIBM, CLITEST1, REFERENCES, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, SYSIBM, CLITEST1, SELECT, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, SYSIBM, CLITEST1, UPDATE, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, CLITEST1, PUBLIC, SELECT, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, CLITEST1, PELLOW, ALTER, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, CLITEST1, PELLOW, DELETE, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, CLITEST1, PELLOW, INDEX, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, CLITEST1, PELLOW, INSERT, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, CLITEST1, PELLOW, REFERENCES, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, CLITEST1, PELLOW, SELECT, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, CLITEST1, PELLOW, UPDATE, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, CLITEST1, MLI, INSERT, YES
          -, CLITEST1, PUB_SIGN_PHOTOS, CLITEST1, MLI, UPDATE, YES
          FetchAll: 47 rows fetched.
 
 
 -- 159 --  of 202
  1.8.89  SQLTables
 
  Return a result set that contains information about one or more "tables".
  Tables in this case can include:
 
      user defined base tables
 
      system (catalog) base tables
 
      user defined views
 
      system (catalog) views
 
      inoperative views (if supported by the server)
 
      aliases (if supported by the server)
 
      synonyms (if supported by the server)
 
  The tables may be filtered by specifying name patterns.  Furthermore only
  certain types of tables may be selected.
 
 
  Note:   The effect of this command is the same as an SQLExecDirect command
          with the appropriate select-statement against the catalog.  Thus,
          the SQLTables command may be followed commands such as SQLFetch to
          display the result set.
 
  Syntax:
 
    >>--SQLTables---hstmt---tbl_qual_pattern---tbl_qual_pattern_length--------------------------------------->
 
                  >-- -1---------------------0--------------------------------------------------------------->
 
                  >---table_schema_pattern---table_schema_pattern_length------------------------------------->
 
                  >---table_name_pattern-----table_name_pattern_length--------------------------------------->
 
                  >---table_type_list--------table_type_list_length------------------------------------------><
 
  Parameters:
 
    hstmt
       The integer that identifies the statement handle that is to be used
       for the result set returned by the command.
 
    -1
       This is a ***catalog argument which must always be a nul value in this
       release.
 
    0
 
    table_schema_pattern
       Either a (case sensitive) pattern (as per the LIKE predicate) used to
       select schemas or -1 used to indicate that all schemas are to be
       selected.
 
       The SET SCHEMA variation of the Option command (see page 118) can be
       used to set a default schema pattern.  In cases where such a default
       has been set, -1 is specified here to opt for that default.
 
 
 
 
 
 -- 160 --  of 202
    table_schema_pattern_length
       Either the length of the schema name pattern or SQL_NTS.
 
    table_name_pattern
       Either a (case sensitive) pattern used to select tables or -1 used to
       indicate that all tables are to be selected.
 
    table_name_pattern_length
       Either the length of the table name pattern or SQL_NTS.
 
    table_type_list
       Either -1 to indicate that all types of tables are to be returned, or
       a upper-case, single-quoted, comma-separated string indicating the
       types of tables wanted.  The values that may be specified in the
       string are as follows:
 
                  tsize-20.
 
       ALIAS     Aliases of tables, views, and other aliases (only available
                 on DB2(cs) and DB2 for MVS).
 
       INOPERATIVE VIEW Views which have been marked inoperative so are not
                 available (only available on DB2(cs) databases.
 
       SYNONYM   Synonyms of tables and views (only available on DB2 for MVS
                 and SQL/DS)
 
       SYSTEM TABLE Catalog tables and catalog views (if any)
 
       TABLE     Non-system base tables
 
       VIEWS     Non-system views
 
       For example, to obtain a list of both aliases and inoperative views,
       one would specify:
 
           'ALIAS','INOPERATIVE VIEW'
 
    table_type_list_length
       Either the length of the table type list or SQL_NTS.
 
  Successful Result:
 
      A result set is returned and a cursor is opened on the statement
      handle.  The data in the result set is made available for retrieval via
      the SQLFetch command.  Also, Interactive CLI displays a return code of
      either 0 (SQL_SUCCESS) or 1 (SUCCESS_WITH_INFO).  If no rows are found
      that match the search criteria, an empty result set is returned and the
      return code from SQLFetch will be SQL_NO_DATA_FOUND.
 
  Example:
 
      Given that - there is a connection identified by 2 the the PUB database
                 - the user on that connection is CLITEST1
                 - there is allocated statement, 12, on connection 2
      then a possible sequence of commands and responses would be:
 
        # Obtain the base tables and views in the PUB database
        #
        >sqltables 12   -1 0   -1 0   -1 0   "'TABLE','VIEW'" sql_nts
        SQLTables: rc = 0 (SQL_SUCCESS)
        #
        # Fetch the rows, then close the cursor
 
 
 -- 161 --  of 202
        #
        >fetchall 12
        FetchAll:  Columns: 5
        TABLE_CAT TABLE_SCHEM TABLE_NAME TABLE_TYPE REMARKS
        -, CLITEST1, FRIEND_CTRL, TABLE, -
        -, CLITEST1, FRIENDS_AT_PUB, TABLE, -
        -, CLITEST1, PUB_CRAWL_LOG, TABLE, -
        -, CLITEST1, PUB_SIGN_PHOTOS, TABLE, -
        -, CLITEST1, LIMEY_PUB_CRAWL, VIEW, -
        FetchAll: 5 rows fetched.
                  CLI hstmt = 3, Test Driver hstmt = 12
        >freestmt 12 sql_close
        SQLFreeStmt: rc = 0 (SQL_SUCCESS)
        #
        # List the base tables and views in the PUB database that contain the string PUB in their name
        #
        >sqltables 12   -1 0   -1 0   %PUB% sql_nts   -1 0
        SQLTables: rc = 0 (SQL_SUCCESS)
        #
        # Fetch the rows, then close the cursor
        #
        fetchall 12
        FetchAll:  Columns: 5
        TABLE_CAT TABLE_SCHEM TABLE_NAME TABLE_TYPE REMARKS
        -, CLITEST1, FRIENDS_AT_PUB, TABLE, -
        -, CLITEST1, PUB_CRAWL_LOG, TABLE, -
        -, CLITEST1, PUB_SIGN_PHOTOS, TABLE, -
        -, CLITEST1, LIMEY_PUB_CRAWL, VIEW, -
        FetchAll: 4 rows fetched.
        >freestmt 12 sql_close
        SQLFreeStmt: rc = 0 (SQL_SUCCESS)
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 162 --  of 202
  1.8.90  SQLTransact
 
  Either commit or roll back the current transaction.
 
 
  Note:   See the AUTOCOMMIT option with the Option command.  When it is ON,
          the result of every SQL statement is automatically committed.
 
  Syntax:
 
    >>--SQLTransact-----0------hdbc---------------SQL_COMMIT-------------------------------------------------><
                      +-henv---SQL_NULL_HDBC-+  |              |
                                                +-SQL_ROLLBACK-+
 
  Parameters:
 
    henv  hdbc  hstmt
       The first two parameters are coded differently in order to determine
       which one of the handles is to be used to identify the transaction.
 
           henv   SQL_NUL_HDBC    The transaction(s) is(are) to be identified by the environment
                                  handle.  If there are multiple connections under the henv, then
                                  a COMMIT/ROLLBACK is issued for each of the underlying HDBCs.
 
 
           0      hdbc            The transaction is to be identified by the specified connection handle.
 
    SQL_COMMIT or SQL_ROLLBACK
       Where the value (obviously) means:
 
         SQL_COMMIT
            Commit the transaction
 
         SQL_ROLLBACK
            Rollback the transaction
 
  Successful Result:
 
      The transaction (unit of work) is either committed or rolled back, as
      appropriate.  Also, Interactive CLI displays a return code of either 0
      indicating success or 1 indicating success with a warning.
 
  Example:
 
      Given a connection handle 8, the following command will commit
      the work for the transaction running on that connection (which,
      in our implementation, is the only current transaction).
 
        >transact 0 8 sql_commit
 
      The response to this will simply be:
 
        SQLTranact: rc = 0 (SQL_SUCCESS)
 
 
 
 
 
 
 
 
 
 
 
 
 -- 163 --  of 202
  1.8.91  UnformatMatrix
 
  Drop a matrix format.
 
 
  Notes:  Matrix formats are not tied to any handles so they are retained to
          the end of the session unless explicitly dropped with this command.
 
          A matrix format cannot be be dropped as long as there is any memory
          matrix buffer that is currently defined with that matrix format.
 
  Syntax:
 
    >>--UnformatMatrix---matrixformat_id---------------------------------------------------------------------><
 
  Parameters:
 
    matrixformat_id
       The integer that identifies the matrix format that is to be dropped.
 
  Successful Result:
 
      The matrix format is dropped (withacknowledgement).
 
  Example:
 
      Given that there is a matrix format identified by 5000, then the command:
 
        >unformatmatrix 5000
 
      would result in the response:
 
        UnformatMatrix: matrix format has been deleted.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 164 --  of 202
  1.8.92  UpdateElem
 
  Update the value of an element in a memory array.
 
  Syntax:
 
    >>--UpdateElem---memarray_id---element------------------------------------------------------------------->
 
     >------VALUE---size---string_value----------------------------------------------------------------------><
        | |-NULL_VALUE------------------|        |  (for SQL_C_CHAR and SQL_C_BINARY
        | +-FILE---file_name------------+        |
        |                                        |
        |---VALUE---long_int_value---------------|  (for SQL_C_LONG)
        | +-NULL_VALUE-------------+             |
        |                                        |
        |---VALUE---short_int_value--------------|  (for SQL_C_SHORT)
        | +-NULL_VALUE--------------+            |
        |                                        |
        |---VALUE---float_value------------------|  (for SQL_C_FLOAT)
        | +-NULL_VALUE----------+                |
        |                                        |
        |---VALUE---double_value-----------------|  (for SQL_C_DOUBLE)
        | +-NULL_VALUE-----------+               |
        |                                        |
        |---VALUE---yyyy-mm-dd-------------------|  (for SQL_C_DATE)
        | +-NULL_VALUE---------+                 |
        |                                        |
        |---VALUE---hh-mm-ss---------------------|  (for SQL_C_TIME)
        | +-NULL_VALUE-------+                   |
        |                                        |
        |---VALUE---yyyy-mm-dd-hh-mm-ss-ffffff---|  (for SQL_C_TIMESTAMP)
        | +-NULL_VALUE-------------------------+ |
        |                                        |
        |---VALUE---tiny_int_value---------------|  (for SQL_C_TINYINT)
        | +-NULL_VALUE-------------+             |
        |                                        |
        |---VALUE----0---------------------------|  (for SQL_C_BIT)
        | |        +-1-+                         |
        | +-NULL_VALUE                           |
        |                                        |
        +---VALUE---long_int_value---------------+  (for SQL_C_xxxx_LOCATOR)
          +-NULL_VALUE-------------+
 
 
  Parameters:
 
    hmembuf
       The integer that identifies the memory array buffer in which an
       element is to be updated.
 
    element
       The value is the relative position of the element in the array and,
       thus, is zero based.  That first element is identified with 0, the
       second with 1, etc.
 
    The other parameters are used to assign a value.
       The values should be formatted as described on page 174
 
  Successful Result:
 
      The element is updated (with acknowledgement).
 
 
 
 
 -- 165 --  of 202
  Example:
 
      Execute directly an insert into the PUB_SIGN_PHOTOS example table (will
      only assign values to the non-nullable fields.  The example assumes that connection
      handle 2 is currently connected to the PUB database and that 12 and
      13 are allocated statements on that connection.
 
         # Prepare statement to insert row into the PUB_SIGN_PHOTOS table:
         #
         >sqlprepare 12 "insert into PUB_SIGN_PHOTOS values (?, ?, ?)" sql_nts
         SQLPrepare: rc = 0 (SQL_SUCCESS)
         #
         # Get memory array buffers
         #
         >getmemarray 12 121  3  sql_c_char 51
         GetMemArray: Memory Array 121 for statement handle 12 allocated.
         >getmemarray 12 122  3  sql_c_char 26
         GetMemArray: Memory Array 122 for statement handle 12 allocated.
         >getmemarray 12 124  3  sql_c_char  2
         #
         # Bind the columns of the result set
         #
         >sqlbindcol 12  1 sql_c_char  memarray 121
         SQLBindCol: rc = 0 (SQL_SUCCESS)
         >sqlbindcol 12  2 sql_c_char  memarray 122
         SQLBindCol: rc = 0 (SQL_SUCCESS)
         >sqlbindcol 12  4 sql_c_short memarray 124
         SQLBindCol: rc = 0 (SQL_SUCCESS)
         #
         # Update the first set of elements.
         #
         >updateelem 121 0  value 13  "The Royal Oak"
         UpdateElem: array elem 0 of memory array 121 updated.
         >updateelem 122 0  value 14  "Hayling Island"
         UpdateElem: array elem 0 of memory array 122 updated.
         >updateelem 124 0  value     11
         UpdateElem: array elem 0 of memory array 124 updated.
         #
         # Update the second set of elements.
         #
         >updateelem 121 1  value 24  "Fox With his Teeth Drawn"
         UpdateElem: array elem 0 of memory array 121 updated.
         >updateelem 122 1  value  6  Munden
         UpdateElem: array elem 0 of memory array 122 updated.
         >updateelem 124 1  value     12
         UpdateElem: array elem 0 of memory array 124 updated.
         #
         # Update the third set of elements.
         #
         >updateelem 121 2  value 20  "Magpie and Punchbowl"
         UpdateElem: array elem 0 of memory array 121 updated.
         >updateelem 122 2  value 19  "Bishopsgate, London"
         UpdateElem: array elem 0 of memory array 122 updated.
         >updateelem 124 2  value     13
         UpdateElem: array elem 0 of memory array 124 updated.
         #
         # List the contents of the memory array buffers for statement 12
         #
         >list memarray 12
         Memory Arrays:
                arrayId hstmt  totalElems  ElemSize   c_type
                {121}      12          3          51     SQL_C_CHAR
         Element {0} Contents: "The Royal Oak"
 
 
 -- 166 --  of 202
                      Length: 13
         Element {1} Contents: "Fox With his Teeth Drawn"
                      Length: 24
         Element {2} Contents: "Magpie and Punchbowl"
                      Length: 20
 
                arrayId hstmt  totalElems  ElemSize   c_type
                {122}      12          3          26     SQL_C_CHAR
         Element {0} Contents: "Hayling Island"
                      Length: 14
         Element {1} Contents: "Munden"
                      Length: 6
         Element {2} Contents: "Bisopsgate, London"
                      Length: 19
 
                arrayId hstmt  totalElems  ElemSize   c_type
                {124}      12          3          2      SQL_C_SHORT
         Element {0} Contents: 11
                      Length: 2
         Element {1} Contents: 12
                      Length: 2
         Element {2} Contents: 13
                      Length: 2
 
         3 Memory Array(s) and 15 Elements listed
         #
         # Execute the insert
         #
         >sqlexecute 12
         SQLExecute: rc = 0 (SQL_SUCCESS)
         #
         # Check on how many rows were inserted
         #
         >sqlrowcount 12
         SQLRowCount: rc = 0 (SQL_SUCCESS)
                 Row count = 3
        #
        # Now look at the  contents of the table
        >sqlexecdirect 13 "select * from PUB_SIGN_PHOTOS" sql_nts
        SQLExecDirect: rc = 0 (SQL_SUCCESS)
        #
        >fetchall 13
        FetchAll:  Columns: 6
          PUB_NAME TOWN PICTURE_QUALITY PICTURE_NUMBER SIGN_PHOTO PHOTO_DESCRIPTION
          Dutchess of Markham, Markham, d, 1, -, Description of Picture 1
          Case is Altered, Pinner, c, 2, -, Description of Picture 2
          Bishop and Wolf, Isles of Scilly, b, 3, -, Description of Picture 3
          The Bullnose Morris, Oxford, b, 4, -, Description of Picture 4
          Duke Without a Head, Wateringbury, a, 5, -, Description of Picture 5
          The Royal Oak, Hayling Island, -, 11, -, -
          Fox With his Teeth Drawn, Munden, -, 12, -, -
          Magpie and Puncbowl, Bishopsgate, London, -, 13, -, -
          FetchAll: 8 rows fetched.
 
 
 
 
 
 
 
 
 
 
 
 
 -- 167 --  of 202
  1.8.93  UpdateFileRef
 
  Modify the value of either a scalar LOB file reference buffer or a single
  entry within an array file reference buffer.
 
  Syntax:
 
    >>--UpdateFileRef---hfileref---file_name---file_name_length----SQL_FILE_READ----------------------------->
                                                                 |-SQL_FILE_CREATE----------|
                                                                 |-SQL_FILE_OVERWRITE-------|
                                                                 +-SQL_FILE_APPEND----------+
 
                                                                       file_ref_options
 
                                                +-FOR---0----+
             >--/file_length/---indicator_value---+------------+-----------------------------------------------><
                                                +-FOR---elem-+
 
  Parameters:
 
    hfileref
       The integer that identifies the file reference buffer whose value is
       to be updated.
 
    file_name
       Either the complete path name or a file in the current directory.
 
       = can be coded to indicate that the current value is not to be
       changed.
 
    file_name_length
       Either the length of the file name or SQL_NTS.
 
       = can be coded to indicate that the current value is not to be
       changed.
 
    fileref_options
       One of:
 
         SQL_FILE_READ
            Input file (to be subsequently used to provide a value for a
            parameter marker).
 
         SQL_FILE_CREATE
            Output file (to be subsequently used as the target of a fetch
            operation).  A new file will be created.
 
            Output
 
         SQL_FILE_OVERWRITE
            Output file (to be subsequently used as the target of a fetch
            operation).  If a file by this name exists, the existing contents
            will be overwritten; otherwise a new file will be created.
 
         SQL_FILE_APPEND
            Output file (to be subsequently used as the target of a fetch
            operation).  If a file by this name exists, the new data will be
            appended after the existing contents; otherwise a new file will
            be created.
 
       = can be coded to indicate that the current value is not to be
       changed.
 
 
 
 -- 168 --  of 202
    /file_length/
       Always code 0.  Used for internal testing.
 
    indicator_value
       Specify -1 to indicate the null value; otherwise specify 0.
 
       = can be coded to indicate that the current value is not to be
       changed.
 
    FOR elem
       This is for use with an array file reference buffer.  It is used to
       identify the element in the array that is being updated.  The value is
       the relative position of the element in the array and, thus, is zero
       based.  That first element is identified with 0, the second with 1,
       etc.
 
  Successful Result:
 
      The file reference buffer is updated (with acknowledgement).
 
  Example:
 
      Given the existence of a statement handle identified by 77 that is in the allocated
      state, then a valid sequence of commands and responses would be:
 
        >getfileref 77  5000
        GetFileRef: file reference 5000 for statement handle 77 allocated.
        #
        >getfileref 77  5001  arraysize 3
        GetFileRef: file reference 5000 for statement handle 77 allocated.
        #
        # Assign a files to 5000 and to 5001 to be used to insert values into the SIGN_PHOTO
        and PHOTO_DESCRIPTION columns in the PUB_SIGN_PHOTOS example table.
        #
        >updatefileref 5000  "sign01.pho" sql_nts   sql_file_read   0   0
        UpdateFileRef: file reference 5000 updated
        >updatefileref 5001  "sign01.dsc" sql_nts   sql_file_read   0   0
        UpdateFileRef: file reference 5001 updated
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 169 --  of 202
  1.8.94  UpdateMem
 
  Modify the value in a specific memory buffer.
 
  Syntax:
 
    >>--UpdateMem---hmembuf----SQL_C_CHAR-------------VALUE---size---string_value----------------------------><
                             |              |       |-NULL_VALUE------------------|        |
                             |-SQL_C_BINARY-+       +-FILE---file_name------------+        |
                             |                                                             |
                             |-SQL_C_LONG-------------VALUE---long_int_value---------------|
                             |                      +-NULL_VALUE-------------+             |
                             |                                                             |
                             |-SQL_C_SHORT------------VALUE---short_int_value--------------|
                             |                      +-NULL_VALUE--------------+            |
                             |                                                             |
                             |-SQL_C_TINYINT----------VALUE---tiny_int_value---------------|
                             |                      +-NULL_VALUE-------------+             |
                             |                                                             |
                             |-SQL_C_DOUBLE-----------VALUE---double_value-----------------|
                             |                      +-NULL_VALUE-----------+               |
                             |                                                             |
                             |-SQL_C_FLOAT------------VALUE---float_value------------------|
                             |                      +-NULL_VALUE----------+                |
                             |                                                             |
                             |-SQL_C_DATE-------------VALUE---yyyy-mm-dd-------------------|
                             |                      +-NULL_VALUE---------+                 |
                             |                                                             |
                             |-SQL_C_TIME-------------VALUE---hh-mm-ss---------------------|
                             |                      +-NULL_VALUE-------+                   |
                             |                                                             |
                             |-SQL_C_TIMESTAMP--------VALUE---yyyy-mm-dd-hh-mm-ss-ffffff---|
                             |                      +-NULL_VALUE-------------------------+ |
                             |                                                             |
                             |-SQL_C_BIT--------------VALUE----0---------------------------|
                             |                      |        +-1-+                         |
                             |                      +-NULL_VALUE                           |
                             |                                                             |
                             |-SQL_C_BLOB_LOCATOR-----VALUE---long_int_value---------------|
                             |                      +-NULL_VALUE-------------+             |
                             |                                                             |
                             |-SQL_C_CLOB_LOCATOR-----VALUE---long_int_value---------------|
                             |                      +-NULL_VALUE-------------+             |
                             |                                                             |
                             +-SQL_C_DBCLOB_LOCATOR---VALUE---long_int_value---------------+
                                                    +-NULL_VALUE-------------+
 
  Parameters:
 
    hmembuf
       The integer that identifies the memory buffer whose value is to be
       updated.
 
    The other parameters are used to assign a value.
       The values should be formatted as follows:
 
 
 
 
 
 
 
 
 
 
 -- 170 --  of 202
          o  SQL_C_CHAR         This is either in the form:
             and
             SQL_C_BINARY           VALUE size string
 
                                    size: If a value other than DEFAULT is specified for FILLCHAR
                                          on the Option command, then this must be the actual size of
                                          the string.
 
                                          Otherwise this value is ignored (zero is coded by convention).
 
                                    string: Must be delimited if it contains any space characters
 
                                    Note:  Values for SQL DECIMAL columns must be provided via
                                           C_CHAR buffers.  They are coded with the decimal
                                           point and CLI carries out the necessary conversion.
 
                                    Note:  There is a way to specify double byte values
                                           (called GRAPHIC in IBM SQL) but it is complicated a
                                           beyond the scope of this write-up (because it
                                           is beyond the scope of the person doing the
                                           write-up).
 
                                or:
 
                                    NULL_VALUE
 
                                    to set the memory buffer to the SQL null value.
 
                                    Note: this can be specified as an alternative
                                          for any data type.
 
                                or:
 
                                    FILE file_name
 
                                    where the of the string is to be read from the named file
 
          o  SQL_C_SHORT        Specified as VALUE followed by an integer (with a
             and                leading minus sign if negative).
             SQL_C_LONG
             and
             SQL_C_TINYINT
 
          o  SQL_C_DOUBLE       Specified as VALUE followed by a constant
             and                in "scientific" notation.  e.g.  FLOAT  15E4
             SQL_C_FLOAT                                         FLOAT  2.31E-4
 
          o  SQL_C_DATE         Specified as VALUE followed by a 4 digit year
                                                      "     "  a space
                                                      "     "  a 2 digit month
                                                      "     "  a space
                                                      "     "  a 2 digit day
 
          o  SQL_C_TIME         Specified as VALUE followed by a 2 digit hour (24 hour clock)
                                                      "     "  a space
                                                      "     "  a 2 digit minute
                                                      "     "  a space
                                                      "     "  a 2 digit second
 
 
 
 
 
 
 
 -- 171 --  of 202
          o  SQL_C_TIMESTAMP        Specified as VALUE followed by a 4 digit year
                                                          "     "  a space
                                                          "     "  a 2 digit month
                                                          "     "  a space
                                                          "     "  a 2 digit day
                                                          "     "  a space
                                                          "     "  a 2 digit hour (24 hour clock)
                                                          "     "  a space
                                                          "     "  a 2 digit minute
                                                          "     "  a space
                                                          "     "  a 2 digit second
                                                          "     "  a space
                                                          "     "  a 6 digit second fraction
 
          o  SQL_C_BLOB_LOCATOR
             and
             SQL_C_CLOB_LOCATOR
             and
             SQL_C_DBCLOB_LOCATOR
 
          o  SQL_C_BIT          VALUE followed by 0 or 1
 
  Successful Result:
 
      The memory buffer is updated (with acknowledgement).
 
  Example:
 
      See the example with the SQLPrepare command on page 124.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 172 --  of 202
  1.9  Example Tables and Scripts
 
 
  1.9.1  SQL to Create Tables, Views and Indexes
 
  The PUB database is used in several examples.  This section shows the
  statements used to create the objects in that database.
 
    CREATE TABLE PUB_CRAWL_LOG
                    (  PUB_NAME       VARCHAR(50)  NOT NULL,
                       TOWN           VARCHAR(25)  NOT NULL,
                       POLITICAL_UNIT VARCHAR(25),
                       COUNTRY        VARCHAR(25)  NOT NULL,
                       VISITED_ON     DATE         NOT NULL,
                       BEER_TRIED     VARCHAR(30)  NOT NULL,
                       PRICE          DEC(4,2)     NOT NULL,
                       ALC_CONTENT    FLOAT,
                       RATING         CHAR(1)      NOT NULL,
                       PICTURE_TAKEN  SMALLINT     NOT NULL,
                       DESCRIPTION    VARCHAR(2000),
                    PRIMARY KEY (PUB_NAME, VISITED_ON)                  )
 
    CREATE VIEW LIMEY_PUB_CRAWL
      AS SELECT PUB_NAME, TOWN, POLITICAL_UNIT, BEER_TRIED, VISITED_ON
      FROM PUB_CRAWL_LOG
      WHERE COUNTRY = 'ENGLAND'
 
    CREATE TABLE FRIEND_CTRL
                    (  FRIEND_NUMBER   SMALLINT     NOT NULL   PRIMARY KEY )
 
    CREATE TABLE FRIENDS_AT_PUB
                    (  PUB_NAME       VARCHAR(50)  NOT NULL,
                       VISITED_ON     DATE         NOT NULL,
                       FRIEND         VARCHAR(20)  NOT NULL,
                       FRIEND_NUMBER  SMALLINT     NOT NULL   REFERENCES FRIEND_CTRL,
                       REF            INTEGER      NOT NULL   PRIMARY KEY,
                    CONSTRAINT PUB_VISIT  FOREIGN KEY (PUB_NAME, VISITED_ON)  REFERENCES PUB_CRAWL_LOG )
 
    CREATE TABLE PUB_SIGN_PHOTOS
                    (  PUB_NAME           VARCHAR(50)  NOT NULL,
                       TOWN               VARCHAR(25)  NOT NULL,
                       PICTURE_QUALITY    CHAR(1),
                       PICTURE_NUMBER     SMALLINT     NOT NULL,
                       SIGN_PHOTO         BLOB(50K),
                       PHOTO_DESCRIPTION  CLOB(20K)              )
 
       GRANT SELECT ON PUB_SIGN_PHOTOS TO PUBLIC
 
       GRANT ALL ON PUB_SIGN_PHOTOS TO PELLOW
 
       GRANT UPDATE, INSERT ON PUB_SIGN_PHOTOS TO MLI
 
    CREATE INDEX PUB_SIGN_INDEX
      ON PUB_SIGN_PHOTOS (PUB_NAME)
 
    CREATE UNIQUE INDEX PUB_PICTURE_NO
      ON PUB_SIGN_PHOTOS (PICTURE_NUMBER)
 
 
 
 
 
 
 
 
 -- 173 --  of 202
 
 
 
  1.9.2  Tables with Sample Data
 
  Some of the examples also assume certain contents for these tables.
  Following is a list of those contents that are loaded into the tables by a
  sample script called PUB_CR8.  Other sample scripts add additional rows to
  some of these tables.
 
  PUB_CRAWL_LOG:
 
  Inserted by PUB_CR8:
 
      PUB_NAME                   TOWN             POLITICAL_UNIT  COUNTRY    VISITED_ON  BEER_TRIED                PRICE  ALC_CONTENT
                                 RATING  PICTURE  DESCRIPTION
 
      Case is Altered            Pinner           Middlesex       England    1971-07-16  Young's Special Bitter    0.16   -
                                 G       1        My first visit to a pub in England.  The day was perfect and we ate in the garden.
 
      Los Gatos Brewing Company  Los Gatos        California      USA        1993-03-15  Oktoberfest               2.75
      4.00000000000000e+03
                                 G       0        A brew pub with a restaurant.   Had excellent lamb.  Went with Margaret Li and X/Open
      mob.
 
      White Horse                Droxford         Hampshire       England    1977-07-21  Guinness                  0.55   -
                                 E       1        My first visit to this small inn (while on a course at Hursly).  Later on, we moved nearby.
      nearby.
 
      Cat and Custard Pot        Shipton Moyne    Wiltshire       England    1979-01-15  Tankard (Whitbread)       0.45,  -
                                 G       1        I can't  remember much about this visit.  I don't even know how the cat's head got in the pot.
      the pot.
 
      The Round of Grass         ?                Warwickshire    England    1993-06-10  Guinness                  1.40,  -
                                 E       1        The name comes from the asparagrass farms nearby.  Had an excellant meal with Simon & Shiela.
      Shiela.
 
      Black Fly and Ear          Pivabiska        Ontario         Canada     1984-07-01  Pivabiska Pure Pilsner    1.20,  -
                                 F       0        A very exclusive place not easily found (mainly because there is no permanent building).
 
      The Stables                Theale           Berkshire       England    1992-06-28  Pivabiska Pure Pilsner    0.00,  -
                                 G       1        A house conversion of the old brewary stables.  Beer made from old family recipe.
 
      Cawl Esquel                Don Mills        Ontario         Canada     1995-05-01  LLL (Limoges & Li Lager)  0.10,  -
                                 O       0        Brewed on the spot.  Landords are great but the surroundings are somewhat oppresive.
 
      The Slug and Lettuce       Stratford        Warwickshire    England    1994-07-03  Flower's Best Bitter      1.40,  -
                                 G       0        Risked an egg, prawn, and lettuce sandwich in spite of the name.  Maybe the prawns were slugs.
      slugs
 
      Cross Keys                 Peebles          Peebles         Scotland   1974-06-14  Guinness                  0.40   -
                                 E       0        Margaret had a Pimms #1 and the bartender complained about it being a 'fruit salad'.
 
      The Shed and Grimsby       Pivabiska        Ontario         Canada     1984-07-01  Pivabiska Pure Pilsner    0.00   -
                                 G       0        This is my place.  The name resulted from a compromise with my brother John.
 
  Added by PUB_PUT:
 
      Waverly Hotel              Hearst           Ontario         Canada     1976-06-21  Northern Ale (Doran)       .75   4e3
                                 G       0        This is an old railway hotel right on highway 11.  It has the typical old small town Ont ...
 
  FRIEND_CTRL:
 
 
 
 -- 174 --  of 202
      FRIEND_NUMBER
 
      1000
      2000
      3000
      4000
      5000
 
  FRIENDS_AT_PUB:
 
      PUB_NAME                   VISITED_ON  FRIEND           FRIEND_NUMBER  REF
 
      Case is Altered            1971-07-16  Ed LaHay         5000           1
 
      Case is Altered            1971-07-16  Gail Mann        3000           2
 
      Los Gatos Brewing Company  1993-03-15  Margaret Li      1000           3
 
      Los Gatos Brewing Company  1993-03-15  Paul Cotton      2000           4
 
      Los Gatos Brewing Company  1993-03-15  Nat Goodspeed    4000           5
 
      Cawl Esquel                1995-05-01  Margaret Li      1000           6
 
  PUB_SIGN_PHOTOS:
 
  Inserted by PUB_CR8:
 
      PUB_NAME                   TOWN                   PICTURE    PICTURE   SIGN_PHOTO   PHOTO_DESCRIPTION
                                                        _QUALITY   _NUMBER
 
      Dutchess of Markham        Markham                d          1         -            Description of Picture 1
 
      Case is Altered            Pinner                 c          2         -            Description of Picture 1
 
      Bishop and Wolf            Isles of Scilly        b          3         -            Description of Picture 1
 
      The Bullnose Morris        Oxford                 b          4         -            Description of Picture 1
 
      Duke Without a Head        Wateringbury           a          5         -            Description of Picture 1
 
  Added by PUB_ARAY:
 
      The Royal Oak              Hayling Island         -          11        -            -
 
      Fox With his Teeth Drawn   Munden                 -          12        -            -
 
      Magpie and Punchbowl       Bishopsgate, London    -          13        -            -
 
      Wig and Fifgett            Boxted                 -          14        -            -
 
      The Cheese Rollers         Shurington             -          15        -            -
 
      Whiskey Jack               Pivabiska              -          16        -            -
 
  Added by PUB_LOB:
 
      Cupid                      Hemel Hempstead        a          21        -            For 110 years the Cupid ...
 
      The Loggerheads            Gwernymynydd           a          22        -            The Loggerheads, Gwerny ...
 
 
 
 
 
 -- 175 --  of 202
  1.9.3  Registry of Sample Scripts
 
  +-----------+------------------------+------------------------------------+
  | Script    | Must run after         | Purpose                            |
  | Name      | script(s)              |                                    |
  +-----------+------------------------+------------------------------------+
  | PUB_CR8   | -                      | Create the sample table, views,    |
  |           |                        | and indexes and load the sample    |
  |           |                        | tables.                            |
  +-----------+------------------------+------------------------------------+
  | PUB_CTLG  | PUB_CR8                | Use most of the catalog functions. |
  +-----------+------------------------+------------------------------------+
  | PUB_ARAY  | PUB_CR8                | Fetch and array of rows and insert |
  |           |                        | a block of rows with data from     |
  |           |                        | both memory array buffers and file |
  |           |                        | reference buffers.                 |
  +-----------+------------------------+------------------------------------+
  | PUB_LOB   | PUB_CR8, PUB_ARAY      | Execute the special functions for  |
  |           |                        | large objetcs                      |
  +-----------+------------------------+------------------------------------+
  | PUB_MISC  | PUB_CR8                | A mixed bag of tests not covered   |
  |           |                        | in other scripts                   |
  +-----------+------------------------+------------------------------------+
  | PUB_MORE  | PUB_CR8, PUB_ARAY,     | Execute a SELECT providing an      |
  |           | PUB_LOB, PUB_PUT       | array of input parameters and,     |
  |           |                        | thus, creating multiple result     |
  |           |                        | sets.  Process the result sets,    |
  |           |                        | thus illustrating the use of       |
  |           |                        | MoreResults.  Also illustrate the  |
  |           |                        | use of SQLCancel.                  |
  +-----------+------------------------+------------------------------------+
  | PUB_MTRX  | PUB_CR8                |                                    |
  +-----------+------------------------+------------------------------------+
  | PUB_PUT   | PUB_CR8                |                                    |
  +-----------+------------------------+------------------------------------+
  | PUB_DROP  | PUB_CR8                | Drop all the objects created by    |
  |           |                        | PUB_CR8.  Should be run after all  |
  |           |                        | other scripts in order to clean    |
  |           |                        | up.                                |
  +-----------+------------------------+------------------------------------+
 
 
  1.9.4  Cross Reference of Scripts and Commands Used.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 176 --  of 202
                                 CR8   CTLG   ARAY   LOB   MISC   MORE   MTRX   PUT   DROP
                                 ---   ----   ----   ---   ----   ----   ----   ---   ----
    SQLAllocConnect              -     -      -      -     X      -      -      -     X
    SQLAllocEnv                  -     -      -      -     X      -      -      -     X
    SQLAllocStmt                 X     X      X      X     X      X      X      X     -
    SQLBindCol                   -     -      X      X     X      -      -      -     -
    SQLBindFileToCol             -     -      X      X     -      -      -      -     -
    SQLBindFileToParam           -     -      -      X     -      -      -      -     -
    SQLBindParameter             -     -      X      -     -      X      -      -     -
    SQLCancel                    -     -      X      -     -      X      -      -     -
    SQLChangeMemArray            -     -      -      -     -      -      -      -     -
    SQLChangeParam               -     -      -      -     -      -      -      X     -
    ---Check                     -     -      -      -     X      -      -      X     -
    SQLColAttributes             -     -      -      X     -      -      -      -     -
    SQLColumnPrivileges          -     X      -      -     -      -      -      -     -
    SQLColumns                   -     X      -      -     -      -      -      -     -
    SQLConnect                   -     -      -      -     X      -      -      -     X
    SQLDataSources               -     -      -      -     -      -      -      -     -
    ---DescribeAll               -     -      -      -     X      -      -      -     -
    SQLDescribeCol               -     -      -      -     X      -      -      -     -
    SQLDisconnect                -     -      -      -     -      -      -      -     X
    ---DisplayFormat             -     -      -      -     -      -      X      -     -
    SQLDriverConnect             -     -      -      -     X      -      -      -     -
    SQLError                     X     -      -      -     X      -      -      X     -
    SQLExecDirect                X     -      X      X     X      -      -      -     X
    SQLExecute                   X     -      X      X     -      X      X      X     -
    ---ExtendedBindCol           -     -      -      -     -      -      X      -     -
 
                               CR8   CTLG   ARAY   LOB   MISC   MORE   MTRX
  PUT   DROP
                               ---   ----   ----   ---   ----   ----   ----
  ---   ----
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 177 --  of 202
    SQLExtendedFetch             -     -      X      X     -      -      -      -     -
    SQLFetch                     -     -      -      -     X      -      -      -     -
    ---FetchAll                  X     X      X      X     X      X      -      X     -
    ---FetchNext                 X     -      -      -     -      -      -      -     -
    SQLForeignKeys               -     X      -      -     -      -      -      -     -
    ---FormatMatrix              -     -      -      -     -      -      X      -     -
    SQLFreeConnect               -     -      -      -     -      -      -      -     X
    SQLFreeEnv                   -     -      -      -     -      -      -      -     X
    ---FreeFileRef               -     -      X      -     -      -      -      -     -
    ---FreeMem                   X     -      -      -     -      -      -      -     -
    ---FreeMemArray              -     -      -      -     -      -      -      -     -
    ---FreeMemMatrix             -     -      -      -     -      -      X      -     -
    SQLFreeStmt                  X     X      X      X     X      X      -      X     -
    SQLGetConnectOption          -     -      -      -     X      -      -      -     -
    SQLGetCursorName             -     -      -      -     X      -      -      -     -
    SQLGetData                   -     -      -      -     -      -      -      -     -
    SQLGetEnvAttr                -     -      -      -     X      -      -      -     -
    ---GetFileRef                -     -      X      X     -      -      -      -     -
    SQLGetFunctions              -     -      -      -     X      -      -      -     -
    SQLGetInfo                   -     -      -      -     X      -      -      -     -
    ---GetInfoAll                -     -      -      -     X      -      -      -     -
    SQLGetLength                 -     -      -      X     -      -      -      -     -
    ---GetMem                    X     -      X      X     X      -      -      X     -
    ---GetMemArray               -     -      X      X     -      X      -      -     -
    ---GetMemMatrix              -     -      -      -     -      -      X      -     -
    ---GetParamIndex             -     -      -      -     -      -      -      -     -
    SQLGetPosition               -     -      -      X     -      -      -      -     -
    SQLGetSQLCA                  -     -      -      -     X      -      -      -     -
    SQLGetStmtOption             -     -      X      -     X      -      -      -     -
    SQLGetSubString              -     -      -      X     -      -      -      -     -
    SQLGetTypeInfo               -     -      -      -     X      -      -      -     -
    ---KillEnv                   X     X      X      X     X      X      X      X     -
    ---List ALL                  X     -      -      -     -      -      -      -     -
            BUFFS                X     -      -      X     X      -      -      -     -
            MEMARRAY             -     -      -      X     -      X      -      -     -
            MEMMATRIX            -     -      -      X     -      -      X      -     -
            FILEREFS             -     -      X      X     -      -      X      -     -
    SQLMoreResults               -     -      -      -     -      X      -      -     -
    SQLNativeSQL                 -     -      -      -     -      -      -      -     -
    SQLNumParams                 X     -      -      -     -      -      -      -     -
    SQLNumResultCols             -     -      X      -     X      -      -      -     -
    ---Option                    X     X      X      X     X      X      X      X     X
    SQLParamData                 -     -      -      -     -      -      -      X     -
    SQLParamOptions              -     -      X      -     -      X      -      -     -
    ---Pause                     -     -      -      X     -      -      -      -     -
    SQLPrepare                   X     -      X      X     -      X      X      X     -
    SQLPrimaryKeys               -     X      -      -     -      -      -      -     -
    SQLProcedureColumns          -     -      -      -     -      -      -      -     -
    SQLProcedures                -     -      -      -     -      -      -      -     -
    SQLPutData                   -     -      -      -     -      -      -      X     -
    ---QuickConnect              X     X      X      X     -      X      X      X     -
    ---Quit                      -     -      -      -     -      -      -      -     -
    ---Read                      -     -      -      -     -      -      -      -     -
    ---ReadNLog                  -     -      -      -     -      -      -      -     -
    SQLRowCount                  -     -      X      -     -      -      X      -     -
    ---SaveFile                  -     -      -      -     -      -      -      -     -
    SQLSetColAttributes          -     -      -      -     -      -      -      -     -
 
                               CR8   CTLG   ARAY   LOB   MISC   MORE   MTRX
  PUT   DROP
                               ---   ----   ----   ---   ----   ----   ----
  ---   ----
 
 
 
 -- 178 --  of 202
    SQLSetConnection             -     -      -      -     -      -      -      -     -
    SQLSetConnectOption          -     -      -      -     X      -      -      -     -
    SQLSetCursorName             -     -      -      -     X      -      -      -     -
    SQLSetEnvAttr                -     -      -      -     X      -      -      -     -
    SQLSetParam                  X     -      -      X     -      -      -      X     -
    SQLSetStmtOption             -     -      X      X     X      -      X      -     -
    SQLSpecialColumns            -     X      -      -     -      -      -      -     -
    SQLStatistics                -     X      -      -     -      -      -      -     -
    SQLTablePrivileges           -     X      -      -     -      -      -      -     -
    SQLTables                    -     X      -      -     -      -      -      -     -
    SQLTransact                  X     X      X      X     X      X      -      X     X
    ---UnformatMatrix            -     -      -      -     -      -      X      -     -
    ---UpdateElem                -     -      X      -     -      X      -      -     -
    ---UpdateFileRef             -     -      X      X     -      -      -      -     -
    ---UpdateMem                 X     -      -      X     -      -      -      X     -
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 179 --  of 202
  1.10  Command Syntax Summary
 
  This section simply contains the syntax of all the commands together in one
  place for quick reference.
 
 
    >>--SQLAllocConnect---henv-------------------------------------------------------------------------------><
                                +-myhdbc-+
 
    >>--SQLAllocEnv------------------------------------------------------------------------------------------><
                     +-myhenv-+
 
    >>--SQLAllocStmt---hdbc----------------------------------------------------------------------------------><
                             +-myhstmt-+
 
    >>--SQLBindCol---hstmt---column----SQL_C_CHAR-----------------hmembuf------------------------------------><
                                     |-SQL_C_DBCHAR---------|   |-MEMARRAY---memarray_id-|
                                     |-SQL_C_SHORT----------|   +-SQL_UNBIND-------------+
                                     |-SQL_C_USHORT---------|
                                     |-SQL_C_SSHORT---------|             memory
                                     |-SQL_C_LONG-----------|
                                     |-SQL_C_ULONG----------|
                                     |-SQL_C_SLONG----------|
                                     |-SQL_C_DOUBLE---------|
                                     |-SQL_C_FLOAT----------|
                                     |-SQL_C_DATE-----------|
                                     |-SQL_C_TIME-----------|
                                     |-SQL_C_TIMESTAMP------|
                                     |-SQL_C_BINARY---------|
                                     |-SQL_C_BIT------------|
                                     |-SQL_C_TINYINT--------|
                                     |-SQL_C_UTINYINT-------|
                                     |-SQL_C_STINYINT-------|
                                     |-SQL_C_BLOB_LOCATOR---|
                                     |-SQL_C_CLOB_LOCATOR---|
                                     |-SQL_C_DBCLOB_LOCATOR-|
                                     |                      |
                                     +-SQL_C_DEFAULT--------+
 
                                              c_type
 
    >>--SQLBindFileToCol---hstmt---column---hfileref---------------------------------------------------------><
                                                       +-/testmask/-+
 
    >>--SQLBindFileToParam---hstmt---param-----SQL_BLOB-------hfileref---------------------------------------><
                                             |-SQL_CLOB---|              +-/testmask/-+
                                             +-SQL_DBCLOB-+
 
                                              sql_lob_type
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 180 --  of 202
    >>--SQLBindParameter---hstmt---param-----SQL_PARAM_INPUT------------------------------------------------->
                                           |-SQL_PARAM_INPT_OUTPUT-|
                                           +-SQL_PARAM_OUTPUT------+
 
                                                  param_type
 
 
                   >----SQL_C_CHAR-----------------SQL_CHAR-------------------------------------------------->
                      |-SQL_C_DBCHAR---------|   |-SQL_VARCHAR--------|
                      |-SQL_C_SHORT----------|   |-SQL_LONGVARCHAR----|
                      |-SQL_C_USHORT---------|   |-SQL_GRAPHIC--------|
                      |-SQL_C_SSHORT---------|   |-SQL_VARGRAPHIC-----|
                      |-SQL_C_LONG-----------|   |-SQL_LONGVARGRAPHIC-|
                      |-SQL_C_ULONG----------|   |-SQL_SMALLINT-------|
                      |-SQL_C_SLONG----------|   |-SQL_INTEGER--------|
                      |-SQL_C_DOUBLE---------|   |-SQL_DECIMAL--------|
                      |-SQL_C_FLOAT----------|   |-SQL_NUMERIC--------|
                      |-SQL_C_DATE-----------|   |-SQL_DOUBLE---------|
                      |-SQL_C_TIME-----------|   |-SQL_FLOAT----------|
                      |-SQL_C_TIMESTAMP------|   |-SQL_REAL-----------|
                      |-SQL_C_BINARY---------|   |-SQL_DATE-----------|
                      |-SQL_C_BIT------------|   |-SQL_TIME-----------|
                      |-SQL_C_TINYINT--------|   |-SQL_TIMESTAMP------|
                      |-SQL_C_UTINYINT-------|   |-SQL_BINARY---------|
                      |-SQL_C_STINYINT-------|   |-SQL_VARBINARY------|
                      |-SQL_C_BLOB_LOCATOR---|   |-SQL_LONGVARBINARY--|
                      |-SQL_C_CLOB_LOCATOR---|   |-SQL_BLOB-----------|
                      +-SQL_C_DBCLOB_LOCATOR-+   |-SQL_CLOB-----------|
                                                 +-SQL_DBCLOB---------+
                             c_type
                                                        sql_type
 
 
                                                                           +-ADDRESS--+
                   >--param_length_precision---param_scale-----hmembuf-----+----------+----------------------><
                                                             |             +-HANDLE---+ |
                                                             |                          |
                                                             +-memarray_id---MEMARRAY---+
 
    >>--SQLCancel---hstmt------------------------------------------------------------------------------------><
 
    >>--ChangeMemArray---memarray_id----SQL_DATA_AT_EXEC-----------------------------------------------------><
                                      +-SQL_NTS----------+   | +--------+ |
                                                             | V        | |
                                                             +---elem_m---+
 
    >>--ChangeParam---hmembuf-----SQL_DATA_AT_EXEC------------------------------------------------------------><
                                +-SQL_NTS----------+
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 181 --  of 202
    >>--Check----FUNC_RC----SQL_SUCCESS----------------------------------------------------------------------><
               |          |-SQL_SUCCESS_WITH_INFO-| |
               |          |-SQL_NO_DATA_FOUND-----| |
               |          |-SQL_ERROR-------------| |
               |          |-SQL_INVALID_HANDLE----| |
               |          +-SQL_NEED_DATA---------+ |
               |                                    |
               |-SQLSTATE---value-------------------|
               |                                    |
               |-NATIVE_ERROR---native_error_value--|
               |                                    |
               +-RESET----FUNC_RC-------------------+
                        |              |
                        |-SQLSTATE-----|
                        |              |
                        +-NATIVE_ERROR-+
 
                                                                          +-50-------------+
    >>--SQLColAttributes---hstmt---column----SQL_COLUMN_AUTO_INCREMENT----+----------------+-----------------><
                                           |-SQL_COLUMN_CASE_SENSITIVE-|  +-desc_maxlength-+
                                           |-SQL_COLUMN_CATALOG_NAME---|
                                           |-SQL_COLUMN_COUNT----------|
                                           |-SQL_COLUMN_DISPLAY_SIZE---|
                                           |-SQL_COLUMN_DISTINCT_TYPE--|
                                           |-SQL_COLUMN_LABEL----------|
                                           |-SQL_COLUMN_LENGTH---------|
                                           |-SQL_COLUMN_MONEY----------|
                                           |-SQL_COLUMN_NAME-----------|
                                           |-SQL_COLUMN_NULLABLE-------|
                                           |-SQL_COLUMN_PRECISON-------|
                                           |-SQL_COLUMN_SCALE----------|
                                           |-SQL_COLUMN_SCHEMA_NAME----|
                                           |-SQL_COLUMN_SEARCHABLE-----|
                                           |-SQL_COLUMN_TYPE-----------|
                                           |-SQL_COLUMN_TYPE_NAME------|
                                           |-SQL_COLUMN_UNSIGNED-------|
                                           +-SQL_COLUMN_UPDATABLE------+
 
                                                 field_identifier
 
    >>--SQLColumnPrivileges---hstmt-------------------------------------------------------------------------->
 
                  >-- -1--------------------0---------------------------------------------------------------->
 
                  >---table_schema----------table_schema_length---------------------------------------------->
 
                  >---table_name------------table_name_length------------------------------------------------><
 
                  >---column_name_pattern---column_name_pattern_length---------------------------------------><
 
    >>--SQLColumns---hstmt----------------------------------------------------------------------------------->
 
                  >-- -1---------------------0--------------------------------------------------------------->
 
                  >---table_schema_pattern---table_schema_pattern_length------------------------------------->
 
                  >---table_name_pattern-----table_name_pattern_length--------------------------------------->
 
                  >---column_name_pattern----column_name_pattern_length--------------------------------------><
 
 
 
 
 
 
 -- 182 --  of 202
    >>--SQLConnect---hdbc------------------------------------------------------------------------------------><
                           +-db_alias----db_alias_length-------------------------------+
                                                          +-|user_name_and_password|-+
 
 
            user_name_and_password = |-user_name---user_name_length---authentication---authentication_length-|
 
                                                    +-9--------------------31-------------+
    >>--SQLDataSources---henv----SQL_FETCH_FIRST----+-------------------------------------+------------------><
                               |                 |  +-db_alias_maxlength---desc_maxlength-+
                               +-SQL_FETCH_NEXT--+
 
                                search_direction
 
    >>--DescribeAll---hstmt----------------------------------------------------------------------------------><
 
                                        +-30-------------+
    >>--SQLDescribeCol--hstmt---column--+----------------+---------------------------------------------------><
                                        +-desc_maxlength-+
 
    >>--Diff---file_name_1---file_name_2---------------------------------------------------------------------><
 
    >>--SQLDisconnect---hdbc---------------------------------------------------------------------------------><
 
    >>--DisplayFormat-----matrixformat_id--------------------------------------------------------------------><
                        +-ALL-------------+
 
    >>--SQLDriverConnect---hdbc---0---in_connstr---in_connstr_length---out_connstr_maxlength----------------->
 
     >----SQL_DRIVER_PROMPT----------------------------------------------------------------------------------><
        |-SQL_DRIVER_COMPLETE----------|
        |-SQL_DRIVER_COMPLETE_REQUIRED-|
        +-SQL_DRIVER_NOPROMPT----------+
 
                   completion
 
                                                           +-1024----------+
    >>--SQLError----henv---SQL_NUL_HDBC---SQL_NUL_HSTMT----+---------------+---------------------------------><
                  |-0------hdbc-----------SQL_NUL_HSTMT-|  +-msg_maxlength-+
                  +-0------0--------------hstmt---------+
 
    >>--SQLExecDirect---hstmt----sqlstmt---sqlstmt_length----------------------------------------------------><
                               |                          |
                               +-FILE---file_name---------+
 
    >>--SQLExecute---hstmt-----------------------------------------------------------------------------------><
 
    >>--ExtendedBindCol---hstmt---memmatrix_id---------------------------------------------------------------><
 
    >>--SQLExtendedFetch---hstmt---SQL_FETCH_NEXT---0-------------------------------------------------------->
                                                        +-MEMMATRIX---memmatrix_id-+
                                     fetch_type
 
 
                  >------------------------------------------------------------------------------------------><
                     +-/TEST---textmask/-+
 
    >>--SQLFetch---hstmt-------------------------------------------------------------------------------------><
 
    >>--FetchAll---hstmt-------------------------------------------------------------------------------------><
 
    >>--FetchNext---hstmt------------------------------------------------------------------------------------><
                           +-COLUMNNAME-+
 
 
 -- 183 --  of 202
 
 
    >>--SQLForeignKeys---hstmt------------------------------------------------------------------------------->
 
                  >-- -1--------------------0---------------------------------------------------------------->
 
                  >---primary_key_schema----primary_key_schema_length---------------------------------------->
 
                  >---primary_key_table-----primary_key_table_length----------------------------------------->
 
                  >-- -1--------------------0---------------------------------------------------------------->
 
                  >---foreign_key_schema----foreign_key_schema_length---------------------------------------->
 
                  >---foreign_key_table-----foreign_key_table_length-----------------------------------------><
 
    >>--FormatMatrix---matrixformat_id---column-----SQL_C_CHAR---size----------------------------------------><
                                                  |-SQL_C_DBCHAR---size--|
                                                  |-SQL_C_SHORT----------|
                                                  |-SQL_C_USHORT---------|
                                                  |-SQL_C_SSHORT---------|
                                                  |-SQL_C_LONG-----------|
                                                  |-SQL_C_ULONG----------|
                                                  |-SQL_C_SLONG----------|
                                                  |-SQL_C_DOUBLE---------|
                                                  |-SQL_C_FLOAT----------|
                                                  |-SQL_C_DATE-----------|
                                                  |-SQL_C_TIME-----------|
                                                  |-SQL_C_TIMESTAMP------|
                                                  |-SQL_C_BINARY---size--|
                                                  |-SQL_C_BIT------------|
                                                  |-SQL_C_TINYINT--------|
                                                  |-SQL_C_UTINYINT-------|
                                                  |-SQL_C_STINYINT-------|
                                                  |-SQL_C_BLOB_LOCATOR---|
                                                  |-SQL_C_CLOB_LOCATOR---|
                                                  +-SQL_C_DBCLOB_LOCATOR-+
 
                                                         c_type
 
    >>--SQLFreeConnect---hdbc--------------------------------------------------------------------------------><
 
    >>--SQLFreeEnv---henv------------------------------------------------------------------------------------><
 
    >>--FreeFileRef---hfileref-------------------------------------------------------------------------------><
 
    >>--FreeMem---hmembuf------------------------------------------------------------------------------------><
 
    >>--FreeMemArray---memarray_id---------------------------------------------------------------------------><
 
    >>--FreeMemMatrix---memmatrix_id-------------------------------------------------------------------------><
 
    >>--SQLFreeStmt---hstmt----SQL_CLOSE---------------------------------------------------------------------><
                             |-SQL_DROP---------|
                             |-SQL_UNBIND-------|
                             +-SQL_RESET_PARAMS-+
 
                                 stmt_option
 
 
 
 
 
 
 
 -- 184 --  of 202
    >>--SQLGetConnectOption---hdbc----SQL_ACCESS_MODE--------------------------------------------------------><
                                    |-SQL_AUTOCOMMIT--------|   +-/testmask/-+
                                    |-SQL_CONNECTTYPE-------|
                                    |-SQL_CURRENT_QUALIFIER-|
                                    |-SQL_CURRENT_SCHEMA----|
                                    |-SQL_DB2ESTIMATE-------|
                                    |-SQL_DB2EXPLAIN--------|
                                    |-SQL_LOGIN_TIMEOUT-----|
                                    |-SQL_LONGDATA_COMPAT---|
                                    |-SQL_MAXCONN-----------|
                                    |-/SQL_OPT_TRACE/---------|
                                    |-/SQL_OPT_TRACEFILE/-----|
                                    |-/SQL_PACKET_SIZE/-------|
                                    |-SQL_QUIET_MODE--------|
                                    |-SQL_SYNC_POINT--------|
                                    |-/SQL_TRANSLATE_DDL/-----|
                                    |-/SQL_TRANSLATE_OPTION/--|
                                    |-SQL_TXN_ISOLATION-----|
                                    +-SQL_WCHAR_TYPE--------+
 
                                             option
 
                                  +-19--------------------+
    >>--SQLGetCursorName---hstmt--+-----------------------+--------------------------------------------------><
                                  +-cursor_name_maxlength-+
 
    >>--SQLGetData---hstmt---column----SQL_C_CHAR---------------hmembuf--------------------------------------><
                                     |-SQL_C_DBCHAR---------|             +-FILE---filename-+
                                     |-SQL_C_SHORT----------|
                                     |-SQL_C_USHORT---------|
                                     |-SQL_C_SSHORT---------|
                                     |-SQL_C_LONG-----------|
                                     |-SQL_C_ULONG----------|
                                     |-SQL_C_SLONG----------|
                                     |-SQL_C_DOUBLE---------|
                                     |-SQL_C_FLOAT----------|
                                     |-SQL_C_DATE-----------|
                                     |-SQL_C_TIME-----------|
                                     |-SQL_C_TIMESTAMP------|
                                     |-SQL_C_BINARY---------|
                                     |-SQL_C_BIT------------|
                                     |-SQL_C_TINYINT--------|
                                     |-SQL_C_UTINYINT-------|
                                     |-SQL_C_STINYINT-------|
                                     |-SQL_C_BLOB_LOCATOR---|
                                     |-SQL_C_CLOB_LOCATOR---|
                                     |-SQL_C_DBCLOB_LOCATOR-|
                                     |                      |
                                     +-SQL_C_DEFAULT--------+
 
                                              c_type
 
    >>--SQLGetEnvAttr---henv-----SQL_ATTR_OUTPUT_NTS---------------------------------------------------------><
                               |-SQL_CONNECTTYPE-----|   +-attribute_value_length----------------+
                               |-SQL_MAXCONN---------|                              +-/testmask/-+
                               +-SQL_SYNC_POINT------+
 
                                      attribute
 
 
 
 
 
 
 
 -- 185 --  of 202
                                        +-ARRAYSIZE---1---MAXFILENAMELENGTH---256--------------+
    >>--GetFileRef---hstmt---hfileref---+--------------------------------------------------------------------><
                                        |                     +-MAXFILENAMELENGTH---256----+ |
                                        +-ARRAYSIZE---elems---+----------------------------+-+
                                                              +-MAXFILENAMELENGTH---length-+
 
    >>--SQLGetFunctions---hdbc---function--------------------------------------------------------------------><
 
                                       +-50-------------+
    >>--SQLGetInfo---hdbc---info_type--+----------------+----------------------------------------------------><
                                       +-info_maxlength-+
 
    >>--GetInfoAll---hdbc------------------------------------------------------------------------------------><
 
    >>--SQLGetLength---hstmt----SQL_C_BLOB_LOCATOR------locator_hmembuf--------------------------------------><
                              |-SQL_C_CLOB_LOCATOR---|                    +-/testmask/-+
                              +-SQL_C_DBCLOB_LOCATOR-+
 
                                    locator_c_type
 
    >>--GetMem---hstmt---hmembuf-----SQL_C_CHAR---size-------------------------------------------------------><
                                   |-SQL_C_DBCHAR---------|
                                   |-SQL_C_SHORT----------|
                                   |-SQL_C_USHORT---------|
                                   |-SQL_C_SSHORT---------|
                                   |-SQL_C_LONG-----------|
                                   |-SQL_C_ULONG----------|
                                   |-SQL_C_SLONG----------|
                                   |-SQL_C_DOUBLE---------|
                                   |-SQL_C_FLOAT----------|
                                   |-SQL_C_DATE-----------|
                                   |-SQL_C_TIME-----------|
                                   |-SQL_C_TIMESTAMP------|
                                   |-SQL_C_BINARY---size--|
                                   |-SQL_C_BIT------------|
                                   |-SQL_C_TINYINT--------|
                                   |-SQL_C_UTINYINT-------|
                                   |-SQL_C_STINYINT-------|
                                   |-SQL_C_BLOB_LOCATOR---|
                                   |-SQL_C_CLOB_LOCATOR---|
                                   +-SQL_C_DBCLOB_LOCATOR-+
 
                                            c_type
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 186 --  of 202
    >>--GetMemArray---hstmt---memarray_id---total_elems----SQL_C_CHAR---elem_size----------------------------><
                                                         |-SQL_C_DBCHAR---elem_size-|
                                                         |-SQL_C_SHORT--------------|
                                                         |-SQL_C_USHORT-------------|
                                                         |-SQL_C_SSHORT-------------|
                                                         |-SQL_C_LONG---------------|
                                                         |-SQL_C_ULONG--------------|
                                                         |-SQL_C_SLONG--------------|
                                                         |-SQL_C_DOUBLE-------------|
                                                         |-SQL_C_FLOAT--------------|
                                                         |-SQL_C_DATE---------------|
                                                         |-SQL_C_TIME---------------|
                                                         |-SQL_C_TIMESTAMP----------|
                                                         |-SQL_C_BINARY---elem_size-|
                                                         |-SQL_C_BIT----------------|
                                                         |-SQL_C_TINYINT------------|
                                                         |-SQL_C_UTINYINT-----------|
                                                         |-SQL_C_STINYINT-----------|
                                                         |-SQL_C_BLOB_LOCATOR-------|
                                                         |-SQL_C_CLOB_LOCATOR-------|
                                                         +-SQL_C_DBCLOB_LOCATOR-----+
 
                                                                c_type
 
    >>--GetMemMatrix---hstmt---matrixformat_id---memmatrix_id---total_rows-----------------------------------><
 
    >>--GetParamIndex---hstmt--------------------------------------------------------------------------------><
 
    >>--SQLGetPosition---hstmt-----SQL_C_BLOB_LOCATOR------source_hmembuf---FROM---LITERAL------------------->
                                 |-SQL_C_CLOB_LOCATOR---|                        +-LOCATOR-+
                                 +-SQL_C_DBCLOB_LOCATOR-+
 
                                      locator_c_type
 
 
                  >--search_hmembuf---from_position----------------------------------------------------------><
                                                      +-/testmask/-+
 
    >>--SQLGetSQLCA----henv---SQL_NUL_HDBC---SQL_NUL_HSTMT---------------------------------------------------><
                     |-0------hdbc-----------SQL_NUL_HSTMT-|
                     +-0------0--------------hstmt---------+
 
    >>--SQLGetStmtOption---hstmt-----SQL_ASYNC_ENABLE--------------------------------------------------------><
                                   |-SQL_BIND_TYPE---------|   +/testmask/-+
                                   |-SQL_CONCURRENCY-------|
                                   |-SQL_CURSOR_HOLD-------|
                                   |-SQL_CURSOR_TYPE-------|
                                   |-SQL_GET_BOOKMARK------|
                                   |-SQL_MAX_LENGTH--------|
                                   |-SQL_MAX_ROWS----------|
                                   |-SQL_NODESCRIBE--------|
                                   |-SQL_NOSCAN------------|
                                   |-SQL_PARAMOPT_ATOMIC---|
                                   |-SQL_QUERY_TIMEOUT-----|
                                   |-SQL_RETRIEVE_DATA-----|
                                   |-SQL_ROW_NUMBER--------|
                                   |-SQL_ROWSET_SIZE-------|
                                   +-SQL_STMTTXN_ISOLATION-+
 
                                            option
 
 
 
 
 
 -- 187 --  of 202
    >>--SQLGetSubString---hstmt-----SQL_C_BLOB_LOCATOR------source_hmembuf---from_position---for_length------>
                                  |-SQL_C_CLOB_LOCATOR---|
                                  +-SQL_C_DBCLOB_LOCATOR-+
 
                                       locator_c_type
 
 
                  >----SQL_C_CHAR-----------------USEMEMBUF---hmembuf----------------------------------------><
                     |-SQL_C_DBCHAR---------|   |                          |   +-/testmask/-+
                     |-SQL_C_BINARY---------|   +-TEMPBUF---temp_buff_size-+
                     |-SQL_C_BLOB_LOCATOR---|
                     |-SQL_C_CLOB_LOCATOR---|
                     +-SQL_C_DBCLOB_LOCATOR-+
 
                          target_c_type
 
    >>--SQLGetTypeInfo---hstmt----SQL_CHAR-------------------------------------------------------------------><
                                |-SQL_VARCHAR--------|
                                |-SQL_LONGVARCHAR----|
                                |-SQL_GRAPHIC--------|
                                |-SQL_VARGRAPHIC-----|
                                |-SQL_LONGVARGRAPHIC-|
                                |-SQL_SMALLINT-------|
                                |-SQL_INTEGER--------|
                                |-SQL_DECIMAL--------|
                                |-SQL_NUMERIC--------|
                                |-SQL_DOUBLE---------|
                                |-SQL_FLOAT----------|
                                |-SQL_REAL-----------|
                                |-SQL_DATE-----------|
                                |-SQL_TIME-----------|
                                |-SQL_TIMESTAMP------|
                                |-SQL_BINARY---------|
                                |-SQL_VARBINARY------|
                                |-SQL_LONGVARBINARY--|
                                |-SQL_BLOB-----------|
                                |-SQL_CLOB-----------|
                                |-SQL_DBCLOB---------|
                                |                    |
                                +-SQL_ALL_TYPES------+
 
                                    sql_type_info
 
    >>--KillEnv---henv---------------------------------------------------------------------------------------><
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 188 --  of 202
    >>--List----HENV-----------------------------------------------------------------------------------------><
              |-HDBC------------------------------------------------|
              |-HSTMT-----------------------------------------------|
              |                                                     |
              |                                                     |
              |-BUFFS-----------------------------------------------|
              |        +-hstmt--------------+                       |
              |                 +-hmembuf-+                         |
              |                                                     |
              |-MEMARRAY--------------------------------------------|
              |           +-hstmt-------------------------------+   |
              |                    +-memarray_id--------------+     |
              |                                   +-element-+       |
              |                                                     |
              |-MEMMATRIX-------------------------------------------|
              |            +-hstmt--------------------------------+ |
              |                     +-memmatrix_id--------------+   |
              |                                     +-ith_row-+     |
              |                                                     |
              |-FILEREFS--------------------------------------------|
              |           +-hstmt-----------------------------+     |
              |                    +-hfileref---------------+       |
              |                                +-ith_fref-+         |
              |                                                     |
              +-ALL-------------------------------------------------+
 
    >>--SQLMoreResults---hstmt-------------------------------------------------------------------------------><
 
 
    >>--SQLNativeSql-----hdbc----sqlstmt---sqlstmt_length-----nativestmt_maxlength---------------------------><
                               |                          |
                               +-FILE---file_name---------+
 
    >>--SQLNumParams---hstmt---------------------------------------------------------------------------------><
 
    >>--SQLNumResultCols---hstmt-----------------------------------------------------------------------------><
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 189 --  of 202
    >>--Option-----------------------------------------------------------------------------------------------><
                |-AUTOCOMMIT----OFF---------------------|
                |             +-ON--+                   |
                |                                       |
                |-CALLERROR----OFF----------------------|
                |            +-ON--+                    |
                |                                       |
                |-/CLEAN/----/ON/---------------------------|
                |        +-/OFF/-+                        |
                |                                       |
                |-DELIMIT---DEFAULT---------------------|
                |         +-my_own_char-+               |
                |                                       |
                |-ECHO----ON----------------------------|
                |       +-OFF-+                         |
                |                                       |
                |-FILLCHAR---DEFAULT--------------------|
                |          +-my_own_char-+              |
                |                                       |
                |-HEX----OFF----------------------------|
                |      |     +-CHAR---+ |               |
                |      +-ON--+--------+-+               |
                |            +-NOCHAR-+                 |
                |                                       |
                |-LOG----OFF----------------------------|
                |      +-ON---file_name-+               |
                |                                       |
                |-PROMPT----ON--------------------------|
                |         +-OFF-+                       |
                |                                       |
                |-SCREEN----OFF-------------------------|
                |         +-ON--+                       |
                |                                       |
                |-SET----AUTHID---user_name-------------|
                |      |                          |     |
                |      |-AUTHSTR---authentication-|     |
                |      |                          |     |
                |      |-DB_ALIAS---db_alias------|     |
                |      |                          |     |
                |      +---SCHEMA----schema_name--+     |
                |        +-OWNER -+                     |
                |                                       |
                |-STDERR----OFF-------------------------|
                |         +-ON---file_name-+            |
                |                                       |
                +-SCRIPT----OFF-------------------------+
                          +-ON---file_name-+
 
    >>--SQLParamData---hstmt---------------------------------------------------------------------------------><
                              +-/testmask/-+
 
    >>--SQLParamOptions---hstmt---array_size-----------------------------------------------------------------><
 
    >>--Pause------------------------------------------------------------------------------------------------><
 
    >>--SQLPrepare---hstmt----sqlstmt---sqlstmt_length-------------------------------------------------------><
                            |                          |
                            +-FILE---file_name---------+
 
 
 
 
 
 
 
 -- 190 --  of 202
    >>--SQLPrimaryKeys---hstmt------------------------------------------------------------------------------->
 
                  >-- -1-------------0----------------------------------------------------------------------->
 
                  >---table_schema---table_schema_length----------------------------------------------------->
 
                  >---table_name-----table_name_length-------------------------------------------------------><
 
    >>--SQLProcedureColumns---hstmt-------------------------------------------------------------------------->
 
                  >-- -1--------------------0---------------------------------------------------------------->
 
                  >---proc_schema_pattern---proc_schema_pattern_length--------------------------------------->
 
                  >---proc_name_pattern-----proc_name_pattern_length----------------------------------------->
 
                  >---param_name_pattern----param_name_pattern_length----------------------------------------><
 
      SQLProcedureshstmt
 
                     -10
 
                    proc_schema_patternproc_schema_pattern_length
 
                    proc_name_patternproc_name_pattern_length

 
    >>--SQLPutData---hstmt---hmembuf-------------------------------------------------------------------------><
                                        +-segment_length-+
 
    >>--QuickConnect---henv---hdbc---------------------------------------------------------------------------><
                                    +-db_alias---------------------------------+
                                                +-user_name---authentication-+
 
    >>--Quit-------------------------------------------------------------------------------------------------><
 
    >>--Read---file_name-------------------------------------------------------------------------------------><
 
    >>--ReadNLog---file_name---------------------------------------------------------------------------------><
 
    >>--SQLRowCount---hstmt----------------------------------------------------------------------------------><
 
    >>--SaveFile---------------------------------------------------------------------------------------------><
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 191 --  of 202
    >>--SQLSetColAttributes---hstmt---column---column_name---column_name_length--------------------------->
 
                                               +-0--------------0--------SQL_NULLABLE-----+
                   >----SQL_CHAR---------------+------------------------------------------+---------------><
                      |-SQL_VARCHAR--------|   |             +-0---------SQL_NULLABLE---+ |
                      |-SQL_LONGVARCHAR----|   +-precision---+--------------------------+-+
                      |-SQL_GRAPHIC--------|                 |         +-SQL_NULLABLE-+ |
                      |-SQL_VARGRAPHIC-----|                 +-scale---+--------------+-+
                      |-SQL_LONGVARGRAPHIC-|                           +-SQL_NO_NULLS-+
                      |-SQL_SMALLINT-------|
                      |-SQL_INTEGER--------|
                      |-SQL_DECIMAL--------|
                      |-SQL_NUMERIC--------|
                      |-SQL_DOUBLE---------|
                      |-SQL_FLOAT----------|
                      |-SQL_REAL-----------|
                      |-SQL_DATE-----------|
                      |-SQL_TIME-----------|
                      |-SQL_TIMESTAMP------|
                      |-SQL_BINARY---------|
                      |-SQL_VARBINARY------|
                      |-SQL_LONGVARBINARY--|
                      |-SQL_BLOB-----------|
                      |-SQL_CLOB-----------|
                      +-SQL_DBCLOB---------+
 
                             sql_type
 
    >>--SQLSetConnection---hdbc------------------------------------------------------------------------------><
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 192 --  of 202
    >>--SQLSetConnectOption---hdbc------SQL_ACCESS_MODE--------------char_string_value-----------------------><
                                    | |-SQL_AUTOCOMMIT--------| |  |                   |  +-/testmask/-+
                                    | |-SQL_CONNECTTYPE-------| |  +-long_int_value----+
                                    | |-SQL_CURRENT_QUALIFIER-| |
                                    | |-SQL_CURRENT_SCHEMA----| |
                                    | |-SQL_DB2ESTIMATE-------| |
                                    | |-SQL_DB2EXPLAIN--------| |
                                    | |-SQL_LOGIN_TIMEOUT-----| |
                                    | |-SQL_LONGDATA_COMPAT---| |
                                    | |-SQL_MAXCONNN----------| |
                                    | |-/SQL_OPT_TRACE/---------| |
                                    | |-/SQL_OPT_TRACEFILE/-----| |
                                    | |-/SQL_PACKET_SIZE/-------| |
                                    | |-SQL_QUIET_MODE--------| |
                                    | |-SQL_SYNC_POINT--------| |
                                    | |-/SQL_TRANSLATE_DDL/-----| |
                                    | |-/SQL_TRANSLATE_OPTION/--| |
                                    | |-SQL_TXN_ISOLATION-----| |
                                    | +-SQLWCHAR_TYPE---------+ |
                                    |                           |
                                    |   option (connection)     |
                                    |                           |
                                    |                           |
                                    +---SQL_ASYNC_ENABLE--------+
                                      |-SQL_BIND_TYPE---------|
                                      |-SQL_CONCURRENCY-------|
                                      |-SQL_CURSOR_HOLD-------|
                                      |-SQL_CURSOR_TYPE-------|
                                      |-SQL_MAX_LENGTH--------|
                                      |-SQL_MAX_ROWS----------|
                                      |-SQL_NODESCRIBE--------|
                                      |-SQL_NOSCAN------------|
                                      |-SQL_PARAMOPT_ATOMIC---|
                                      |-SQL_QUERY_TIMEOUT-----|
                                      |-SQL_RETRIEVE_DATA-----|
                                      |-SQL_ROWSET_SIZE-------|
                                      +-SQL_STMTTXN_ISOLATION-+
 
                                          option (statement)
 
    >>--SQLSetCursorName---hstmt---cursor_name---cursor_name_length------------------------------------------><
 
    >>--SQLSetEnvAttr---henv-----SQL_ATTR_OUTPUT_NTS-----attribute_value-------------------------------------><
                               |-SQL_CONNECTTYPE-----|                     +-attribute_value_length-+
                               |-SQL_MAXCONN---------|
                               +-SQL_SYNC_POINT------+
 
                                      attribute
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 193 --  of 202
    >>--SQLSetParam---hstmt---param-----SQL_C_CHAR------------------------SQL_CHAR--------------------------->
                                      |-SQL_C_DBCHAR---------|          |-SQL_VARCHAR--------|
                                      |-SQL_C_SHORT----------|          |-SQL_LONGVARCHAR----|
                                      |-SQL_C_USHORT---------|          |-SQL_GRAPHIC--------|
                                      |-SQL_C_SSHORT---------|          |-SQL_VARGRAPHIC-----|
                                      |-SQL_C_LONG-----------|          |-SQL_LONGVARGRAPHIC-|
                                      |-SQL_C_ULONG----------|          |-SQL_SMALLINT-------|
                                      |-SQL_C_SLONG----------|          |-SQL_INTEGER--------|
                                      |-SQL_C_DOUBLE---------|          |-SQL_DECIMAL--------|
                                      |-SQL_C_FLOAT----------|          |-SQL_NUMERIC--------|
                                      |-SQL_C_DATE-----------|          |-SQL_DOUBLE---------|
                                      |-SQL_C_TIME-----------|          |-SQL_FLOAT----------|
                                      |-SQL_C_TIMESTAMP------|          |-SQL_REAL-----------|
                                      |-SQL_C_BINARY---------|          |-SQL_DATE-----------|
                                      |-SQL_C_BIT------------|          |-SQL_TIME-----------|
                                      |-SQL_C_TINYINT--------|          |-SQL_TIMESTAMP------|
                                      |-SQL_C_UTINYINT-------|          |-SQL_BINARY---------|
                                      |-SQL_C_STINYINT-------|          |-SQL_VARBINARY------|
                                      |-SQL_C_BLOB_LOCATOR---|          |-SQL_LONGVARBINARY--|
                                      |-SQL_C_CLOB_LOCATOR---|          |-SQL_BLOB-----------|
                                      +-SQL_C_DBCLOB_LOCATOR-+          |-SQL_CLOB-----------|
                                                                        +-SQL_DBCLOB---------+
                                               c_type
                                                                               sql_type
 
 
                                                                      +-ADDRESS-+
                   >--param_length_precision---param_scale---hmembuf--+---------+----------------------------><
                                                                      +-HANDLE--+
 
    >>--SQLSetStmtOption---hstmt-------SQL_ASYNC_ENABLE----------long_int_value------------------------------><
                                   | |-SQL_CONCURRENCY-------|                      |
                                   | |-SQL_CURSOR_HOLD-------|                      |
                                   | |-SQL_CURSOR_TYPE-------|                      |
                                   | |-SQL_MAX_LENGTH--------|                      |
                                   | |-SQL_MAX_ROWS----------|                      |
                                   | |-SQL_NODESCRIBE--------|                      |
                                   | |-SQL_NOSCAN------------|                      |
                                   | |-SQL_PARAMOPT_ATOMIC---|                      |
                                   | |-SQL_QUERY_TIMEOUT-----|                      |
                                   | |-SQL_RETRIEVE_DATA-----|                      |
                                   | |-SQL_ROWSET_SIZE-------|                      |
                                   | +-SQL_STMTTXN_ISOLATION-+                      |
                                   |                                                |
                                   |        option                                  |
                                   |                                                |
                                   |                                                |
                                   +-SQL_BIND_TYPE---0------------------------------|
                                                   |                                |
                                                   +-MATRIXFORMAT---matrixformat_id-+
 
    >>--SQLSpecialColumns---hstmt-----SQL_BEST_ROWID--------------------------------------------------------->
                                    +-SQL_ROWVER-----+
 
                  >-- -1-------------0----------------------------------------------------------------------->
 
                  >---table_schema---table_schema_length----------------------------------------------------->
 
                  >---table_name-----table_name_length------------------------------------------------------->
 
                  >----SQL_SCOPE_CURROW-----------SQL_NO_NULLS-----------------------------------------------><
                     |-SQL_SCOPE_TRANSACTION-|  +-SQL_NULLABLE-+
                     +-SQL_SCOPE_SESSION-----+
 
 
 -- 194 --  of 202
 
 
    >>--SQLStatistics---hstmt-------------------------------------------------------------------------------->
 
                  >-- -1-------------0----------------------------------------------------------------------->
 
                  >---table_schema---table_schema_length----------------------------------------------------->
 
                  >---table_name-----table_name_length------------------------------------------------------->
 
                  >----SQL_INDEX_UNIQUE-------SQL_QUICK------------------------------------------------------><
                     +-SQL_INDEX_ALL----+   +-SQL_ENSURE-+
 
    >>--SQLTablePrivileges---hstmt---------------------------------------------------------------------------><
 
                  >-- -1---------------------0--------------------------------------------------------------->
 
                  >---table_schema_pattern---table_schema_pattern_length------------------------------------->
 
                  >---table_name_pattern-----table_name_pattern_length---------------------------------------><
 
    >>--SQLTables---hstmt---tbl_qual_pattern---tbl_qual_pattern_length--------------------------------------->
 
                  >-- -1---------------------0--------------------------------------------------------------->
 
                  >---table_schema_pattern---table_schema_pattern_length------------------------------------->
 
                  >---table_name_pattern-----table_name_pattern_length--------------------------------------->
 
                  >---table_type_list--------table_type_list_length------------------------------------------><
 
    >>--SQLTransact-----0------hdbc---------------SQL_COMMIT-------------------------------------------------><
                      +-henv---SQL_NULL_HDBC-+  |              |
                                                +-SQL_ROLLBACK-+
 
    >>--UnformatMatrix---matrixformat_id---------------------------------------------------------------------><
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 195 --  of 202
    >>--UpdateElem---memarray_id---element------------------------------------------------------------------->
 
     >------VALUE---size---string_value----------------------------------------------------------------------><
        | |-NULL_VALUE------------------|        |  (for SQL_C_CHAR and SQL_C_BINARY
        | +-FILE---file_name------------+        |
        |                                        |
        |---VALUE---long_int_value---------------|  (for SQL_C_LONG)
        | +-NULL_VALUE-------------+             |
        |                                        |
        |---VALUE---short_int_value--------------|  (for SQL_C_SHORT)
        | +-NULL_VALUE--------------+            |
        |                                        |
        |---VALUE---float_value------------------|  (for SQL_C_FLOAT)
        | +-NULL_VALUE----------+                |
        |                                        |
        |---VALUE---double_value-----------------|  (for SQL_C_DOUBLE)
        | +-NULL_VALUE-----------+               |
        |                                        |
        |---VALUE---yyyy-mm-dd-------------------|  (for SQL_C_DATE)
        | +-NULL_VALUE---------+                 |
        |                                        |
        |---VALUE---hh-mm-ss---------------------|  (for SQL_C_TIME)
        | +-NULL_VALUE-------+                   |
        |                                        |
        |---VALUE---yyyy-mm-dd-hh-mm-ss-ffffff---|  (for SQL_C_TIMESTAMP)
        | +-NULL_VALUE-------------------------+ |
        |                                        |
        |---VALUE---tiny_int_value---------------|  (for SQL_C_TINYINT)
        | +-NULL_VALUE-------------+             |
        |                                        |
        |---VALUE----0---------------------------|  (for SQL_C_BIT)
        | |        +-1-+                         |
        | +-NULL_VALUE                           |
        |                                        |
        +---VALUE---long_int_value---------------+  (for SQL_C_xxxx_LOCATOR)
          +-NULL_VALUE-------------+
 
 
    >>--UpdateFileRef---hfileref---file_name---file_name_length----SQL_FILE_READ----------------------------->
                                                                 |-SQL_FILE_CREATE----------|
                                                                 |-SQL_FILE_OVERWRITE-------|
                                                                 +-SQL_FILE_APPEND----------+
 
                                                                       file_ref_options
 
                                                +-FOR---0----+
             >--/file_length/---indicator_value---+------------+-----------------------------------------------><
                                                +-FOR---elem-+
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 196 --  of 202
    >>--UpdateMem---hmembuf----SQL_C_CHAR-------------VALUE---size---string_value----------------------------><
                             |              |       |-NULL_VALUE------------------|        |
                             |-SQL_C_BINARY-+       +-FILE---file_name------------+        |
                             |                                                             |
                             |-SQL_C_LONG-------------VALUE---long_int_value---------------|
                             |                      +-NULL_VALUE-------------+             |
                             |                                                             |
                             |-SQL_C_SHORT------------VALUE---short_int_value--------------|
                             |                      +-NULL_VALUE--------------+            |
                             |                                                             |
                             |-SQL_C_TINYINT----------VALUE---tiny_int_value---------------|
                             |                      +-NULL_VALUE-------------+             |
                             |                                                             |
                             |-SQL_C_DOUBLE-----------VALUE---double_value-----------------|
                             |                      +-NULL_VALUE-----------+               |
                             |                                                             |
                             |-SQL_C_FLOAT------------VALUE---float_value------------------|
                             |                      +-NULL_VALUE----------+                |
                             |                                                             |
                             |-SQL_C_DATE-------------VALUE---yyyy-mm-dd-------------------|
                             |                      +-NULL_VALUE---------+                 |
                             |                                                             |
                             |-SQL_C_TIME-------------VALUE---hh-mm-ss---------------------|
                             |                      +-NULL_VALUE-------+                   |
                             |                                                             |
                             |-SQL_C_TIMESTAMP--------VALUE---yyyy-mm-dd-hh-mm-ss-ffffff---|
                             |                      +-NULL_VALUE-------------------------+ |
                             |                                                             |
                             |-SQL_C_BIT--------------VALUE----0---------------------------|
                             |                      |        +-1-+                         |
                             |                      +-NULL_VALUE                           |
                             |                                                             |
                             |-SQL_C_BLOB_LOCATOR-----VALUE---long_int_value---------------|
                             |                      +-NULL_VALUE-------------+             |
                             |                                                             |
                             |-SQL_C_CLOB_LOCATOR-----VALUE---long_int_value---------------|
                             |                      +-NULL_VALUE-------------+             |
                             |                                                             |
                             +-SQL_C_DBCLOB_LOCATOR---VALUE---long_int_value---------------+
                                                    +-NULL_VALUE-------------+
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 197 --  of 202
  1.11  Feedback
 
  We would like your comments and suggestions re Interactive CLI.
 
  Please send these to:
 
               
                                 MAIL:  DB2 CLI Interactive (Dept 023)
                                 	IBM Canada
                                        1150 Eglington Ave East
                                        North York, Ontario
                                        CANADA   M3C 1H7
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -- 198 --  of 202
  1.12  List of Potential Future Enhancements
 
  1.  Improve the format of the various displays (e.g. have the columns line
      up).
 
 
  2.  If accurate statistics are desired when exuecuting the SQLStatistics
      command against DB2(cs), it is necessary to first run the RUNSTATS CLP
      command.  Interactive CLI should either invoke that command directly
      before issuing the SQL statement to obtain the statistics or it should
      provide its own command to invoke RUNSTATS.
 
 
  3.  Support the command
 
        >>--SQLComment---file_name---comment_string-----------------------------------------------------------><
 
      The following technique should work until this is made available:
 
          when the log file is open,
             -use the SQLOption command to set ECHO to ON
             -type # ---------the comment-----------
             -use the SQLOption command to set ECHO to OFF
 
  4.  Support a version of NativeSQL that simply requires a statement handle
      as input.  This should be probably be provided directly in the
      SQLNativeSql function.
 
 
  5.  A mechanism should be provided to limit the length of the lines in a
      script file (with a suitable overflow indication).  Perhaps this will
      only be supported for lines that are in character format.
 
 
  6.  Provide a mechanism that allows one to "name" the Interactive CLI
      objects with a string as an alternative to an integer.  One idea is to
      support a string of up to 8 characters every place that a
      "naming/identifying integer" is currently supported and have
      Interactive CLI have a layer that maps these to the integers which it
      continues to use.
 
 
  7.  Provide a line overflow facility for script writers.  A \ at the end of
      the line should mean that the line is continued.  See 14
 
 
  8.  Extend both SQLGetLength and SQLGetPosition so that they have an option
      to return the value into a buffer.  Currently, the only option is to
      display the value.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
