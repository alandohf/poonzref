/* -*- Mode: C -*- */
/******************************************************************************
*
*  Source File Name = retrieve.sqx
*
*  Component Name   = DB2 XML Extender
*
*  Descriptive Name = Test for dxxRetrieveXMLClob
*
*  Copyright = 5622-044 (c) Copyright IBM Corp 1987, 1997, 2001,2002
*              Licensed Materials - Program Property of IBM
*
*  Status = New code
*
*  Function = This client program tests the SQL-to-XML mapping stored
*             procedure of DB2 XML Extender.
*             It takes the arguments from the command line and calls the stored
*             procedure dxxRetrieveXMLClob.
*
*******************************************************************************/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sqlutil.h>
#include <sqlenv.h>
#include "sqlca.h"
#include "dxx.h"
#include "dxxrc.h"

/*******************************************************************
** main
*******************************************************************/
int main(int argc, char *argv[]) {
EXEC SQL INCLUDE SQLCA;
EXEC SQL BEGIN DECLARE SECTION;
  char    procname[64];
  char    dbname[18];
  char    result_tabname[160]; 
  char    collectionName[129]; 
  sqlint32 overrideType= NO_OVERRIDE;
  struct override_t {
	char buf[32672];
  } *override;
  sqlint32 m;
  sqlint32 n;
  sqlint32 errCode;
  char    msgtext[2048];
  short   null_ind = -1;
  short   override_ind = -1; 
  short   n_ind;
  short   res_ind;
  short   valid_ind;
  short   errCode_ind;
  short   msgtext_ind;
  short   collectionName_ind;
  short   result_tabname_ind;
  short   num_ind;
  short   overrTypeInd;
  sqlint32 valid = 0;           
  sqlint32 num_docs = 0;

  SQL TYPE is CLOB(100K)   *result_doc=NULL;

EXEC SQL END DECLARE SECTION;
  int     rc = 0, len;
  int     ERROR_CASE = 0;
  char    errorMsg[1024] ;

  override=NULL;
  /* Process command-line arguments */
  if ((argc != 6) && (argc != 3)) { 
    printf("Usage: %s dbname collectionname "
           "{-o overrideType override}]\n", 
           argv[0]);
    return -1;
  }
  strcpy(dbname,         argv[1]);
  strcpy(collectionName, argv[2]);
  m = 0;
  override= (struct override_t *)calloc(1, sizeof(struct override_t));
  if (override == NULL) {
	printf("out of memory \n");
	goto exit;
  }
  result_doc = (struct result_doc_t *)calloc(1, sizeof(struct result_doc_t));
  if (result_doc==NULL) {
	printf("out of memory \n");
	goto exit;
  }
  if (argc > 3) {
    if (!strcmp(argv[3], "-o")) {
      /* Enable override. */
      overrideType =
        (!strcmp(argv[4],"SQL_OVERRIDE"))? SQL_OVERRIDE: XML_OVERRIDE;
      strcpy(override->buf, argv[5]);
      override_ind = 0;
    } else {
      override->buf[0]='\0';
      overrideType = NO_OVERRIDE;
    }
  }

  if (m == -1)
     ERROR_CASE = 1;
  collectionName_ind = 0;
  res_ind            = 0;
  valid_ind          = 0;
  overrTypeInd       = 0;

  /* Connect to database */
  fprintf(stdout, "Connecting to database %s\n", dbname);
  EXEC SQL CONNECT TO :dbname;

  /* Call the stored procedure. */
  if (!ERROR_CASE) {
	EXEC SQL CALL db2xml.dxxRetrieveXMLClob
	  (:collectionName:collectionName_ind,
                                    :overrideType:overrTypeInd,
                                    :*override:override_ind,
                                    :*result_doc:res_ind,
                                    :valid:valid_ind,
                                    :num_docs:num_ind,
                                    :errCode:errCode_ind,
                                    :msgtext:msgtext_ind);
  }

  /* Print the output parms. */
  if (valid_ind == -1)
    printf("valid             = NULL\n",valid);
  else
    printf("valid             = %d\n",valid);

  printf("num_docs          = %d\n",num_docs);
  printf("result_doc length = %d\n",result_doc->length);
  printf("Document          = %s\n",result_doc->data);
  printf("\n  SQLCODE = %d\n", SQLCODE);
  printf("  errCode=%d:%d\n  msgtext'%s':%d\n",
            errCode, errCode_ind, msgtext, msgtext_ind);
  if (SQLCODE >= 0) {                   
     if( SQLCODE > 0 ){
        sqlaintp( errorMsg , 1024 , 80 , &sqlca );
	    printf("\n The warning message is \"%s\"  and it is being ignored\n"
            , errorMsg );
     }                                 

     if (errCode < DXX_ERRCODE_OK)
        EXEC SQL ROLLBACK;
     else
        EXEC SQL COMMIT;
  }
  else
  {
    sqlaintp( errorMsg , 1024 , 80 , &sqlca );
    printf("\n The error message is %s \n" , errorMsg );
    EXEC SQL ROLLBACK ;
  }

exit:
  if (result_doc) free(result_doc);
  if (override) free(override);
  return rc;
}
