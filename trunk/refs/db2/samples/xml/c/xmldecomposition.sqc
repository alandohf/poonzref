/****************************************************************************
** Licensed Materials - Property of IBM
**
** Governed under the terms of the International
** License Agreement for Non-Warranted Sample Code.
**
** (C) COPYRIGHT International Business Machines Corp. 2006
** All Rights Reserved.
**
** US Government Users Restricted Rights - Use, duplication or
** disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
*****************************************************************************
**
** SOURCE FILE NAME: xmldecomposition.sqc
**
** SAMPLE: This sample demonstrates XML Decomposition functionality. Using
**         this functionality, information from a XML document can be
**         stored in relational tables.
**
** USER SCENARIO:
**
**         Consider the user scenario below:
**
**         A bookstore owner has some XML documents which contains descriptive
**         information about a book which he has for sale. The owner needs to
**         store these details in a relational table for easy retrival of information.
**         He/She can easily do it using the Decomposition function.
**
** SOLUTION:
**         The user must have an annotated schema based on which the instance document
**         can be decomposed. Once a valid annotated schema for the instance document
**         is ready , it needs to be registered with the XML Schema repository with
**         decomposition option enabled. Also the tables in which the data will be
**         decomposed should exist before the schema is registered. Now using the new
**         XMLDecomp function, the user can decompose the instance document and put the
**         data in the relational tables.
**
**         Here the tables that we need are
**              a) ADMIN.BOOK_AUTHOR
**              b) XDB.BOOK_CONTENTS
**
**        As per the schema document BOOKDETAIL.XSD, the data in the instance document
**        BOOKDETAIL.XML will be put into these two tables. As per the annotations in
**        the xmlschema, the schema for the table BOOK_AUTHOR will be ADMIN. While for
**        the other tables it will be the value assigned by the annotation
**           defaultSQLSchema which is XDB.
**        This annotation can be used only once in the xmlschema.
**
**        The text within the tag "authorId" will be of type integer and will be inserted
**        in the column "AUTHID" of the TABLE "BOOK_AUTHOR". A condition annotation has
**        been put here to check if the "AUTHID" is a number between 1 and 999. If the
**        value passes the CONDITION check, then it is inserted in the table.
**
**        The text in the "chapter" tag is inserted in different tables and different
**        columns. The contents of tag "chaptercontents" is inserted in the column
**        "CHPTCONTENT" of TABLE "BOOK_CONTENTS". The annoatation truncate indicates
**        that the value to be inserted into the column will be trucated if its size is larger
**        than the column size. Another annotation that is used for this element is
**        contenthandling, which indicates that the concatenation of this element's character
**        data (including character content of CDATA sections) with the character data in this
**        element's descendants, in document order will be inserted into the table.
**
** PRE-REQUISTES
**        The instance document i,e. "bookdetail.xml" and the annotated schema that will be
**        registered to the XSR "bookdetail.xsd" have to exist in the same directory as the
**        sample itself. The Schema document needs to be properly annotated to ensure that
**        the right data is inserted into the right table.
**
** EXECUTION
**        The sample can be executed by first running the setup script which creates
**        the required tables. The script can be run using the command
**             db2 -tvf setupfordecomposition.db2
**        Build the sample using the command
**             bldapp xmldecomposition
**        Then execute by just invoking
**             xmldecomposition
**        The clean up script will have to be executed to drop all the tables that
**        were create by the setupscript.
**             db2 -tvf cleanupfordecomposition.db2
**
** SQL STATEMENTS USED:
**         REGISTER XMLSCHEMA
**         COMPLETE XMLSCHEMA
**         SELECT
**         DECOMPOSE
**         DROP
**
** OUTPUT FILE: xmldecomposition.out (available in the online documentation)
*****************************************************************************
**
** For more information on the sample programs, see the README file.
**
** For information on developing C applications, see the Application
** Development Guide.
**
** For information on using SQL statements, see the SQL Reference.
**
** For the latest information on programming, building, and running DB2
** applications, visit the DB2 application development website:
**     http://www.software.ibm.com/data/db2/udb/ad
****************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlenv.h>
#include <sqlutil.h>
#include "utilemb.h"

EXEC SQL INCLUDE SQLCA;
EXEC SQL BEGIN DECLARE SECTION;
  char RelSchema[1024];
  char SchemaName[1024];
  char SchemaLocation[1024];
  char PrimaryDocument[1024];
  char xmlfilename[1024];
  char documentid[1024];
  short shred = 1;
  short validation = 1;
  short isRelSchemaNULL = 0;
  short isXMLSchemaNULL = 0;
  short isDocumentIDNULL = 0;
  short isXMLFileNULL = 0;
  short isValidationNULL = 0;
  short isReserveBLOB1NULL = -1;
  short isReserveBLOB2NULL = -1;
  short isReserveIntNULL = -1;
  SQL TYPE IS BLOB_FILE xsdfile;
  SQL TYPE IS BLOB_FILE addfile;
  SQL TYPE IS BLOB_FILE xmlfile;
  short in_ind = 0;
  short null_ind = -1;
  SQL TYPE is BLOB(1M) *xsdobjp = NULL;
  SQL TYPE is BLOB(1M) *addobjp = NULL;
  SQL TYPE is BLOB(2M) *xmlobjp = NULL;
  char isbn[11];
  short chptnum;
  char chpttittle[50];
  char chptcontent[1000];
  short authid;
  char book_title[50];
  char status[1];
  char decomposition[1];
  char decomposition_version[5];
EXEC SQL END DECLARE SECTION;

int selectfromtables(void);

int main(int argc, char *argv[])
{
  int rc = 0;
  char dbAlias[SQL_ALIAS_SZ + 1];
  char user[USERID_SZ + 1];
  char pswd[PSWD_SZ + 1];
  FILE *testfile;

  /* check the command line arguments */
  rc = CmdLineArgsCheck1(argc, argv, dbAlias, user, pswd);
  if (rc != 0)
  {
    return rc;
  }

  /* connect to database */
  rc = DbConn(dbAlias, user, pswd);
  if (rc != 0)
  {
    return rc;
  }
  strcpy((char *)RelSchema, "xdb");
  strcpy((char *)SchemaName,"bookdetail");
  strcpy((char *)SchemaLocation, "http://bookdetailschema.com/book_schema1.xsd");
  strcpy((char *)documentid, "bookdetail001");
  strcpy((char *)PrimaryDocument,"bookdetail.xsd");
  strcpy((char *)xmlfilename, "bookdetail.xml");

  printf("\nTHIS SAMPLE SHOWS HOW TO DECOMPOSE DATA \n");
  printf(" FROM A XML DOCUMENT INTO RELATIONAL TABLES.\n");

  /* Register the schema documents.*/
  /*REGISTER XMLSCHEMA 'http://bookdetailschema.com/book_schema1.xsd' FROM 'bookdetail.xsd' as xdb.bookdetail;*/
  strcpy(xsdfile.name, PrimaryDocument);
  xsdfile.name_length = strlen(xsdfile.name);
  xsdfile.file_options = SQL_FILE_READ;
  if (xsdfile.name_length > 0) 
    {
      testfile = fopen( xsdfile.name, "r" );
      if ( testfile != NULL )
        {
          fclose( testfile );
          if ((xsdobjp = (struct xsdobjp_t *)
                                     malloc (sizeof (*xsdobjp))) != NULL )
            {
               EXEC SQL VALUES (:xsdfile) INTO :*xsdobjp;
            }
        }
      else 
        {
           printf("fopen() error.\n");
           printf("Error accessing file: %s \n", xsdfile.name);
           exit(0);
        }
    }
  /* Call the stored procedure. */
  printf("CALLING  SYSPROC.XSR_REGISTER TO REGISTER THE SCHEMA\n");

  EXEC SQL CALL SYSPROC.XSR_REGISTER (:RelSchema:in_ind,
                                      :SchemaName:in_ind,
                                      :SchemaLocation:in_ind,
                                      :*xsdobjp:in_ind,
                                      :*xsdobjp:null_ind );
  EMB_SQL_CHECK("CALLING SYSPROC.XSR_REGISTER"); 

  /* Complete schema registration with Decomposition enabled.*/ 
  /* COMPLETE XMLSCHEMA xdb.bookdetail ENABLE DECOMPOSITION;*/
  
  EXEC SQL CALL SYSPROC.XSR_COMPLETE (:RelSchema:in_ind,
                                      :SchemaName:in_ind,
                                      :*xsdobjp:null_ind,
                                      :shred);

  EMB_SQL_CHECK("CALLING SYSPROC.XSR_COMPLETE");

  /* Perform Commit to save changes */
  EXEC SQL COMMIT;
  EMB_SQL_CHECK("COMMIT");

  /*Check catalog tables for information regarding registered schema. */
  EXEC SQL DECLARE c2 cursor FOR SELECT status, decomposition, decomposition_version                                                                            FROM SYSIBM.SYSXSROBJECTS                                                                                                    WHERE XSROBJECTNAME = 'BOOKDETAIL';
 
   /* open cursor */
  EXEC SQL OPEN c2;
  EMB_SQL_CHECK("cursor -- open");

  /* fetch cursor */
  EXEC SQL FETCH c2 INTO :status, :decomposition, :decomposition_version;
  EMB_SQL_CHECK("cursor -- fetch");

  while (sqlca.sqlcode != 100)
  {
    printf("STATUS                 : %s\n", status);
    printf("DECOMPOSITION ENABLED  : %s\n", decomposition);
    printf("DECOMPOSITION VERSION  : %s\n", decomposition_version);

    EXEC SQL FETCH c2 INTO :status, :decomposition, :decomposition_version; 
    EMB_SQL_CHECK("cursor -- fetch");
  }

  /* close cursor */
  EXEC SQL CLOSE c2;
  EMB_SQL_CHECK("cursor -- close"); 

  rc = selectfromtables();

  /* Decompose the XML document */
  if (strcmp(xmlfilename, "NULL") == 0)
    {
      isXMLFileNULL = -1;
    }
  else
    {
      strcpy(xmlfile.name, xmlfilename);
      xmlfile.name_length = strlen(xmlfile.name);
      xmlfile.file_options = SQL_FILE_READ;
      if (xmlfile.name_length > 0) 
        {
          testfile = fopen( xmlfile.name, "r" );
          if ( testfile != NULL )
            {
              fclose( testfile );
              if ((xmlobjp = (struct xmlobjp_t *)
                                       malloc (sizeof (*xmlobjp))) != NULL )
                {
                   EXEC SQL VALUES (:xmlfile) INTO :*xmlobjp;
                }
            }/* file opened*/
          else 
            {
              printf("fopen() error.\n");
              printf("Error accessing file: %s \n", xmlfile.name);
              exit(0);
            }
        } /* xmlfile.name_length>0 */
      } 

    EXEC SQL CALL SYSPROC.XDBDECOMPXML (:RelSchema,
                                        :SchemaName,
                                        :*xmlobjp,
                                        :documentid,
                                        :validation:isValidationNULL,
                                        :*xmlobjp:isReserveBLOB1NULL,
                                        :*xmlobjp:isReserveBLOB2NULL,
                                        :validation:isReserveIntNULL);
 
    EMB_SQL_CHECK("CALL SYSPROC.XDBDECOMPXML");
    
    /* Select from tables to check if decomposition was successfull */
    rc = selectfromtables();

    /* Reset connection to DB */
    EXEC SQL CONNECT RESET;
    EMB_SQL_CHECK("Connect Reset");

    return 0;
}

int selectfromtables(void)
{
  int rc = 0;
  struct sqlca sqlca;

  printf("\n  Executing:\n");
  printf("    SELECT ISBN, chptnum, chpttittle, chptcontent FROM XDB.BOOK_CONTENTS\n");
  printf("\n  Results:\n");
  printf("-------------------------------------------------------------------------------\n");
  /* declare cursor */
  EXEC SQL DECLARE c0 CURSOR FOR SELECT isbn, chptnum, chpttittle, chptcontent
                                   FROM XDB.BOOK_CONTENTS;
  /* open cursor */
  EXEC SQL OPEN c0;
  EMB_SQL_CHECK("cursor -- open");

  /* fetch cursor */
  EXEC SQL FETCH c0 INTO :isbn, :chptnum, :chpttittle, :chptcontent;
  EMB_SQL_CHECK("cursor -- fetch");

  while (sqlca.sqlcode != 100)
  {
    printf("ISBN            : %s\n", isbn);    
    printf("CHAPTER NUMBER  : %d\n", chptnum);
    printf("CHAPTER TITLE   : %s\n", chpttittle);
    printf("CHAPTER CONTENT : %s\n", chptcontent);

    EXEC SQL FETCH c0 INTO :isbn, :chptnum, :chpttittle, :chptcontent;
    EMB_SQL_CHECK("cursor -- fetch");
  }

  /* close cursor */
  EXEC SQL CLOSE c0;
  EMB_SQL_CHECK("cursor -- close");

  /* Select from Second table */
  printf("\n  Executing:\n");
  printf("    SELECT authid, isbn, book_title FROM ADMIN.BOOK_AUTHOR\n");
  printf("\n  Results:\n");
  printf("-------------------------------------------------------------------------------\n");
  /* declare cursor */
  EXEC SQL DECLARE c1 CURSOR FOR SELECT authid, isbn, book_title 
  			           FROM ADMIN.BOOK_AUTHOR;
  /* open cursor */
  EXEC SQL OPEN c1;
  EMB_SQL_CHECK("cursor -- open");

  /* fetch cursor */
  EXEC SQL FETCH c1 INTO :authid, :isbn, :book_title;
  EMB_SQL_CHECK("cursor -- fetch");

  while (sqlca.sqlcode != 100)
  {
    printf("AUTHID          : %d\n", authid);
    printf("ISBN            : %s\n", isbn);
    printf("BOOK TITLE      : %s\n", chpttittle);

    EXEC SQL FETCH c1 INTO :authid, :isbn, :book_title;
    EMB_SQL_CHECK("cursor -- fetch");
  }

  /* close cursor */
  EXEC SQL CLOSE c1;
  EMB_SQL_CHECK("cursor -- close");
  
  return 0;
} /* selectfromtables */

