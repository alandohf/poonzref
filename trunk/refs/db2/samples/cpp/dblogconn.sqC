/****************************************************************************
** Licensed Materials - Property of IBM
**
** Governed under the terms of the International
** License Agreement for Non-Warranted Sample Code.
**
** (C) COPYRIGHT International Business Machines Corp. 1996 - 2003
** All Rights Reserved.
**
** US Government Users Restricted Rights - Use, duplication or
** disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
*****************************************************************************
**
** SOURCE FILE NAME: dblogconn.sqC
**
** SAMPLE: How to read Asynchronous Log 
**
**         Note:
**           You must be disconnected from the sample database to run
**           this program. To ensure you are, enter 'db2 connect reset'
**           on the command line prior to read the logs.
**
** The sample database for this sample should be created using 'db2sampl -v8'.
**
** DB2 API USED:
**         db2CfgSet -- Set Configuration
**         db2ReadLog -- Asynchronous Read Log
**
** SQL STATEMENTS USED:
**         ALTER TABLE
**         COMMIT
**         DELETE
**         INSERT
**         ROLLBACK
**         CONNECT RESET
**
** OUTPUT FILE: dblogconn.out (available in the online documentation)
*****************************************************************************
**
** For more information on the sample programs, see the README file.
**
** For information on developing C++ applications, see the Application
** Development Guide.
**
** For information on using SQL statements, see the SQL Reference.
**
** For information on DB2 APIs, see the Administrative API Reference.
**
** For the latest information on programming, building, and running DB2
** applications, visit the DB2 application development website:
**     http://www.software.ibm.com/data/db2/udb/ad
****************************************************************************/
#ifdef DB2NT
#include "utilrecov.cxx"
#else
#include "utilrecov.C"
#endif

class DbLogconn: public UtilRecov, public UtilLog
{
  public:
    int DbLogRecordsForCurrentConnectionRead(DbEmb *, char *);
};

int DbLogconn::DbLogRecordsForCurrentConnectionRead(DbEmb *db,
                                                    char serverWorkingPath[])
{
  int rc = 0;
  struct sqlca sqlca = { 0 };
  unsigned short logretain = 0;
  db2CfgParam cfgParameters[1] = { 0 };
  db2Cfg cfgStruct = { 0 };

  db2BackupStruct backupStruct = { 0 };
  db2TablespaceStruct tablespaceStruct = { 0 };
  db2MediaListStruct mediaListStruct = { 0 };
  db2Uint32 backupImageSize = 0;
  db2RestoreStruct restoreStruct = { 0 };
  db2TablespaceStruct rtablespaceStruct = { 0 };
  db2MediaListStruct rmediaListStruct = { 0 };

  SQLU_LSN startLSN;
  SQLU_LSN endLSN;
  char *logBuffer = NULL;
  sqluint32 logBufferSize = 0;
  db2ReadLogInfoStruct readLogInfo = { 0 };
  db2ReadLogStruct readLogInput = { 0 };
  int i = 0;

  cout << "\n-----------------------------------------------------------";
  cout << "\nUSE THE DB2 APIs:" << endl;
  cout << "  db2CfgSet -- SET CONFIGURATION" << endl;
  cout << "  db2Backup -- BACKUP DATABASE" << endl;
  cout << "  db2ReadLog -- ASYNCHRONOUS READ LOG" << endl;
  cout << "AND THE SQL STATEMENTS:" << endl;
  cout << "  CONNECT " << endl;
  cout << "  ALTER TABLE" << endl;
  cout << "  COMMIT" << endl;
  cout << "  INSERT" << endl;
  cout << "  DELETE" << endl;
  cout << "  ROLLBACK" << endl;
  cout << "  CONNECT RESET" << endl;
  cout << "TO READ LOG RECORDS FOR THE CURRENT CONNECTION." << endl;

  // Update db config: set logretain = YES
  cout << "\n  Update \'" << db->getAlias() << "\' database configuration:\n";
  cout << "    - Enable the database configuration parameter LOGRETAIN \n";
  cout << "        i.e., set LOGRETAIN = RECOVERY/YES\n";
  
  cfgParameters[0].flags = 0;
  cfgParameters[0].token = SQLF_DBTN_LOG_RETAIN;
  cfgParameters[0].ptrvalue = (char *)&logretain;

  logretain = SQLF_LOGRETAIN_RECOVERY;

  // Initialize cfgStruct
  cfgStruct.numItems = 1;
  cfgStruct.paramArray = cfgParameters;
  cfgStruct.flags = db2CfgDatabase | db2CfgDelayed;
  cfgStruct.dbname = db->getAlias();

  // Set database configuration
  db2CfgSet(db2Version900, (void *)&cfgStruct, &sqlca);
  DB2_API_CHECK("Db Log Retain -- Enable");

  // Start the backup process
  tablespaceStruct.tablespaces = NULL;
  tablespaceStruct.numTablespaces = 0;

  mediaListStruct.locations = &serverWorkingPath;
  mediaListStruct.numLocations = 1;
  mediaListStruct.locationType = SQLU_LOCAL_MEDIA;

  //****************************
  //    BACKUP THE DATABASE
  //****************************
  
  // Calling the routine for database backup
  rc = DbBackup(db, serverWorkingPath, &backupStruct);
  CHECKRC(rc, "DbBackup"); 
  
  // Connect to the database
  rc = db->Connect();
  CHECKRC(rc, "db->Conect");

  // Invoke the SQL statements for filling database log
  cout << "\n  Invoke the following SQL statements:\n"
    "    ALTER TABLE emp_resume DATA CAPTURE CHANGES;\n"
    "    COMMIT;\n"
    "    INSERT INTO emp_resume\n"
    "      VALUES('000777', 'ascii', 'This is a new resume.');\n"
    "            ('777777', 'ascii', 'This is another new resume');\n"
    "    COMMIT;\n"
    "    DELETE FROM emp_resume WHERE empno = '000777';\n"
    "    DELETE FROM emp_resume WHERE empno = '777777';\n"
    "    COMMIT;\n"
    "    DELETE FROM emp_resume WHERE empno = '000140';\n"
    "    ROLLBACK;\n"
    "    ALTER TABLE emp_resume DATA CAPTURE NONE;\n" "    COMMIT;" << endl;

  EXEC SQL ALTER TABLE emp_resume DATA CAPTURE CHANGES;
  EMB_SQL_CHECK("SQL statement 1 -- invoke");

  EXEC SQL COMMIT;
  EMB_SQL_CHECK("SQL statement 2 -- invoke");

  EXEC SQL INSERT INTO emp_resume
    VALUES('000777', 'ascii', 'This is a new resume.'),
    ('777777', 'ascii', 'This is another new resume');
  EMB_SQL_CHECK("SQL statement 3 -- invoke");

  EXEC SQL COMMIT;
  EMB_SQL_CHECK("SQL statement 4 -- invoke");

  EXEC SQL DELETE FROM emp_resume WHERE empno = '000777';
  EMB_SQL_CHECK("SQL statement 5 -- invoke");

  EXEC SQL DELETE FROM emp_resume WHERE empno = '777777';
  EMB_SQL_CHECK("SQL statement 6 -- invoke");

  EXEC SQL COMMIT;
  EMB_SQL_CHECK("SQL statement 7 -- invoke");

  EXEC SQL DELETE FROM emp_resume WHERE empno = '000140';
  EMB_SQL_CHECK("SQL statement 8 -- invoke");

  EXEC SQL ROLLBACK;
  EMB_SQL_CHECK("SQL statement 9 -- invoke");

  EXEC SQL ALTER TABLE emp_resume DATA CAPTURE NONE;
  EMB_SQL_CHECK("SQL statement 10 -- invoke");

  EXEC SQL COMMIT;
  EMB_SQL_CHECK("SQL statement 11 -- invoke");

  cout << "\n  Start reading database log." << endl;

  // Get the database log info
  logBuffer = NULL;
  logBufferSize = 0;

  // The API db2ReadLog (Asynchronous Read Log) is used to extract records
  // from the database logs, and to query the log manager for current
  // log state information.
  // This API can only be used on recoverable databases.

  // Query the log manager for current log state information

  readLogInput.iCallerAction = DB2READLOG_QUERY;
  readLogInput.piStartLSN = NULL;
  readLogInput.piEndLSN = NULL;
  readLogInput.poLogBuffer = NULL;
  readLogInput.iLogBufferSize = 0;
  readLogInput.iFilterOption = DB2READLOG_FILTER_ON;
  readLogInput.poReadLogInfo = &readLogInfo;

  rc = db2ReadLog(db2Version900, &readLogInput, &sqlca);

  DB2_API_CHECK("database log info -- get");

  // Read the database log
  logBufferSize = 64 * 1024;
  logBuffer = new char[logBufferSize];

  memcpy(&startLSN, &(readLogInfo.initialLSN), sizeof(startLSN));
  memcpy(&endLSN, &(readLogInfo.nextStartLSN), sizeof(endLSN));

  // Extract a log record from the database logs, and
  // read the first log sequence asynchronously.
  readLogInput.iCallerAction = DB2READLOG_READ;
  readLogInput.piStartLSN = &startLSN;
  readLogInput.piEndLSN = &endLSN;
  readLogInput.poLogBuffer = logBuffer;
  readLogInput.iLogBufferSize = logBufferSize;
  readLogInput.iFilterOption = DB2READLOG_FILTER_ON;
  readLogInput.poReadLogInfo = &readLogInfo;

  rc = db2ReadLog(db2Version900, &readLogInput, &sqlca);
  if (sqlca.sqlcode != SQLU_RLOG_READ_TO_CURRENT)
  {
    DB2_API_CHECK("database logs -- read");
  }
  else
  {
    if (readLogInfo.logRecsWritten == 0)
    {
      cout << "  Database log empty." << endl;
    }
  }

  // Display the log buffer
  rc = LogBufferDisplay(logBuffer, readLogInfo.logRecsWritten);
  CHECKRC(rc, "UtilLog.LogBufferDisplay");

  while (sqlca.sqlcode != SQLU_RLOG_READ_TO_CURRENT)
  {
    // Read the next log sequence
    memcpy(&startLSN, &(readLogInfo.nextStartLSN), sizeof(startLSN));

    // Extract a log record from the database logs, and
    // read the next log sequence asynchronously.
    rc = db2ReadLog(db2Version900, &readLogInput, &sqlca);
    if (sqlca.sqlcode != SQLU_RLOG_READ_TO_CURRENT)
    {
      DB2_API_CHECK("database logs -- read");
    }

    // Display the log buffer
    rc = LogBufferDisplay(logBuffer, readLogInfo.logRecsWritten);
    CHECKRC(rc, "LogBufferDisplay");
  }

  // Release the log buffer
  delete [] logBuffer;

  // Disconnect from the database
  rc = db->Disconnect();
  CHECKRC(rc, "db->Disconnect");

  return 0;
} // DbLogconn::DbLogRecordsForCurrentConnectionRead

int main(int argc, char *argv[])
{
  int rc = 0;
  CmdLineArgs check;
  char serverWorkingPath[SQL_PATH_SZ + 1] = { 0 };
  sqluint16 savedLogRetainValue = 0;
  Instance inst;
  DbEmb db;
  DbLogconn dblogconn;

  // Check the command line arguments
  rc = check.CmdLineArgsCheck3(argc, argv, db, inst);
  CHECKRC(rc, "check.CmdLineArgsCheck3");

  cout << "\nTHIS SAMPLE SHOWS HOW TO READ DATABASE LOGS ASYNCHRONOUSLY" << endl;
  cout << "WITH A DATABASE CONNECTION." << endl;
  
  // Attach to a local or remote instance
  rc = inst.Attach();
  CHECKRC(rc, "inst.Attach");

  // Get a server working path
  rc = dblogconn.ServerWorkingPathGet(&db, serverWorkingPath);
  CHECKRC(rc, "dblogconn.ServerWorkingPathGet");

  // Save log retain value
  rc = dblogconn.DbLogRetainValueSave(&db, &savedLogRetainValue);
  CHECKRC(rc, "dblogconn.DbLogRetainValueSave");

  cout << "\n*****************************\n";
  cout << "*** ASYNCHRONOUS READ LOG ***\n";
  cout << "*****************************\n";
  // Call the function to do asynchronous log read 
  rc = dblogconn.DbLogRecordsForCurrentConnectionRead(&db, 
                                                    serverWorkingPath);
  CHECKRC(rc, "dblogconn.DbLogRecordsForCurrentConnectionRead");

  // Restore log retain value
  rc = dblogconn.DbLogRetainValueRestore(&db, &savedLogRetainValue);
  CHECKRC(rc, "dblogconn.DbLogRetainValueRestore");

  // Detach from the local or remote instance
  rc = inst.Detach();
  CHECKRC(rc, "inst.Detach");

  return 0;
} // main
