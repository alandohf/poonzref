/****************************************************************************
** Licensed Materials - Property of IBM
**
** Governed under the terms of the International
** License Agreement for Non-Warranted Sample Code.
**
** (C) COPYRIGHT International Business Machines Corp. 1996 - 2003
** All Rights Reserved.
**
** US Government Users Restricted Rights - Use, duplication or
** disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
*****************************************************************************
**
** SOURCE FILE NAME: dbredirect.sqx
**
** SAMPLE: How to recover a database using redirected restore
**
**         Note:
**           You must be disconnected from the sample database to run
**           this program. To ensure you are, enter 'db2 connect reset'
**           on the command line prior to running dbredirect. If the target
**           database for the redirected restore already exists, SQLCODE 2529
**           will be displayed.
**
** DB2 API USED:
**         db2CfgSet -- Set Configuration
**         db2Restore -- Restore Database
**         sqlbstc -- Set Table Space Containers
**         sqlbtcq -- Table Space Container Query
**         sqlbmtsq -- Table Space Query
**         sqlefmem -- Free Memory  
**
** OUTPUT FILE: dbredirect.out (available in the online documentation)
*****************************************************************************
**
** For detailed information about database backup and database recovery, see
** the Data Recovery and High Availability Guide and Reference. This manual
** will help you to determine which database and table space recovery methods
** are best suited to your business environment.
**
** For more information on the sample programs, see the README file.
**
** For information on developing C++ applications, see the Application
** Development Guide.
**
** For information on using SQL statements, see the SQL Reference.
**
** For information on DB2 APIs, see the Administrative API Reference.
**
** For the latest information on programming, building, and running DB2
** applications, visit the DB2 application development website:
**     http://www.software.ibm.com/data/db2/udb/ad
****************************************************************************/
#include <stdlib.h>
#ifdef DB2NT
#include "utilrecov.cxx"
#else
#include "utilrecov.C"
#endif

class DbRedirect: public UtilRecov
{ 
  public:
    int DbBackupAndRedirectedRestore(DbEmb *, DbEmb *, char *, char *, char *);

  private:
    int InaccessableContainersRedefine(char *);
};

int DbRedirect::DbBackupAndRedirectedRestore(DbEmb *db,
                                             DbEmb *redirectedRestoredDb,
                                             char serverWorkingPath[],
                                             char storPath1[],
                                             char storPath2[])
{
  int rc = 0;
  struct sqlca sqlca = { 0 };
  unsigned short logretain = 0;
  db2CfgParam cfgParameters[1] = { 0 };
  db2Cfg cfgStruct = { 0 };

  char restoreTimestamp[SQLU_TIME_STAMP_LEN + 1] = { 0 };

  db2BackupStruct backupStruct = { 0 };
  db2TablespaceStruct tablespaceStruct = { 0 };
  db2MediaListStruct mediaListStruct = { 0 };
  db2Uint32 backupImageSize = 0;
  db2RestoreStruct restoreStruct = { 0 };
  db2TablespaceStruct rtablespaceStruct = { 0 };
  db2MediaListStruct rmediaListStruct = { 0 };
  db2StoragePathsStruct storagePathsStruct = { 0 };
  char * storagePaths[2];

  storagePaths[0]= (char *) malloc (sizeof(char)* (SQL_PATH_SZ + 1));
  storagePaths[1]= (char *) malloc (sizeof(char)* (SQL_PATH_SZ + 1));

  if (storagePaths[0] == NULL || storagePaths[1] == NULL)
  {
    printf("ERROR: Unable to allocate memory for storage paths.\n\n");
    return (1);
  }


  cout << "\n**************************\n";
  cout << "*** REDIRECTED RESTORE ***\n";
  cout << "**************************\n";
  cout << "\nUSE THE DB2 APIs:" << endl;
  cout << "  db2CfgSet -- SET CONFIGURATION" << endl;
  cout << "  db2Backup -- BACKUP DATABASE" << endl;
  cout << "  sqlecrea -- CREATE DATABASE" << endl;
  cout << "  db2Restore -- RESTORE DATABASE" << endl;
  cout << "  sqlbmtsq -- TABLESPACE QUERY" << endl;
  cout << "  sqlbtcq -- TABLESPACE CONTAINER QUERY" << endl;
  cout << "  sqlbstsc -- SET TABLESPACE CONTAINER" << endl;
  cout << "  sqlefmem -- FREE MEMORY" << endl;
  cout << "  sqledrpd -- DROP DATABASE" << endl;
  cout << "TO BACK UP AND DO A REDIRECTED RESTORE OF A DATABASE." << endl;

  // Update db config: set logretain = NO
  cout << "\n  Update \'" << db->getAlias() << "\' database configuration:\n";
  cout << "    - Disable the database configuration parameter LOGRETAIN \n";
  cout << "        i.e., set LOGRETAIN = OFF/NO\n";
  
  cfgParameters[0].flags = 0;
  cfgParameters[0].token = SQLF_DBTN_LOG_RETAIN;
  cfgParameters[0].ptrvalue = (char *)&logretain;

  logretain = SQLF_LOGRETAIN_DISABLE;

  // Initialize cfgStruct
  cfgStruct.numItems = 1;
  cfgStruct.paramArray = cfgParameters;
  cfgStruct.flags = db2CfgDatabase | db2CfgDelayed;
  cfgStruct.dbname = db->getAlias();

  // Set database configuration
  db2CfgSet(db2Version900, (void *)&cfgStruct, &sqlca);
  DB2_API_CHECK("Db Log Retain -- Disable");

  //****************************
  //    BACKUP THE DATABASE    
  //****************************
    
  // Calling the routine for database backup 
  rc = DbBackup(db,serverWorkingPath, &backupStruct);
  CHECKRC(rc, "DbBackup");
  
  strcpy(restoreTimestamp, backupStruct.oTimestamp);

  // Start the restore process

  rtablespaceStruct.tablespaces = NULL;
  rtablespaceStruct.numTablespaces = 0;

  rmediaListStruct.locations = &serverWorkingPath;
  rmediaListStruct.numLocations = 1;
  rmediaListStruct.locationType = SQLU_LOCAL_MEDIA;

  restoreStruct.piSourceDBAlias = db->getAlias();
  restoreStruct.piTargetDBAlias = redirectedRestoredDb->getAlias();

  restoreStruct.piTimestamp = restoreTimestamp;
  restoreStruct.piTargetDBPath = NULL;
  restoreStruct.piReportFile = NULL;
  restoreStruct.piTablespaceList = &rtablespaceStruct;
  restoreStruct.piMediaList = &rmediaListStruct;
  restoreStruct.piUsername = db->getUser();
  restoreStruct.piPassword = db->getPswd();
  restoreStruct.piNewLogPath = NULL;
  restoreStruct.piVendorOptions = NULL;
  restoreStruct.iVendorOptionsSize = 0;
  restoreStruct.iParallelism = 1;
  restoreStruct.iBufferSize = 1024;     /*  1024 x 4KB */
  restoreStruct.iNumBuffers = 2;
  restoreStruct.iCallerAction = DB2RESTORE_RESTORE_STORDEF;
  restoreStruct.iOptions =
    DB2RESTORE_OFFLINE | DB2RESTORE_DB | DB2RESTORE_NODATALINK |
    DB2RESTORE_NOROLLFWD;
  restoreStruct.piTargetDBPath = storPath2;
  // The database will be restored on new storage paths 'storPath1' and 'storPath2'.
  strcpy( storagePaths[0], storPath1 );
  strcpy( storagePaths[1], storPath2 );

  storagePathsStruct.numStoragePaths = 2;
  storagePathsStruct.storagePaths = storagePaths;
  restoreStruct.piStoragePaths = &storagePathsStruct;


  cout << "\n  Restoring a database ..." << endl;
  cout << "    - source image alias      : " << db->getAlias() << endl;
  cout << "    - source image timestamp  : " << restoreTimestamp << endl;
  cout << "    - target restored database: "
    << redirectedRestoredDb->getAlias() << endl;

  // Restore database
  db2Restore(db2Version900, &restoreStruct, &sqlca);
  
  // If restoring to a different database and restoreDbAlias already exists,
  // SQLCODE 2529 is expected. 
  if (strcmp(db->getAlias(), redirectedRestoredDb->getAlias()))
  {
    cout << "\n  SQLCODE 2529 is expected if target database \'"; 
    cout << redirectedRestoredDb->getAlias() << "\' already exists\n"; 
  }
  
  cout << "\n-- The following warning report is expected! -";
  DB2_API_CHECK("database restore -- start");

  while (sqlca.sqlcode != 0)
  {
    // Continue the restore process
    cout << "\n  Continuing the restore operation..." << endl;

    // Depending on the sqlca.sqlcode value,
    // some user actions might be required like
    // mounting a new tape, for example.
    if (sqlca.sqlcode == SQLUD_INACCESSABLE_CONTAINER)
    {
      // Redefine the tablespace containers
      cout << "\n  Find and redefine inaccessable containers." << endl;
    }

    restoreStruct.iCallerAction = DB2RESTORE_CONTINUE;

    // restore the database 
    db2Restore(db2Version900, &restoreStruct, &sqlca);

    DB2_API_CHECK("database restore -- continue");
  }

  cout << "\n  Restore finished." << endl;

  // Drop the restored database
  rc = DbDrop(redirectedRestoredDb->getAlias());
  CHECKRC(rc, "DbDrop");

  return 0;
} // DbRedirect::DbBackupAndRedirectedRestore

int DbRedirect::InaccessableContainersRedefine(char serverWorkingPath[])
{
  int rc = 0;
  struct sqlca sqlca = { 0 };
  sqluint32 numTablespaces = 0;
  struct SQLB_TBSPQRY_DATA **ppTablespaces = NULL;
  sqluint32 numContainers = 0;
  struct SQLB_TBSCONTQRY_DATA *pContainers = NULL;
  int tspNb = 0;
  int contNb = 0;
  char pathSep[2] = { 0 };

  // Tablespace query
  sqlbmtsq(&sqlca,
           &numTablespaces, &ppTablespaces, SQLB_RESERVED1, SQLB_RESERVED2);
  DB2_API_CHECK("tablespaces -- get");

  // Redefine the inaccessable containers
  for (tspNb = 0; tspNb < numTablespaces; tspNb++)
  {
    // Get the tablespace containers
    sqlbtcq(&sqlca, ppTablespaces[tspNb]->id, &numContainers, &pContainers);
    DB2_API_CHECK("tablespace containers -- get");

    for (contNb = 0; contNb < numContainers; contNb++)
    {
      if (!pContainers[contNb].ok)
      {
        // Redefine an inaccessable container
        cout << "\n    Redefine inaccessable container:" << endl;
        cout << "      - tablespace name: "
          << ppTablespaces[tspNb]->name << endl;
        cout << "      - default container name: "
          << pContainers[contNb].name << endl;

        if (strstr(pContainers[contNb].name, "/"))      // UNIX
        {
          strcpy(pathSep, "/");
        }
        else    // Intel
        {
          strcpy(pathSep, "\\");
        }
        switch (pContainers[contNb].contType)
        {
          case SQLB_CONT_PATH:
            cout << "      - container type: path" << endl;
            cout << "      - new container name: "
              << serverWorkingPath << pathSep << "SQLT";
            cout.fill('0');
            cout.width(4);
            cout << ppTablespaces[tspNb]->id;
            cout << "." << pContainers[contNb].id << endl;
            break;
          case SQLB_CONT_DISK:
          case SQLB_CONT_FILE:
          default:
            cout << "    Unknown container type." << endl;
            break;
        }
      }
    }

    // Redefine the tablespace containers
    sqlbstsc(&sqlca,
             SQLB_SET_CONT_FINAL_STATE,
             ppTablespaces[tspNb]->id, numContainers, pContainers);
    DB2_API_CHECK("tablespace containers -- redefine");

    // Release the memory alloc. by DB2 API for tablespace containers
    sqlefmem(&sqlca, pContainers);
    DB2_API_CHECK("tablespace containers memory -- free");
  }

  // Release the memory allocated by DB2 API for tablespaces
  sqlefmem(&sqlca, ppTablespaces);
  DB2_API_CHECK("tablespaces memory -- free");

  return 0;
} // DbRedirect::InaccessableContainersRedefine

int main(int argc, char *argv[])
{
  int rc = 0;
  CmdLineArgs check;
  char serverWorkingPath[SQL_PATH_SZ + 1] = { 0 };
  sqluint16 savedLogRetainValue = 0;
  Instance inst;
  DbEmb db;
  DbEmb redirectedRestoredDb;
  DbRedirect redirect;
  char storPath1[SQL_PATH_SZ + 1] = { 0 };
  char storPath2[SQL_PATH_SZ + 1] = { 0 };
  char * home;
  char cmd1[256];
  char cmd2[256];
  char cmd3[256];
  char cmd4[256];

  // Check the command line arguments
  rc = check.CmdLineArgsCheck3(argc, argv, db, inst);
  CHECKRC(rc, "check.CmdLineArgsCheck3");

  redirectedRestoredDb.setDb("RRDB", db.getUser(), db.getPswd());
  
 // create directory for restore database 
  home = getenv("HOME");

  #if(defined(DB2NT))
    sprintf(storPath1, "%s\\restore1",home);
    sprintf(storPath2, "%s\\restore2",home);
    sprintf(cmd1, "rmdir /S /Q %s", storPath1);
    sprintf(cmd2, "rmdir /S /Q %s", storPath2);
  #else
    sprintf(storPath1, "%s/restore1",home);
    sprintf(storPath2, "%s/restore2",home);
    sprintf(cmd1, "rm -rf %s", storPath1);
    sprintf(cmd2, "rm -rf %s", storPath2);
  #endif

  sprintf(cmd3, "mkdir %s", storPath1);
  sprintf(cmd4, "mkdir %s", storPath2);

  rc = system(cmd1);
  rc = system(cmd2);
  rc = system(cmd3);
  rc = system(cmd4);

  cout << "\nTHIS SAMPLE SHOWS HOW TO PERFORM A REDIRECTED RESTORE" << endl;
  cout << "FROM A DATABASE BACKUP." << endl;
  // attach to a local or remote instance
  rc = inst.Attach();
  CHECKRC(rc, "inst.Attach");

  // Get a server working path
  rc = redirect.ServerWorkingPathGet(&db, serverWorkingPath);
  CHECKRC(rc, "redirect.ServerWorkingPathGet");

  cout << "\nNOTE: Backup images will be created on the server" << endl;
  cout << "      in the directory " << serverWorkingPath << "." << endl;
  cout << "      They will not be deleted by this program." << endl;

  cout << "\n-----------------------------------------------------------";
  cout << "\nUSE THE DB2 APIs:" << endl;
  cout << "  db2CfgGet -- GET CONFIGURATION" << endl;
  cout << "TO GET CONFIGURATION OF A DATABASE." << endl;

  // Save log retain value
  rc = redirect.DbLogRetainValueSave(&db, &savedLogRetainValue);
  CHECKRC(rc, "redirect.DbLogRetainValueSave");

  // Call the sample functions
  rc = redirect.DbRecoveryHistoryFilePrune(&db);
  CHECKRC(rc, "redirect.DbRecoveryHistoryFilePrune");
  
  rc = redirect.DbBackupAndRedirectedRestore(&db,
                                             &redirectedRestoredDb,
                                             serverWorkingPath,
                                             storPath1, storPath2 );
  CHECKRC(rc, "redirect.DbBackupAndRedirectedRestore");

  // Restore log retain value
  rc = redirect.DbLogRetainValueRestore(&db, &savedLogRetainValue);
  CHECKRC(rc, "redirect.DbLogRetainValueRestore");

  // Detach from the local or remote instance
  rc = inst.Detach();
  CHECKRC(rc, "inst.Detach");

  return 0;
} // main
