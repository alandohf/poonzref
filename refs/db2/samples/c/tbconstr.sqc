/****************************************************************************
** Licensed Materials - Property of IBM
** 
** Governed under the terms of the International
** License Agreement for Non-Warranted Sample Code.
**
** (C) COPYRIGHT International Business Machines Corp. 1996 - 2002        
** All Rights Reserved.
**
** US Government Users Restricted Rights - Use, duplication or
** disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
*****************************************************************************
**
** SOURCE FILE NAME: tbconstr.sqc 
**    
** SAMPLE: How to create, use, and drop constraints 
**           
** The sample database for this sample should be created using 'db2sampl -v8'.
**
** SQL STATEMENTS USED:
**         CREATE TABLE 
**         EXECUTE IMMEDIATE 
**         PREPARE
**         DECLARE CURSOR
**         OPEN
**         FETCH
**         CLOSE
**         DROP TABLE
**         ALTER TABLE
**
** OUTPUT FILE: tbconstr.out (available in the online documentation)
*****************************************************************************
**
** For more information on the sample programs, see the README file.
**
** For information on developing C applications, see the Application
** Development Guide.
**
** For information on using SQL statements, see the SQL Reference.
**
** For the latest information on programming, building, and running DB2 
** applications, visit the DB2 application development website: 
**     http://www.software.ibm.com/data/db2/udb/ad
****************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlenv.h>
#include <sqlutil.h>
#include "utilemb.h"

int Cn_NOT_NULL_Show(void);
int Cn_UNIQUE_Show(void);
int Cn_PRIMARY_KEY_Show(void);
int Cn_CHECK_Show(void);
int Cn_CHECK_INFO_Show(void);
int Cn_WITH_DEFAULT_Show(void);
int Cn_FK_OnInsertShow(void);
int Cn_FK_ON_UPDATE_NO_ACTION_Show(void);
int Cn_FK_ON_UPDATE_RESTRICT_Show(void);
int Cn_FK_ON_DELETE_CASCADE_Show(void);
int Cn_FK_ON_DELETE_SET_NULL_Show(void);
int Cn_FK_ON_DELETE_NO_ACTION_Show(void);
int Cn_FK_ON_DELETE_RESTRICT_Show(void);
/* support functions */
int FK_TwoTablesCreate(void);
int FK_TwoTablesDisplay(void);
int FK_TwoTablesDrop(void);
int FK_Create(char *);
int FK_Drop(void);

EXEC SQL BEGIN DECLARE SECTION;
  char strStmt[384];
  char deptno[3 + 1];
  char deptname[20 + 1];
  char empno[4 + 1];
  char empname[10 + 1];
  char dept_no[3 + 1];
  short dept_noInd;
  char firstname[10 + 1];
  char lastname[10 + 1];
  double salary;
EXEC SQL END DECLARE SECTION;

int main(int argc, char *argv[])
{
  int rc = 0;

  char dbAlias[SQL_ALIAS_SZ + 1];
  char user[USERID_SZ + 1];
  char pswd[PSWD_SZ + 1];

  /* check the command line arguments */
  rc = CmdLineArgsCheck1(argc, argv, dbAlias, user, pswd);
  if (rc != 0)
  {
    return rc;
  }

  printf("\nTHIS SAMPLE SHOWS HOW TO CREATE/USE/DROP CONSTRAINTS.\n");

  /* connect to database */
  rc = DbConn(dbAlias, user, pswd);
  if (rc != 0)
  {
    return rc;
  }

  rc = Cn_NOT_NULL_Show();
  rc = Cn_UNIQUE_Show();
  rc = Cn_PRIMARY_KEY_Show();
  rc = Cn_CHECK_Show();
  rc = Cn_CHECK_INFO_Show();
  rc = Cn_WITH_DEFAULT_Show();

  printf("\n#####################################################\n"
         "#    Create tables for FOREIGN KEY sample functions #\n"
         "#####################################################\n");

  rc = FK_TwoTablesCreate();
  if (rc != 0)
  {
    return rc;
  }

  rc = Cn_FK_OnInsertShow();
  rc = Cn_FK_ON_UPDATE_NO_ACTION_Show();
  rc = Cn_FK_ON_UPDATE_RESTRICT_Show();
  rc = Cn_FK_ON_DELETE_CASCADE_Show();
  rc = Cn_FK_ON_DELETE_SET_NULL_Show();
  rc = Cn_FK_ON_DELETE_NO_ACTION_Show();

  printf("\n########################################################\n"
         "# Drop tables created for FOREIGN KEY sample functions #\n"
         "########################################################\n");

  rc = FK_TwoTablesDrop();

  /* disconnect from the database */
  rc = DbDisconn(dbAlias);
  if (rc != 0)
  {
    return rc;
  }

  return 0;
} /* main */

int FK_TwoTablesCreate(void)
{
  struct sqlca sqlca;

  printf("\n  CREATE TABLE dept(deptno CHAR(3) NOT NULL,\n"
         "                    deptname VARCHAR(20),\n"
         "                    CONSTRAINT pk_dept PRIMARY KEY(deptno))\n");

  EXEC SQL CREATE TABLE dept(deptno CHAR(3) NOT NULL,
                             deptname VARCHAR(20),
                             CONSTRAINT pk_dept PRIMARY KEY(deptno));
  EMB_SQL_CHECK("first table -- create");

  printf("\n  INSERT INTO dept VALUES('A00', 'ADMINISTRATION'),\n"
         "                         ('B00', 'DEVELOPMENT'),\n"
         "                         ('C00', 'SUPPORT')\n");

  strcpy(strStmt, "INSERT INTO dept VALUES('A00', 'ADMINISTRATION'), "
                  "                       ('B00', 'DEVELOPMENT'), "
                  "                       ('C00', 'SUPPORT') ");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EMB_SQL_CHECK("first table -- insert");

  printf("\n  CREATE TABLE emp(empno CHAR(4),\n"
         "                   empname VARCHAR(10),\n"
         "                   dept_no CHAR(3))\n");

  EXEC SQL CREATE TABLE emp(empno CHAR(4),
                            empname VARCHAR(10),
                            dept_no CHAR(3));
  EMB_SQL_CHECK("second table -- create");

  printf("\n  INSERT INTO emp VALUES('0010', 'Smith', 'A00'),\n"
         "                        ('0020', 'Ngan', 'B00'),\n"
         "                        ('0030', 'Lu', 'B00'),\n"
         "                        ('0040', 'Wheeler', 'B00'),\n"
         "                        ('0050', 'Burke', 'C00'),\n"
         "                        ('0060', 'Edwards', 'C00'),\n"
         "                        ('0070', 'Lea', 'C00')\n");

  strcpy(strStmt, "INSERT INTO emp VALUES('0010', 'Smith', 'A00'), "
                  "                      ('0020', 'Ngan', 'B00'), "
                  "                      ('0030', 'Lu', 'B00'), "
                  "                      ('0040', 'Wheeler', 'B00'), "
                  "                      ('0050', 'Burke', 'C00'), "
                  "                      ('0060', 'Edwards', 'C00'), "
                  "                      ('0070', 'Lea', 'C00')  ");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EMB_SQL_CHECK("second table -- insert");

  EXEC SQL COMMIT;
  EMB_SQL_CHECK("transaction -- commit");

  return 0;
} /* FK_TwoTablesCreate */

int FK_TwoTablesDisplay(void)
{
  struct sqlca sqlca;

  printf("\n  SELECT * FROM dept\n");

  printf("    DEPTNO  DEPTNAME      \n");
  printf("    ------- --------------\n");

  strcpy(strStmt, "SELECT * FROM dept");

  EXEC SQL PREPARE stmt1 FROM :strStmt;
  EMB_SQL_CHECK("stmt1 -- prepare");

  EXEC SQL DECLARE c1 CURSOR FOR stmt1;

  EXEC SQL OPEN c1;
  EMB_SQL_CHECK("cursor -- open");

  EXEC SQL FETCH c1 INTO :deptno, :deptname;
  EMB_SQL_CHECK("cursor -- fetch");

  while (sqlca.sqlcode != 100)
  {
    printf("    %-7s %-20s\n", deptno, deptname);

    EXEC SQL FETCH c1 INTO :deptno, :deptname;
    EMB_SQL_CHECK("cursor -- fetch");
  }

  EXEC SQL CLOSE c1;
  EMB_SQL_CHECK("cursor -- close");

  printf("\n  SELECT * FROM emp\n");

  printf("    EMPNO EMPNAME    DEPT_NO\n");
  printf("    ----- ---------- -------\n");

  strcpy(strStmt, "SELECT * FROM emp");

  EXEC SQL PREPARE stmt2 FROM :strStmt;
  EMB_SQL_CHECK("stmt2 -- prepare");

  EXEC SQL DECLARE c2 CURSOR FOR stmt2;

  EXEC SQL OPEN c2;
  EMB_SQL_CHECK("cursor -- open");

  EXEC SQL FETCH c2 INTO :empno, :empname, :dept_no:dept_noInd;
  EMB_SQL_CHECK("cursor -- fetch");

  while (sqlca.sqlcode != 100)
  {
    printf("    %-5s %-10s", empno, empname);
    if (dept_noInd >= 0)
    {
      printf(" %-3s\n", dept_no);
    }
    else
    {
      printf(" -\n");
    }

    EXEC SQL FETCH c2 INTO :empno, :empname, :dept_no:dept_noInd;
    EMB_SQL_CHECK("cursor -- fetch");
  }

  EXEC SQL CLOSE c2;
  EMB_SQL_CHECK("cursor -- close");

  return 0;
} /* FK_TwoTablesDisplay */

int FK_TwoTablesDrop(void)
{
  struct sqlca sqlca;

  printf("\n  DROP TABLE dept\n");

  EXEC SQL DROP TABLE dept;
  EMB_SQL_CHECK("first table -- drop");

  printf("  DROP TABLE emp\n");

  EXEC SQL DROP TABLE emp;
  EMB_SQL_CHECK("second table -- drop");

  EXEC SQL COMMIT;
  EMB_SQL_CHECK("transaction -- commit");

  return 0;
} /* FK_TwoTablesDrop */

int FK_Create(char *ruleClause)
{
  struct sqlca sqlca;

  printf("\n  ALTER TABLE emp ADD CONSTRAINT fk_dept\n"
         "    FOREIGN KEY(dept_no)\n"
         "    REFERENCES dept(deptno)\n"
         "    %s\n", ruleClause);

  sprintf(strStmt, "ALTER TABLE emp ADD CONSTRAINT fk_dept "
                   "  FOREIGN KEY(dept_no) "
                   "  REFERENCES dept(deptno) "
                   "  %s ", ruleClause);

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EMB_SQL_CHECK("foreign key -- create");

  printf("  COMMIT\n");

  EXEC SQL COMMIT;
  EMB_SQL_CHECK("transaction -- commit");

  return 0;
} /* FK_Create */

int FK_Drop(void)
{
  struct sqlca sqlca;

  printf("\n  ALTER TABLE emp DROP CONSTRAINT fk_dept\n");
  strcpy(strStmt, "ALTER TABLE emp DROP CONSTRAINT fk_dept ");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EMB_SQL_CHECK("foreign key -- drop");

  printf("  COMMIT\n");

  EXEC SQL COMMIT;
  EMB_SQL_CHECK("transaction -- commit");

  return 0;
} /* FK_Drop */

int Cn_NOT_NULL_Show(void)
{
  int rc = 0;
  struct sqlca sqlca;

  printf("\n-----------------------------------------------------------");
  printf("\nUSE THE SQL STATEMENTS:\n");
  printf("  CREATE TABLE\n");
  printf("  COMMIT\n");
  printf("  INSERT\n");
  printf("  DROP TABLE\n");
  printf("TO SHOW A 'NOT NULL' CONSTRAINT.\n");

  /* create table */
  printf("\n  CREATE TABLE emp_sal(lastname VARCHAR(10) NOT NULL,\n"
         "                       firstname VARCHAR(10),\n"
         "                       salary DECIMAL(7, 2))\n");

  EXEC SQL CREATE TABLE emp_sal(lastname VARCHAR(10) NOT NULL,
                                firstname VARCHAR(10),
                                salary DECIMAL(7, 2));
  EMB_SQL_CHECK("table -- create");

  printf("  COMMIT\n");

  EXEC SQL COMMIT;
  EMB_SQL_CHECK("transaction -- commit");

  /* insert table */
  printf("\n  INSERT INTO emp_sal VALUES(NULL, 'PHILIP', 17000.00)\n");
  strcpy(strStmt, "INSERT INTO emp_sal VALUES(NULL, 'PHILIP', 17000.00) ");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EXPECTED_ERR_CHECK("table -- insert");

  /* drop table */
  printf("\n  DROP TABLE emp_sal\n");

  EXEC SQL DROP TABLE emp_sal;
  EMB_SQL_CHECK("table -- drop");

  return 0;
} /* Cn_NOT_NULL_Show */

int Cn_UNIQUE_Show(void)
{
  int rc = 0;
  struct sqlca sqlca;

  printf("\n-----------------------------------------------------------");
  printf("\nUSE THE SQL STATEMENTS:\n");
  printf("  CREATE TABLE\n");
  printf("  COMMIT\n");
  printf("  INSERT\n");
  printf("  ALTER TABLE\n");
  printf("  DROP TABLE\n");
  printf("TO SHOW A 'UNIQUE' CONSTRAINT.\n");

  /* create table */
  printf("\n  CREATE TABLE emp_sal(lastname VARCHAR(10) NOT NULL,\n"
         "                       firstname VARCHAR(10) NOT NULL,\n"
         "                       salary DECIMAL(7, 2),\n"
         "  CONSTRAINT unique_cn UNIQUE(lastname, firstname))\n");

  EXEC SQL CREATE TABLE emp_sal(lastname VARCHAR(10) NOT NULL,
                                firstname VARCHAR(10) NOT NULL,
                                salary DECIMAL(7, 2),
    CONSTRAINT unique_cn UNIQUE(lastname, firstname));
  EMB_SQL_CHECK("table -- create");

  printf("  COMMIT\n");

  EXEC SQL COMMIT;
  EMB_SQL_CHECK("transaction -- commit");

  /* insert table */
  printf("\n  INSERT INTO emp_sal VALUES('SMITH', 'PHILIP', 17000.00),"
         "\n                            ('SMITH', 'PHILIP', 21000.00) \n");
  strcpy(strStmt,
         "INSERT INTO emp_sal VALUES('SMITH', 'PHILIP', 17000.00), "
         "                          ('SMITH', 'PHILIP', 21000.00)  ");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EXPECTED_ERR_CHECK("table -- insert");

  /* drop constraint */
  printf("\n  ALTER TABLE emp_sal DROP CONSTRAINT unique_cn\n");

  EXEC SQL ALTER TABLE emp_sal DROP CONSTRAINT unique_cn;
  EMB_SQL_CHECK("constrain -- drop");

  /* drop table */
  printf("\n  DROP TABLE emp_sal\n");

  EXEC SQL DROP TABLE emp_sal;
  EMB_SQL_CHECK("table -- drop");

  return 0;
} /* Cn_UNIQUE_Show */

int Cn_PRIMARY_KEY_Show(void)
{
  int rc = 0;
  struct sqlca sqlca;

  printf("\n-----------------------------------------------------------");
  printf("\nUSE THE SQL STATEMENTS:\n");
  printf("  CREATE TABLE\n");
  printf("  COMMIT\n");
  printf("  INSERT\n");
  printf("  ALTER TABLE\n");
  printf("  DROP TABLE\n");
  printf("TO SHOW A 'PRIMARY KEY' CONSTRAINT.\n");

  /* create table */
  printf("\n  CREATE TABLE emp_sal(lastname VARCHAR(10) NOT NULL,\n"
         "                       firstname VARCHAR(10) NOT NULL,\n"
         "                       salary DECIMAL(7, 2),\n"
         "  CONSTRAINT pk_cn PRIMARY KEY(lastname, firstname))\n");

  EXEC SQL CREATE TABLE emp_sal(lastname VARCHAR(10) NOT NULL,
                                firstname VARCHAR(10) NOT NULL,
                                salary DECIMAL(7, 2),
     CONSTRAINT pk_cn PRIMARY KEY(lastname, firstname));
  EMB_SQL_CHECK("table -- create");

  printf("  COMMIT\n");

  EXEC SQL COMMIT;
  EMB_SQL_CHECK("transaction -- commit");

  /* insert table */
  printf("\n  INSERT INTO emp_sal VALUES('SMITH', 'PHILIP', 17000.00),"
         "\n                            ('SMITH', 'PHILIP', 21000.00) \n");

  strcpy(strStmt, 
         "INSERT INTO emp_sal VALUES('SMITH', 'PHILIP', 17000.00), "
         "                          ('SMITH', 'PHILIP', 21000.00) ");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EXPECTED_ERR_CHECK("table -- insert");

  /* drop constraint */
  printf("\n  ALTER TABLE emp_sal DROP CONSTRAINT pk_cn\n");

  EXEC SQL ALTER TABLE emp_sal DROP CONSTRAINT pk_cn;
  EMB_SQL_CHECK("constraint -- drop");

  /* drop table */
  printf("\n  DROP TABLE emp_sal\n");

  EXEC SQL DROP TABLE emp_sal;
  EMB_SQL_CHECK("table -- drop");

  return 0;
} /* Cn_PRIMARY_KEY_Show */

int Cn_CHECK_Show(void)
{
  int rc = 0;
  struct sqlca sqlca;

  printf("\n-----------------------------------------------------------");
  printf("\nUSE THE SQL STATEMENTS:\n");
  printf("  CREATE TABLE\n");
  printf("  COMMIT\n");
  printf("  INSERT\n");
  printf("  ALTER TABLE\n");
  printf("  DROP TABLE\n");
  printf("TO SHOW A 'CHECK' CONSTRAINT.\n");

  /* create table */
  printf("\n  CREATE TABLE emp_sal(lastname VARCHAR(10),\n"
         "                       firstname VARCHAR(10),\n"
         "                       salary DECIMAL(7, 2),\n"
         "    CONSTRAINT check_cn CHECK(salary < 25000.00))\n");

  EXEC SQL CREATE TABLE emp_sal(lastname VARCHAR(10),
                                firstname VARCHAR(10),
                                salary DECIMAL(7, 2),
    CONSTRAINT check_cn CHECK(salary < 25000.00));
  EMB_SQL_CHECK("table -- create");

  printf("  COMMIT\n");

  EXEC SQL COMMIT;
  EMB_SQL_CHECK("transaction -- commit");

  /* insert table */
  printf("\n  INSERT INTO emp_sal VALUES('SMITH', 'PHILIP', 27000.00)\n");
  strcpy(strStmt, "INSERT INTO emp_sal VALUES('SMITH', 'PHILIP', 27000.00)");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EXPECTED_ERR_CHECK("table -- insert");

  /* drop constraint */
  printf("\n  ALTER TABLE emp_sal DROP CONSTRAINT check_cn\n");

  EXEC SQL ALTER TABLE emp_sal DROP CONSTRAINT check_cn;
  EMB_SQL_CHECK("constrain -- drop");

  /* drop table */
  printf("\n  DROP TABLE emp_sal\n");

  EXEC SQL DROP TABLE emp_sal;
  EMB_SQL_CHECK("table -- drop");

  return 0;
} /* Cn_CHECK_Show */

int Cn_CHECK_INFO_Show(void)
{
  int rc = 0;
  struct sqlca sqlca;

  printf("\n-----------------------------------------------------------");
  printf("\nUSE THE SQL STATEMENTS:\n");
  printf("  CREATE TABLE\n");
  printf("  COMMIT\n");
  printf("  INSERT\n");
  printf("  ALTER TABLE\n");
  printf("  DROP TABLE\n");
  printf("TO SHOW AN 'INFORMATIONAL' CONSTRAINT.\n");

  /* create table */
  printf("\n  CREATE TABLE emp(empno INTEGER NOT NULL PRIMARY KEY,\n"
         "                   name VARCHAR(10),\n"
         "                   firstname VARCHAR(20),\n"
         "                   salary INTEGER CONSTRAINT minsalary\n"
         "                          CHECK (salary >= 25000)\n"
         "                          NOT ENFORCED\n"
         "                          ENABLE QUERY OPTIMIZATION)\n");           

  EXEC SQL CREATE TABLE emp(empno INTEGER NOT NULL PRIMARY KEY,
                            name VARCHAR(10),
                            firstname VARCHAR(20),
                            salary INTEGER CONSTRAINT minsalary
                                   CHECK (salary >= 25000)
                                   NOT ENFORCED
                                   ENABLE QUERY OPTIMIZATION);
  
  EMB_SQL_CHECK("table -- create");

  printf("  COMMIT\n");
  EXEC SQL COMMIT;
  EMB_SQL_CHECK("transaction -- commit");

  /* Insert data that doesn't satisfy the constraint 'minsalary'. 
     Database manager does not enforce the constraint for IUD operations */
  printf("\n\nTO SHOW NOT ENFORCED OPTION\n");
  printf("\n  INSERT INTO emp VALUES(1, 'SMITH', 'PHILIP', 1000)\n\n");
  strcpy(strStmt, "INSERT INTO emp VALUES(1, 'SMITH', 'PHILIP', 1000)");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EMB_SQL_CHECK("table -- insert");

  /* Alter the constraint to make it ENFORCED by database manager */ 
  printf("Alter the constraint to make it ENFORCED by database manager\n");
  printf("\n  ALTER TABLE emp ALTER CHECK minsalary ENFORCED\n");
  strcpy(strStmt, "ALTER TABLE emp ALTER CHECK minsalary ENFORCED");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EXPECTED_ERR_CHECK("table -- alter");

  /* Delete entries from EMP Table */
  printf("\n  DELETE FROM emp\n");
  strcpy(strStmt, "DELETE FROM emp");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;  
  EMB_SQL_CHECK("table -- alter");

  /* Alter the constraint to make it ENFORCED by database manager */ 
  printf("\n\nTO SHOW ENFORCED OPTION\n");
  printf("\n  ALTER TABLE emp ALTER CHECK minsalary ENFORCED\n");
  strcpy(strStmt, "ALTER TABLE emp ALTER CHECK minsalary ENFORCED");
  EXEC SQL EXECUTE IMMEDIATE :strStmt;  
  EMB_SQL_CHECK("table -- alter");

  /* Insert table with data not conforming to the constraint 'minsalary'
     Database manager does not enforce the constraint for IUD operations */
  printf("\n  INSERT INTO emp VALUES(1, 'SMITH', 'PHILIP', 1000)\n");
  strcpy(strStmt, "INSERT INTO emp VALUES(1, 'SMITH', 'PHILIP', 1000)");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EXPECTED_ERR_CHECK("table -- insert");

  /* drop table */
  printf("\n  DROP TABLE emp\n");

  EXEC SQL DROP TABLE emp;
  EMB_SQL_CHECK("table -- drop");

  return 0;
} /* Cn_CHECK_INFO_Show */

int Cn_WITH_DEFAULT_Show(void)
{
  int rc = 0;
  struct sqlca sqlca;

  printf("\n-----------------------------------------------------------");
  printf("\nUSE THE SQL STATEMENTS:\n");
  printf("  CREATE TABLE\n");
  printf("  COMMIT\n");
  printf("  INSERT\n");
  printf("  DROP TABLE\n");
  printf("TO SHOW A 'WITH DEFAULT' CONSTRAINT.\n");

  /* create table */
  printf("\n  CREATE TABLE emp_sal(lastname VARCHAR(10),\n"
         "                       firstname VARCHAR(10),\n"
         "                       "
         "salary DECIMAL(7, 2) WITH DEFAULT 17000.00)\n");
  EXEC SQL CREATE TABLE emp_sal(lastname VARCHAR(10),
                                firstname VARCHAR(10),
                                salary DECIMAL(7, 2) WITH DEFAULT 17000.00);
  EMB_SQL_CHECK("table -- create");

  printf("  COMMIT\n");

  EXEC SQL COMMIT;
  EMB_SQL_CHECK("transaction -- commit");

  /* insert table */
  printf("\n  INSERT INTO emp_sal(lastname, firstname)\n"
         "    VALUES('SMITH', 'PHILIP'),\n"
         "          ('PARKER', 'JOHN'),\n"
         "          ('PEREZ', 'MARIA')\n");

  strcpy(strStmt, "INSERT INTO emp_sal(lastname, firstname) "
                  "  VALUES('SMITH' , 'PHILIP'), "
                  "        ('PARKER', 'JOHN'), "
                  "        ('PEREZ' , 'MARIA') ");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EMB_SQL_CHECK("table -- insert");

  /* display table */
  printf("\n  SELECT * FROM emp_sal\n");

  printf("    FIRSTNAME  LASTNAME   SALARY  \n");
  printf("    ---------- ---------- --------\n");

  strcpy(strStmt, "SELECT * FROM emp_sal");

  EXEC SQL PREPARE stmt3 FROM :strStmt;
  EMB_SQL_CHECK("stmt3 -- prepare");

  EXEC SQL DECLARE c3 CURSOR FOR stmt3;

  EXEC SQL OPEN c3;
  EMB_SQL_CHECK("cursor -- open");

  EXEC SQL FETCH c3 INTO :firstname, :lastname, :salary;
  EMB_SQL_CHECK("cursor -- fetch");

  while (sqlca.sqlcode != 100)
  {
    printf("    %-10s %-10s %-7.2f\n", firstname, lastname, salary);

    EXEC SQL FETCH c3 INTO :firstname, :lastname, :salary;
    EMB_SQL_CHECK("cursor -- fetch");
  }

  EXEC SQL CLOSE c3;
  EMB_SQL_CHECK("cursor -- close");

  /* drop table */
  printf("\n  DROP TABLE emp_sal\n");

  EXEC SQL DROP TABLE emp_sal;
  EMB_SQL_CHECK("table -- drop");

  return 0;
} /* Cn_WITH_DEFAULT_Show */

int Cn_FK_OnInsertShow(void)
{
  int rc = 0;
  struct sqlca sqlca;

  printf("\n-----------------------------------------------------------");
  printf("\nUSE THE SQL STATEMENTS:\n");
  printf("  ALTER TABLE\n");
  printf("  COMMIT\n");
  printf("  INSERT\n");
  printf("  ROLLBACK\n");
  printf("TO SHOW HOW A FOREIGN KEY WORKS ON INSERT.\n");

  /* display initial tables content */
  rc = FK_TwoTablesDisplay();

  /* create foreign key */
  rc = FK_Create("");

  /* insert parent table */
  printf("\n  INSERT INTO dept VALUES('D00', 'SALES')\n");
  strcpy(strStmt, "INSERT INTO dept VALUES('D00', 'SALES') ");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EMB_SQL_CHECK("parent table -- insert");

  /* insert child table */
  printf("\n  INSERT INTO emp VALUES('0080', 'Pearce', 'E03')\n");
  strcpy(strStmt, "INSERT INTO emp VALUES('0080', 'Pearce', 'E03') ");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EXPECTED_ERR_CHECK("child table -- insert");

  /* display final tables content */
  rc = FK_TwoTablesDisplay();

  /* rollback transaction */
  printf("\n  ROLLBACK\n");

  EXEC SQL ROLLBACK;
  EMB_SQL_CHECK("transaction -- rollback");

  /* drop foreign key */
  rc = FK_Drop();

  return 0;
} /* Cn_FK_OnInsertShow */

int Cn_FK_ON_UPDATE_NO_ACTION_Show(void)
{
  int rc = 0;
  struct sqlca sqlca;

  printf("\n-----------------------------------------------------------");
  printf("\nUSE THE SQL STATEMENTS:\n");
  printf("  ALTER TABLE\n");
  printf("  COMMIT\n");
  printf("  UPDATE\n");
  printf("  ROLLBACK\n");
  printf("TO SHOW AN 'ON UPDATE NO ACTION' FOREIGN KEY.\n");

  /* display initial tables content */
  rc = FK_TwoTablesDisplay();

  /* create foreign key */
  rc = FK_Create("ON UPDATE NO ACTION");

  /* update parent table */
  printf("\n  UPDATE dept SET deptno = 'E01' WHERE deptno = 'A00'\n");
  strcpy(strStmt, "UPDATE dept SET deptno = 'E01' WHERE deptno = 'A00' ");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EXPECTED_ERR_CHECK("parent table -- update");

  printf("\n  UPDATE dept SET deptno =\n"
         "    CASE\n"
         "      WHEN deptno = 'A00' THEN 'B00'\n"
         "      WHEN deptno = 'B00' THEN 'A00'\n"
         "    END\n"
         "    WHERE deptno = 'A00' OR deptno = 'B00'\n");

  strcpy(strStmt, "UPDATE dept SET deptno = "
                  "  CASE "
                  "    WHEN deptno = 'A00' THEN 'B00' "
                  "    WHEN deptno = 'B00' THEN 'A00' "
                  "  END "
                  "  WHERE deptno = 'A00' OR deptno = 'B00' ");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EMB_SQL_CHECK("parent table -- update");

  /* update child table */
  printf("\n  UPDATE emp SET dept_no = 'G11' WHERE empname = 'Wheeler'\n");
  strcpy(strStmt,
         "UPDATE emp SET dept_no = 'G11' WHERE empname = 'Wheeler' ");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EXPECTED_ERR_CHECK("child table -- update");

  /* display final tables content */
  rc = FK_TwoTablesDisplay();

  /* rollback transaction */
  printf("\n  ROLLBACK\n");

  EXEC SQL ROLLBACK;
  EMB_SQL_CHECK("transaction -- rollback");

  /* drop foreign key */
  rc = FK_Drop();

  return 0;
} /* Cn_FK_ON_UPDATE_NO_ACTION_Show */

int Cn_FK_ON_UPDATE_RESTRICT_Show(void)
{
  int rc = 0;
  struct sqlca sqlca;

  printf("\n-----------------------------------------------------------");
  printf("\nUSE THE SQL STATEMENTS:\n");
  printf("  ALTER TABLE\n");
  printf("  COMMIT\n");
  printf("  UPDATE\n");
  printf("  ROLLBACK\n");
  printf("TO SHOW AN 'ON UPDATE RESTRICT' FOREIGN KEY.\n");

  /* display initial tables content */
  rc = FK_TwoTablesDisplay();

  /* create foreign key */
  rc = FK_Create("ON UPDATE RESTRICT");

  /* update parent table */
  printf("\n  UPDATE dept SET deptno = 'E01' WHERE deptno = 'A00'\n");
  strcpy(strStmt, "UPDATE dept SET deptno = 'E01' WHERE deptno = 'A00' ");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EXPECTED_ERR_CHECK("parent table -- update");

  printf("\n  UPDATE dept SET deptno =\n"
         "    CASE\n"
         "      WHEN deptno = 'A00' THEN 'B00'\n"
         "      WHEN deptno = 'B00' THEN 'A00'\n"
         "    END\n"
         "    WHERE deptno = 'A00' OR deptno = 'B00'\n");

  strcpy(strStmt, "UPDATE dept SET deptno = "
                  "  CASE "
                  "    WHEN deptno = 'A00' THEN 'B00' "
                  "    WHEN deptno = 'B00' THEN 'A00' "
                  "  END "
                  "  WHERE deptno = 'A00' OR deptno = 'B00' ");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EXPECTED_ERR_CHECK("parent table -- update");

  /* update child table */
  printf("\n  UPDATE emp SET dept_no = 'G11' WHERE empname = 'Wheeler'\n");
  strcpy(strStmt,
         "UPDATE emp SET dept_no = 'G11' WHERE empname = 'Wheeler' ");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EXPECTED_ERR_CHECK("child table -- update");

  /* display final tables content */
  rc = FK_TwoTablesDisplay();

  /* rollback transaction */
  printf("\n  ROLLBACK\n");

  EXEC SQL ROLLBACK;
  EMB_SQL_CHECK("transaction -- rollback");

  /* drop foreign key */
  rc = FK_Drop();

  return 0;
} /* Cn_FK_ON_UPDATE_RESTRICT_Show */

int Cn_FK_ON_DELETE_CASCADE_Show(void)
{
  int rc = 0;
  struct sqlca sqlca;

  printf("\n-----------------------------------------------------------");
  printf("\nUSE THE SQL STATEMENTS:\n");
  printf("  ALTER TABLE\n");
  printf("  COMMIT\n");
  printf("  DELETE\n");
  printf("  ROLLBACK\n");
  printf("TO SHOW AN 'ON DELETE CASCADE' FOREIGN KEY.\n");

  /* display initial tables content */
  rc = FK_TwoTablesDisplay();

  /* create foreign key */
  rc = FK_Create("ON DELETE CASCADE");

  /* delete parent table */
  printf("\n  DELETE FROM dept WHERE deptno = 'C00'\n");
  strcpy(strStmt, "DELETE FROM dept WHERE deptno = 'C00' ");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EMB_SQL_CHECK("parent table -- delete");

  /* display tables content */
  rc = FK_TwoTablesDisplay();

  /* delete child table */
  printf("\n  DELETE FROM emp WHERE empname = 'Wheeler'\n");
  strcpy(strStmt, "DELETE FROM emp WHERE empname = 'Wheeler' ");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EMB_SQL_CHECK("child table -- delete");

  /* display final tables content */
  rc = FK_TwoTablesDisplay();

  /* rollback transaction */
  printf("\n  ROLLBACK\n");

  EXEC SQL ROLLBACK;
  EMB_SQL_CHECK("transaction -- rollback");

  /* drop foreign key */
  rc = FK_Drop();

  return 0;
} /* Cn_FK_ON_DELETE_CASCADE_Show */

int Cn_FK_ON_DELETE_SET_NULL_Show(void)
{
  int rc = 0;
  struct sqlca sqlca;

  printf("\n-----------------------------------------------------------");
  printf("\nUSE THE SQL STATEMENTS:\n");
  printf("  ALTER TABLE\n");
  printf("  COMMIT\n");
  printf("  DELETE\n");
  printf("  ROLLBACK\n");
  printf("TO SHOW AN 'ON DELETE SET NULL' FOREIGN KEY.\n");

  /* display initial tables content */
  rc = FK_TwoTablesDisplay();

  /* create foreign key */
  rc = FK_Create("ON DELETE SET NULL");

  /* delete parent table */
  printf("\n  DELETE FROM dept WHERE deptno = 'C00'\n");
  strcpy(strStmt, "DELETE FROM dept WHERE deptno = 'C00' ");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EMB_SQL_CHECK("parent table -- delete");

  /* display tables content */
  rc = FK_TwoTablesDisplay();

  /* delete child table */
  printf("\n  DELETE FROM emp WHERE empname = 'Wheeler'\n");
  strcpy(strStmt, "DELETE FROM emp WHERE empname = 'Wheeler' ");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EMB_SQL_CHECK("child table -- delete");

  /* display final tables content */
  rc = FK_TwoTablesDisplay();

  /* rollback transaction */
  printf("\n  ROLLBACK\n");

  EXEC SQL ROLLBACK;
  EMB_SQL_CHECK("transaction -- rollback");

  /* drop foreign key */
  rc = FK_Drop();

  return 0;
} /* Cn_FK_ON_DELETE_SET_NULL_Show */

int Cn_FK_ON_DELETE_NO_ACTION_Show(void)
{
  int rc = 0;
  struct sqlca sqlca;

  printf("\n-----------------------------------------------------------");
  printf("\nUSE THE SQL STATEMENTS:\n");
  printf("  ALTER TABLE\n");
  printf("  COMMIT\n");
  printf("  DELETE\n");
  printf("  ROLLBACK\n");
  printf("TO SHOW AN 'ON DELETE NO ACTION' FOREIGN KEY.\n");

  /* display initial tables content */
  rc = FK_TwoTablesDisplay();

  /* create foreign key */
  rc = FK_Create("ON DELETE NO ACTION");

  /* delete parent table */
  printf("\n  DELETE FROM dept WHERE deptno = 'C00'\n");
  strcpy(strStmt, "DELETE FROM dept WHERE deptno = 'C00' ");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EXPECTED_ERR_CHECK("parent table -- delete");

  /* delete child table */
  printf("\n  DELETE FROM emp WHERE empname = 'Wheeler'\n");
  strcpy(strStmt, "DELETE FROM emp WHERE empname = 'Wheeler' ");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EMB_SQL_CHECK("child table -- delete");

  /* display final tables content */
  rc = FK_TwoTablesDisplay();

  /* rollback transaction */
  printf("\n  ROLLBACK\n");

  EXEC SQL ROLLBACK;
  EMB_SQL_CHECK("transaction -- rollback");

  /* drop foreign key */
  rc = FK_Drop();

  return 0;
} /* Cn_FK_ON_DELETE_NO_ACTION_Show */
