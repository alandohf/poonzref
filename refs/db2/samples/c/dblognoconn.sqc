/****************************************************************************
** Licensed Materials - Property of IBM
**
** Governed under the terms of the International
** License Agreement for Non-Warranted Sample Code.
**
** (C) COPYRIGHT International Business Machines Corp. 2003
** All Rights Reserved.
**
** US Government Users Restricted Rights - Use, duplication or
** disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
*****************************************************************************
**
** SOURCE FILE NAME: dblognoconn.sqc
**
** SAMPLE: How to read database log files with no database connection
**
**         This program ends in ".sqc" even though it does not contain
**         embedded SQL statements. It links in  the embedded SQL utility
**         file for database connection and disconnection, so it needs the
**         embedded SQL extension for the precompiler.
**
**         Note:
**           You must be disconnected from the sample database to run
**           this program. To ensure you are, enter 'db2 connect reset'
**           on the command line prior to running dblognoconn. 
**
** The sample database for this sample should be created using 'db2sampl -v8'.
**
** DB2 API USED:
**         db2CfgGet -- Get Configuration
**         db2CfgSet -- Set Configuration
**         db2ReadLog -- Asynchronous Read Log
**         db2ReadLogNoConnInit -- Read log without a db connection
**         db2ReadLogNoConnTerm -- Terminate read log without a database 
**                                 connection
**
** OUTPUT FILE: dblognoconn.out (available in the online documentation)
*****************************************************************************
**
** For detailed information about database backup and database recovery, see
** the Data Recovery and High Availability Guide and Reference. This manual
** will help you to determine which database and table space recovery methods
** are best suited to your business environment.
**
** For more information on the sample programs, see the README file.
**
** For information on developing C applications, see the Application
** Development Guide.
**
** For information on using SQL statements, see the SQL Reference.
**
** For information on DB2 APIs, see the Administrative API Reference.
**
** For the latest information on programming, building, and running DB2
** applications, visit the DB2 application development website:
**     http://www.software.ibm.com/data/db2/udb/ad
****************************************************************************/
#include "utilrecov.c"
#include "utilemb.h"

/* local function prototypes */
int DbReadLogRecordsNoConn(char *, char *, char *, char *, char *);

int main(int argc, char *argv[])
{
  int rc = 0;
  char nodeName[SQL_INSTNAME_SZ + 1] = { 0 };
  char serverWorkingPath[SQL_PATH_SZ + 1] = { 0 };
  char dbAlias[SQL_ALIAS_SZ + 1] = { 0 };
  char user[USERID_SZ + 1] = { 0 };
  char pswd[PSWD_SZ + 1] = { 0 };

  /* check the command line arguments */
  rc = CmdLineArgsCheck3(argc, argv, dbAlias, nodeName, user, pswd);
  CHECKRC(rc, "CmdLineArgsCheck3");

  printf("\nTHIS SAMPLE SHOWS HOW TO READ DATABASE LOGS ASYNCHRONOUSLY\n");
  printf("WITH NO DATABASE CONNECTION.\n");

  /* attach to a local or remote instance */
  rc = InstanceAttach(nodeName, user, pswd);
  CHECKRC(rc, "Instance Attach");

  /* get the server working path */
  rc = ServerWorkingPathGet(dbAlias, serverWorkingPath);
  CHECKRC(rc, "ServerWorkingPathGet");

  /* call the routine to prune the history files */
  rc = DbRecoveryHistoryFilePrune(dbAlias, user, pswd);
  CHECKRC(rc, "DbRecoveryHistoryFilePrune");

  /* call the routine to read the log records for no db connection */
  rc = DbReadLogRecordsNoConn(dbAlias, nodeName, user, pswd, serverWorkingPath);
  CHECKRC(rc, "DbReadLogRecordsNoConn");

  return 0;
} /* end main */

int DbReadLogRecordsNoConn(char dbAlias[],
                           char nodeName[],
                           char user[],
                           char pswd[],
                           char serverWorkingPath[])
{
  int rc = 0;
  struct sqlca sqlca = { 0 };
  char logPath[SQL_PATH_SZ + 1] = { 0 };
  db2CfgParam cfgParameters[1] = { 0 };
  db2Cfg cfgStruct = { 0 };
  char nodeNum[] = "NODE0000\0";
  db2Uint32 readLogMemSize = 0;
  char *readLogMemory = NULL;
  struct db2ReadLogNoConnInitStruct readLogInit = { 0 };
  struct db2ReadLogNoConnInfoStruct readLogInfo = { 0 };
  struct db2ReadLogNoConnStruct readLogInput = { 0 };
  SQLU_LSN startLSN;
  SQLU_LSN endLSN;
  char *logBuffer = NULL;
  db2Uint32 logBufferSize = 0;
  struct db2ReadLogNoConnTermStruct readLogTerm = { 0 };

  printf("\n*********************************\n");
  printf("*** NO DB CONNECTION READ LOG ***\n");
  printf("*********************************\n");
  printf("\nUSE THE DB2 APIs:\n");
  printf("  db2ReadLogNoConnInit -- Initialize No Db Connection Read Log\n");
  printf("  db2ReadLogNoConn -- No Db Connection Read Log\n");
  printf("  db2ReadLogNoConnTerm -- Terminate No Db Connection Read Log\n");
  printf("TO READ LOG RECORDS FROM A DATABASE LOG DIRECTORY.\n");

  /* Determine the logpath to read log files from */
  cfgParameters[0].flags = 0;
  cfgParameters[0].token = SQLF_DBTN_LOGPATH;
  cfgParameters[0].ptrvalue =
    (char *)malloc((SQL_PATH_SZ + 1) * sizeof(char));

  /* Initialize cfgStruct */
  cfgStruct.numItems = 1;
  cfgStruct.paramArray = cfgParameters;
  cfgStruct.flags = db2CfgDatabase;
  cfgStruct.dbname = dbAlias;

  db2CfgGet(db2Version900, (void *)&cfgStruct, &sqlca);
  DB2_API_CHECK("log path -- get");

  strcpy(logPath, cfgParameters[0].ptrvalue);
  free(cfgParameters[0].ptrvalue);
  cfgParameters[0].ptrvalue = NULL;

  /* connect to the database */
  rc = DbConn(dbAlias, user, pswd);
  CHECKRC(rc, "DbConn");

  /* Invoke the SQL statements for filling database log */
  printf("\n  Invoke the following SQL statements:\n");
  printf("    ALTER TABLE emp_resume DATA CAPTURE CHANGES;\n");
  printf("    COMMIT;\n");
  printf("    INSERT INTO emp_resume\n");
  printf("      VALUES('000777', 'ascii', 'This is a new resume.');\n");
  printf("            ('777777', 'ascii', 'This is another new resume');\n");
  printf("    COMMIT;\n");
  printf("    DELETE FROM emp_resume WHERE empno = '000777';\n");
  printf("    DELETE FROM emp_resume WHERE empno = '777777';\n");
  printf("    COMMIT;\n");
  printf("    DELETE FROM emp_resume WHERE empno = '000140';\n");
  printf("    ROLLBACK;\n");
  printf("    ALTER TABLE emp_resume DATA CAPTURE NONE;\n");
  printf("    COMMIT;\n");

  EXEC SQL ALTER TABLE emp_resume DATA CAPTURE CHANGES;
  EMB_SQL_CHECK("SQL statement 1 -- invoke");

  EXEC SQL COMMIT;
  EMB_SQL_CHECK("SQL statement 2 -- invoke");

  EXEC SQL INSERT INTO emp_resume
    VALUES('000777', 'ascii', 'This is a new resume.'),
    ('777777', 'ascii', 'This is another new resume');
  EMB_SQL_CHECK("SQL statement 3 -- invoke");

  EXEC SQL COMMIT;
  EMB_SQL_CHECK("SQL statement 4 -- invoke");

  EXEC SQL DELETE FROM emp_resume WHERE empno = '000777';
  EMB_SQL_CHECK("SQL statement 5 -- invoke");

  EXEC SQL DELETE FROM emp_resume WHERE empno = '777777';
  EMB_SQL_CHECK("SQL statement 6 -- invoke");

  EXEC SQL COMMIT;
  EMB_SQL_CHECK("SQL statement 7 -- invoke");

  EXEC SQL DELETE FROM emp_resume WHERE empno = '000140';
  EMB_SQL_CHECK("SQL statement 8 -- invoke");

  EXEC SQL ROLLBACK;
  EMB_SQL_CHECK("SQL statement 9 -- invoke");

  EXEC SQL ALTER TABLE emp_resume DATA CAPTURE NONE;
  EMB_SQL_CHECK("SQL statement 10 -- invoke");

  EXEC SQL COMMIT;
  EMB_SQL_CHECK("SQL statement 11 -- invoke");

  /* detach from the local or remote instance before reading log information */
  rc = InstanceDetach(nodeName);
  CHECKRC(rc, "InstanceDetach");

  /*
   * First we must allocate memory for the API's control blocks and log
   * buffer 
   */
  readLogMemSize = 4 * 4096;
  readLogMemory = (char *)malloc(readLogMemSize);

  /* Invoke the initialization API to set up the control blocks */
  readLogInit.iFilterOption = DB2READLOG_FILTER_ON;
  readLogInit.piLogFilePath = logPath;
  readLogInit.piOverflowLogPath = NULL;
  readLogInit.iRetrieveLogs = DB2READLOG_RETRIEVE_OFF;
  readLogInit.piDatabaseName = dbAlias;
  readLogInit.piNodeName = nodeNum;
  readLogInit.iReadLogMemoryLimit = readLogMemSize;
  readLogInit.poReadLogMemPtr = &readLogMemory;

  db2ReadLogNoConnInit(db2Version900, &readLogInit, &sqlca);
  if (sqlca.sqlcode != SQLU_RLOG_LSNS_REUSED)
  {
    DB2_API_CHECK("database logs no db conn -- initialization");
  }
  /* Query for the current log information */
  readLogInput.iCallerAction = DB2READLOG_QUERY;
  readLogInput.piStartLSN = NULL;
  readLogInput.piEndLSN = NULL;
  readLogInput.poLogBuffer = NULL;
  readLogInput.iLogBufferSize = 0;
  readLogInput.piReadLogMemPtr = readLogMemory;
  readLogInput.poReadLogInfo = &readLogInfo;

  db2ReadLogNoConn(db2Version900, &readLogInput, &sqlca);
  if (sqlca.sqlcode != 0)
  {
    DB2_API_CHECK("database logs no db conn -- query");
  }
  /* Read some log records */
  logBufferSize = 64 * 1024;	/* Maximum size of a log buffer */
  logBuffer = (char *)malloc(logBufferSize);

  memcpy(&startLSN, &(readLogInfo.nextStartLSN), sizeof(startLSN));
  endLSN.lsnWord[0] = 0xffff;
  endLSN.lsnWord[1] = 0xffff;
  endLSN.lsnWord[2] = 0xffff;

  readLogInput.iCallerAction = DB2READLOG_READ;
  readLogInput.piStartLSN = &startLSN;
  readLogInput.piEndLSN = &endLSN;
  readLogInput.poLogBuffer = logBuffer;
  readLogInput.iLogBufferSize = logBufferSize;
  readLogInput.piReadLogMemPtr = readLogMemory;
  readLogInput.poReadLogInfo = &readLogInfo;

  db2ReadLogNoConn(db2Version900, &readLogInput, &sqlca);
  if (sqlca.sqlcode != SQLU_RLOG_READ_TO_CURRENT)
  {
    DB2_API_CHECK("database logs no db conn -- read");
  }
  else
  {
    if (readLogInfo.logRecsWritten == 0)
    {
      printf("\n  Database log empty.\n");
    }
  }

  /* Display the log records read */
  rc = LogBufferDisplay(logBuffer, readLogInfo.logRecsWritten);
  CHECKRC(rc, "LogBufferDisplay");

  while (sqlca.sqlcode != SQLU_RLOG_READ_TO_CURRENT)
  {
    /* read the next log sequence */
    memcpy(&startLSN, &(readLogInfo.nextStartLSN), sizeof(startLSN));

    /*
     * Extract a log record from the database logs, and read the
     * next log sequence asynchronously. 
     */
    db2ReadLogNoConn(db2Version900, &readLogInput, &sqlca);
    if (sqlca.sqlcode != SQLU_RLOG_READ_TO_CURRENT)
    {
      DB2_API_CHECK("database logs no db conn -- read");
    }
    /* display log buffer */
    rc = LogBufferDisplay(logBuffer, readLogInfo.logRecsWritten);
    CHECKRC(rc, "LogBufferDisplay");
  }

  printf("\nRead to end of logs.\n\n");
  free(logBuffer);
  logBuffer = NULL;
  logBufferSize = 0;

  readLogTerm.poReadLogMemPtr = &readLogMemory;

  db2ReadLogNoConnTerm(db2Version900, &readLogTerm, &sqlca);
  DB2_API_CHECK("database logs no db conn -- terminate");

  return 0;
} /* DbReadLogRecordsNoConn */
