//***************************************************************************
// Licensed Materials - Property of IBM
//
// Governed under the terms of the International
// License Agreement for Non-Warranted Sample Code.
//
// (C) COPYRIGHT International Business Machines Corp. 2006
// All Rights Reserved.
//
// US Government Users Restricted Rights - Use, duplication or
// disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
//***************************************************************************
//
// SOURCE FILE NAME: Flwor.sqlj
//
// SAMPLE: How to embed simple FLWOR expression of XQuery in SQLj
//
// SQL Statements USED:
//         SELECT
//         FETCH
//
// SQL/XML FUNCTIONS USED:
//                xmlcolumn
//                xmlquery
//
// XQUERY FUNCTION USED:
//                data
//                string
//
// OUTPUT FILE: Flwor.out (available in the online documentation)
//***************************************************************************
//
// For more information on the sample programs, see the README file.
//
// For information on developing SQLJ applications, see the Application
// Development Guide.
//
// For information on using SQL statements, see the SQL Reference.
//
// For information on using XQuery statements, see the XQuery Reference.
//
// For the latest information on programming, compiling, and running DB2
// applications, visit the DB2 application development website at
//     http://www.software.ibm.com/data/db2/udb/ad
//**************************************************************************/

import java.lang.*;
import java.sql.*;
import sqlj.runtime.*;
import sqlj.runtime.ref.*;

// Define the iterator to use in the functions
#sql iterator Positioned_Iterator(Object);

class Flwor
{
  public static void main(String argv[])
  {
    int rc=0;
    String url = "jdbc:db2:sample";
    Connection con=null;
    DefaultContext ctx=null;
    int cid;
    float price;
    String country;
    try
    {
      Class.forName("com.ibm.db2.jcc.DB2Driver").newInstance();
  
      // connect to the 'sample' database
      con = DriverManager.getConnection( url );
     
      // select the default context
      ctx= new DefaultContext(con);
      
      // set the default context for the sample
      DefaultContext.setDefaultContext(ctx); 
      System.out.println();  
    }
    catch(SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection().rollback(); }
      catch (Exception e)
      {
      }
      System.exit(1);
    }
    catch(Exception e)
    {}
    
    System.out.println("----------------------------------------------------------------");
    System.out.println("Select the customer details in order of their name.....");
    orderCustDetails();
    
    cid=1002;
    System.out.println("----------------------------------------------------------------");
    System.out.println("Select the customer details with customer ID greater then "+ cid +".....");
    conditionalCustDetails1(cid);
    
    cid=1002;
    country="US";
    System.out.println("----------------------------------------------------------------");    
    System.out.println("Select the customer details with customer ID greater then "+ cid +" and");
    System.out.println(" country not equal to "+ country +".....");
    conditionalCustDetails2(cid, country);
    
    System.out.println("----------------------------------------------------------------");
    System.out.println("Select the product with maximun price......");
    maxpriceproduct();
    
    price=10; 
    System.out.println("----------------------------------------------------------------");
    System.out.println("Select the product with basic price "+ price +"........");
    basicproduct(price);
  } // main 	
  
  // This function will find out the customer details in order of their name
  static void orderCustDetails()
  {
    try
    {
      Object data=null;
	  
      // declare an iterator
      Positioned_Iterator custIter=null;
      
     // Run the query with default context 
     #sql custIter = {SELECT XMLQUERY('for $custinfo in $cust/customerinfo[addr/@country="Canada"]
                              order by $custinfo/name
                             return $custinfo'
                              passing by ref customer.info as "cust") FROM customer};
      
      while (true)
      {
        // fetch the cursor
        #sql {FETCH :custIter INTO :data};

        if (custIter.endFetch())
        {
          break;
        }
        // print the reslt as an XML string
        System.out.println();
        System.out.println(((com.ibm.db2.jcc.DB2Xml)data).getDB2XmlString());
      }

      // close the cursor
      custIter.close(); 
    }
    catch(SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection().rollback(); }
      catch (Exception e)
      {
      }
      System.exit(1);
    }
    catch(Exception e)
    {}
  } // orderCustDetails
  
  // This function will find out  the customer details based on the condition
  // customer id is greater then the value passed to method (cid)
  static void conditionalCustDetails1(int cid)
  {
    try
    {
      Object data=null;
	  
      // declare an iterator
      Positioned_Iterator custIter=null;

     // Run the query with default context  
     #sql custIter = {SELECT XMLQUERY('for $customer in $cust/customerinfo
                                where ($customer/@Cid gt $id)
                                return <customer id="{$customer/@Cid}">
                                {$customer/name} {$customer/addr} </customer>'
                                passing by ref customer.info as "cust", cast(:cid as integer) as "id")
                                from customer};
      
      while (true)
      {
        // fetch the cursor
        #sql {FETCH :custIter INTO :data};

        if (custIter.endFetch())
        {
          break;
        }
        // print the reslt as an XML string
        System.out.println();
        System.out.println(((com.ibm.db2.jcc.DB2Xml)data).getDB2String());
      }

      // close the cursor
      custIter.close(); 
                   	  
    }
    catch(SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection().rollback(); }
      catch (Exception e)
      {
      }
      System.exit(1);
    }
    catch(Exception e)
    {}
  } // conditionalCustDetails1
  
  //  This function will find out  the customer details based on the condition
  // customer id is greater then cid value passed to the function and
  // country is not equal to country parameter value
  static void conditionalCustDetails2(int cid, String country)
  {
    try
    {
      Object data=null;
	  
      // declare an iterator
      Positioned_Iterator custIter=null;
      
      // Run the query with default context 
      #sql custIter = {select xmlquery('for $customer in $cust/customerinfo
                                 where ($customer/@Cid gt $id) and ($customer/addr/@country !=$c)
                                 return <customer id="{fn:string($customer/@Cid)}">
                                 {$customer/name}
                                 <address>{$customer/addr/street}
                                 {$customer/addr/city} </address></customer>'
                                 passing by ref customer.info as "cust",
                                 cast(:cid as integer) as "id",
                                 cast(:country as varchar(10)) as "c")
                                 from  customer};

      while (true)
      {
        // fetch the cursor
        #sql {FETCH :custIter INTO :data};

        if (custIter.endFetch())
        {
          break;
        }

       // print the result as DB2 string
        System.out.println();
        System.out.println(((com.ibm.db2.jcc.DB2Xml)data).getDB2String());
      }

      // close the cursor
      custIter.close(); 
                   	  
    }
    catch(SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection().rollback(); }
      catch (Exception e)
      {
      }
      System.exit(1);
    }
    catch(Exception e)
    {}
  } // conditionalCustDetails2
  
  // This function will return the product details with maximun price 
  static void maxpriceproduct()
  {
    try
    {
      Object data=null;
	  
      // declare an iterator 
      Positioned_Iterator priceIter=null;
      
      // Run the query with default context 
      #sql priceIter = {SELECT XMLQUERY('let $prod:=for $product in
                                     db2-fn:xmlcolumn("PRODUCT.DESCRIPTION")/product/description
                                     order by $product/price return $product
                                     return <product> {$prod[1]/name} </product>') 
                                     FROM sysibm.sysdummy1};
      
      while (true)
      {
        // fetch the cursor
        #sql {FETCH :priceIter INTO :data};

        if (priceIter.endFetch())
        {
          break;
        }

        // print the reslt as an XML string
        System.out.println();
        System.out.println(((com.ibm.db2.jcc.DB2Xml)data).getDB2XmlString());
      }

      // close the cursor
      priceIter.close(); 
                   	  
    }
    catch(SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection().rollback(); }
      catch (Exception e)
      {
      }
      System.exit(1);
    }
    catch(Exception e)
    {}
  } // maxpriceproduct
  
  
  // This function will return the product with basic attribute value true
  // if the price is less then price parameter otherwiese false
  static void basicproduct(float price)
  {
    try
    {
      Object data=null;
	  
      // declare an iterator 
      Positioned_Iterator prodIter=null;
      
      // Run the query with default context
      #sql prodIter = {select xmlquery('for $prod in db2-fn:xmlcolumn("PRODUCT.DESCRIPTION")
                              /product/description
                              return ( if ($prod/price < $price)
                              then <product basic = "true">{fn:data($prod/name)}</product>
                              else <product basic = "false">{fn:data($prod/name)}</product>)'
                              passing by ref cast(:price as float) as "price")
                              from SYSIBM.SYSDUMMY1};
      while (true)
      {
        // fetch the cursor
        #sql {FETCH :prodIter INTO :data};

        if (prodIter.endFetch())
        {
          break;
        }

        // print the reslt as an XML string
        System.out.println();
        System.out.println(((com.ibm.db2.jcc.DB2Xml)data).getDB2XmlString());
      }

      // close the cursor
      prodIter.close(); 
                   	  
    }
    catch(SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection().rollback(); }
      catch (Exception e)
      {
      }
      System.exit(1);
    }
    catch(Exception e)
    {}	  
  } // basicproduct
} // Flwor

