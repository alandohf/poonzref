      ***********************************************************************
      ** Licensed Materials - Property of IBM
      ** 
      ** Governed under the terms of the International
      ** License Agreement for Non-Warranted Sample Code.
      **
      ** (C) COPYRIGHT International Business Machines Corp. 1995 - 2002  
      ** All Rights Reserved.
      **
      ** US Government Users Restricted Rights - Use, duplication or
      ** disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
      ***********************************************************************
      **
      ** SOURCE FILE NAME: advsql.sqb 
      **
      ** SAMPLE: How to read table data using CASE 
      **
      **         This sample shows how to read table data using advanced
      **         SQL statements with CASE.
      **
      ** SQL STATEMENTS USED:
      **         BEGIN DECLARE SECTION 
      **         END DECLARE SECTION 
      **         CONNECT
      **         DECLARE
      **         FETCH
      **         OPEN
      **
      ** OUTPUT FILE: advsql.out (available in the online documentation)
      ***********************************************************************
      **
      ** For more information on the sample programs, see the README file. 
      **
      ** For information on developing COBOL applications, see the 
      ** Application Development Guide.
      **
      ** For information on using SQL statements, see the SQL Reference. 
      **
      ** For the latest information on programming, compiling, and running
      ** DB2 applications, visit the DB2 application development website: 
      **     http://www.software.ibm.com/data/db2/udb/ad
      ***********************************************************************

       Identification Division.
       Program-ID. "advsql".

       Data Division.
       Working-Storage Section.

           copy "sqlenv.cbl".
           copy "sql.cbl".
           copy "sqlca.cbl".

           EXEC SQL BEGIN DECLARE SECTION END-EXEC.

       01 userid            pic x(8).
       01 passwd.
         49 passwd-length   pic s9(4) comp-5 value 0.
         49 passwd-name     pic x(18).
       01 lname.
        49 lname-length     pic s9(4) comp-5 value 15.
        49 lname-name       pic x(15).
       01 wdept             pic x(3).

           EXEC SQL END DECLARE SECTION END-EXEC.

       77 errloc          pic x(80).
       77 counter         pic s9(4) comp-5 value 0.

       Procedure Division.
       Main Section.
           display "Sample COBOL program: ADVSQL".
           display "the statment to be executed:".
           display " ".
           display "SELECT LASTNAME, WORKDEPT FROM EMPLOYEE".
           display "   WHERE CASE".
           display "      WHEN BONUS+COMM = 0 THEN NULL".
           display "      ELSE SALARY/(BONUS+COMM)".
           display "   END > 10".
           display " ".

      * Get database connection information.
           display "Enter your user id (default none): " 
                with no advancing.
           accept userid.

           if userid = spaces
             EXEC SQL CONNECT TO sample END-EXEC
           else
             display "Enter your password : " with no advancing
             accept passwd-name.

      * Passwords in a CONNECT statement must be entered in a VARCHAR
      * format with the length of the input string.
           inspect passwd-name tallying passwd-length for characters
              before initial " ".

           display " ".

           EXEC SQL CONNECT TO sample USER :userid USING :passwd
               END-EXEC.
           move "CONNECT TO" to errloc.
           call "checkerr" using SQLCA errloc.

      * declare the cursor for the advanced SQL statement.
           EXEC SQL DECLARE c1 CURSOR FOR
                    SELECT LASTNAME, WORKDEPT FROM employee
                    WHERE CASE
                       WHEN BONUS+COMM = 0 THEN NULL
                       ELSE SALARY/(BONUS+COMM)
                    END > 10 END-EXEC.

           EXEC SQL OPEN c1 END-EXEC.
           move "OPEN" to errloc.
           call "checkerr" using SQLCA errloc.

           display "LASTNAME    WORKDEPT".

      * FETCH the rows from the table corresponding to the SQL statement.
           perform Fetch-Loop thru End-Fetch-Loop
              until SQLCODE not equal 0.

           display "   ", counter, " record(s) selected".

           EXEC SQL CONNECT RESET END-EXEC.
           move "CONNECT RESET" to errloc.
           call "checkerr" using SQLCA errloc.
       End-Main.
           go to End-Prog.

       Fetch-Loop Section.
           move spaces to lname-name.
           EXEC SQL FETCH c1 INTO :lname, :wdept END-EXEC.

           if SQLCODE not equal 0
              go to End-Fetch-Loop.
           display lname-name, "  ", wdept.

           add 1 to counter.
       End-Fetch-Loop. exit.

       End-Prog.
           stop run.
